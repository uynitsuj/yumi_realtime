// Generated by gencpp from file abb_robot_msgs/RAPIDTaskState.msg
// DO NOT EDIT!


#ifndef ABB_ROBOT_MSGS_MESSAGE_RAPIDTASKSTATE_H
#define ABB_ROBOT_MSGS_MESSAGE_RAPIDTASKSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace abb_robot_msgs
{
template <class ContainerAllocator>
struct RAPIDTaskState_
{
  typedef RAPIDTaskState_<ContainerAllocator> Type;

  RAPIDTaskState_()
    : name()
    , activated(false)
    , execution_state(0)
    , motion_task(false)  {
    }
  RAPIDTaskState_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , activated(false)
    , execution_state(0)
    , motion_task(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef uint8_t _activated_type;
  _activated_type activated;

   typedef uint8_t _execution_state_type;
  _execution_state_type execution_state;

   typedef uint8_t _motion_task_type;
  _motion_task_type motion_task;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(EXECUTION_STATE_UNKNOWN)
  #undef EXECUTION_STATE_UNKNOWN
#endif
#if defined(_WIN32) && defined(EXECUTION_STATE_READY)
  #undef EXECUTION_STATE_READY
#endif
#if defined(_WIN32) && defined(EXECUTION_STATE_STOPPED)
  #undef EXECUTION_STATE_STOPPED
#endif
#if defined(_WIN32) && defined(EXECUTION_STATE_STARTED)
  #undef EXECUTION_STATE_STARTED
#endif
#if defined(_WIN32) && defined(EXECUTION_STATE_UNINITIALIZED)
  #undef EXECUTION_STATE_UNINITIALIZED
#endif

  enum {
    EXECUTION_STATE_UNKNOWN = 1u,
    EXECUTION_STATE_READY = 2u,
    EXECUTION_STATE_STOPPED = 3u,
    EXECUTION_STATE_STARTED = 4u,
    EXECUTION_STATE_UNINITIALIZED = 5u,
  };


  typedef boost::shared_ptr< ::abb_robot_msgs::RAPIDTaskState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::abb_robot_msgs::RAPIDTaskState_<ContainerAllocator> const> ConstPtr;

}; // struct RAPIDTaskState_

typedef ::abb_robot_msgs::RAPIDTaskState_<std::allocator<void> > RAPIDTaskState;

typedef boost::shared_ptr< ::abb_robot_msgs::RAPIDTaskState > RAPIDTaskStatePtr;
typedef boost::shared_ptr< ::abb_robot_msgs::RAPIDTaskState const> RAPIDTaskStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::abb_robot_msgs::RAPIDTaskState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::abb_robot_msgs::RAPIDTaskState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::abb_robot_msgs::RAPIDTaskState_<ContainerAllocator1> & lhs, const ::abb_robot_msgs::RAPIDTaskState_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.activated == rhs.activated &&
    lhs.execution_state == rhs.execution_state &&
    lhs.motion_task == rhs.motion_task;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::abb_robot_msgs::RAPIDTaskState_<ContainerAllocator1> & lhs, const ::abb_robot_msgs::RAPIDTaskState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace abb_robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::abb_robot_msgs::RAPIDTaskState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abb_robot_msgs::RAPIDTaskState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_robot_msgs::RAPIDTaskState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_robot_msgs::RAPIDTaskState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_robot_msgs::RAPIDTaskState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_robot_msgs::RAPIDTaskState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::abb_robot_msgs::RAPIDTaskState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "37a1a82a542dcaea43aef8b824e26614";
  }

  static const char* value(const ::abb_robot_msgs::RAPIDTaskState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x37a1a82a542dcaeaULL;
  static const uint64_t static_value2 = 0x43aef8b824e26614ULL;
};

template<class ContainerAllocator>
struct DataType< ::abb_robot_msgs::RAPIDTaskState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abb_robot_msgs/RAPIDTaskState";
  }

  static const char* value(const ::abb_robot_msgs::RAPIDTaskState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::abb_robot_msgs::RAPIDTaskState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#-------------------------------------------------------------------------------\n"
"# Description:\n"
"#   The purpose of this message definition, is to represent a subset of states\n"
"#   of a RAPID task defined in an ABB robot controller system.\n"
"#-------------------------------------------------------------------------------\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Enumerations\n"
"#-------------------------------------------------------------------------------\n"
"# RAPID execution states:\n"
"uint8 EXECUTION_STATE_UNKNOWN       = 1\n"
"uint8 EXECUTION_STATE_READY         = 2\n"
"uint8 EXECUTION_STATE_STOPPED       = 3\n"
"uint8 EXECUTION_STATE_STARTED       = 4\n"
"uint8 EXECUTION_STATE_UNINITIALIZED = 5\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Message fields\n"
"#-------------------------------------------------------------------------------\n"
"# The RAPID task's name.\n"
"string name\n"
"\n"
"# The RAPID task's activated/deactivated status.\n"
"bool activated\n"
"\n"
"# The RAPID task's execution state.\n"
"uint8 execution_state\n"
"\n"
"# The RAPID task is a motion task.\n"
"bool motion_task\n"
;
  }

  static const char* value(const ::abb_robot_msgs::RAPIDTaskState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::abb_robot_msgs::RAPIDTaskState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.activated);
      stream.next(m.execution_state);
      stream.next(m.motion_task);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RAPIDTaskState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::abb_robot_msgs::RAPIDTaskState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::abb_robot_msgs::RAPIDTaskState_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "activated: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activated);
    s << indent << "execution_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.execution_state);
    s << indent << "motion_task: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motion_task);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ABB_ROBOT_MSGS_MESSAGE_RAPIDTASKSTATE_H
