// Generated by gencpp from file abb_robot_msgs/GetRAPIDBoolResponse.msg
// DO NOT EDIT!


#ifndef ABB_ROBOT_MSGS_MESSAGE_GETRAPIDBOOLRESPONSE_H
#define ABB_ROBOT_MSGS_MESSAGE_GETRAPIDBOOLRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace abb_robot_msgs
{
template <class ContainerAllocator>
struct GetRAPIDBoolResponse_
{
  typedef GetRAPIDBoolResponse_<ContainerAllocator> Type;

  GetRAPIDBoolResponse_()
    : value(false)
    , result_code(0)
    , message()  {
    }
  GetRAPIDBoolResponse_(const ContainerAllocator& _alloc)
    : value(false)
    , result_code(0)
    , message(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _value_type;
  _value_type value;

   typedef uint16_t _result_code_type;
  _result_code_type result_code;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_type;
  _message_type message;





  typedef boost::shared_ptr< ::abb_robot_msgs::GetRAPIDBoolResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::abb_robot_msgs::GetRAPIDBoolResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetRAPIDBoolResponse_

typedef ::abb_robot_msgs::GetRAPIDBoolResponse_<std::allocator<void> > GetRAPIDBoolResponse;

typedef boost::shared_ptr< ::abb_robot_msgs::GetRAPIDBoolResponse > GetRAPIDBoolResponsePtr;
typedef boost::shared_ptr< ::abb_robot_msgs::GetRAPIDBoolResponse const> GetRAPIDBoolResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::abb_robot_msgs::GetRAPIDBoolResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::abb_robot_msgs::GetRAPIDBoolResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::abb_robot_msgs::GetRAPIDBoolResponse_<ContainerAllocator1> & lhs, const ::abb_robot_msgs::GetRAPIDBoolResponse_<ContainerAllocator2> & rhs)
{
  return lhs.value == rhs.value &&
    lhs.result_code == rhs.result_code &&
    lhs.message == rhs.message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::abb_robot_msgs::GetRAPIDBoolResponse_<ContainerAllocator1> & lhs, const ::abb_robot_msgs::GetRAPIDBoolResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace abb_robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::abb_robot_msgs::GetRAPIDBoolResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abb_robot_msgs::GetRAPIDBoolResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_robot_msgs::GetRAPIDBoolResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_robot_msgs::GetRAPIDBoolResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_robot_msgs::GetRAPIDBoolResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_robot_msgs::GetRAPIDBoolResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::abb_robot_msgs::GetRAPIDBoolResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1add5488daec3a43971bfb40db471016";
  }

  static const char* value(const ::abb_robot_msgs::GetRAPIDBoolResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1add5488daec3a43ULL;
  static const uint64_t static_value2 = 0x971bfb40db471016ULL;
};

template<class ContainerAllocator>
struct DataType< ::abb_robot_msgs::GetRAPIDBoolResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abb_robot_msgs/GetRAPIDBoolResponse";
  }

  static const char* value(const ::abb_robot_msgs::GetRAPIDBoolResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::abb_robot_msgs::GetRAPIDBoolResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"#-------------------------------------------------------------------------------\n"
"# Service response fields\n"
"#-------------------------------------------------------------------------------\n"
"# Value of the RAPID symbol.\n"
"bool value\n"
"\n"
"# Service success/failure indicator.\n"
"# Refer to 'abb_robot_msgs/ServiceResponses' for defined error codes.\n"
"uint16 result_code\n"
"\n"
"# Status message (empty if service succeeded).\n"
"string message\n"
"\n"
;
  }

  static const char* value(const ::abb_robot_msgs::GetRAPIDBoolResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::abb_robot_msgs::GetRAPIDBoolResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.value);
      stream.next(m.result_code);
      stream.next(m.message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetRAPIDBoolResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::abb_robot_msgs::GetRAPIDBoolResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::abb_robot_msgs::GetRAPIDBoolResponse_<ContainerAllocator>& v)
  {
    s << indent << "value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.value);
    s << indent << "result_code: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.result_code);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ABB_ROBOT_MSGS_MESSAGE_GETRAPIDBOOLRESPONSE_H
