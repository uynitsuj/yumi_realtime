// Generated by gencpp from file abb_robot_msgs/SetFileContentsRequest.msg
// DO NOT EDIT!


#ifndef ABB_ROBOT_MSGS_MESSAGE_SETFILECONTENTSREQUEST_H
#define ABB_ROBOT_MSGS_MESSAGE_SETFILECONTENTSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace abb_robot_msgs
{
template <class ContainerAllocator>
struct SetFileContentsRequest_
{
  typedef SetFileContentsRequest_<ContainerAllocator> Type;

  SetFileContentsRequest_()
    : filename()
    , contents()  {
    }
  SetFileContentsRequest_(const ContainerAllocator& _alloc)
    : filename(_alloc)
    , contents(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _filename_type;
  _filename_type filename;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _contents_type;
  _contents_type contents;





  typedef boost::shared_ptr< ::abb_robot_msgs::SetFileContentsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::abb_robot_msgs::SetFileContentsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetFileContentsRequest_

typedef ::abb_robot_msgs::SetFileContentsRequest_<std::allocator<void> > SetFileContentsRequest;

typedef boost::shared_ptr< ::abb_robot_msgs::SetFileContentsRequest > SetFileContentsRequestPtr;
typedef boost::shared_ptr< ::abb_robot_msgs::SetFileContentsRequest const> SetFileContentsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::abb_robot_msgs::SetFileContentsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::abb_robot_msgs::SetFileContentsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::abb_robot_msgs::SetFileContentsRequest_<ContainerAllocator1> & lhs, const ::abb_robot_msgs::SetFileContentsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.filename == rhs.filename &&
    lhs.contents == rhs.contents;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::abb_robot_msgs::SetFileContentsRequest_<ContainerAllocator1> & lhs, const ::abb_robot_msgs::SetFileContentsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace abb_robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::abb_robot_msgs::SetFileContentsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abb_robot_msgs::SetFileContentsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_robot_msgs::SetFileContentsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_robot_msgs::SetFileContentsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_robot_msgs::SetFileContentsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_robot_msgs::SetFileContentsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::abb_robot_msgs::SetFileContentsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "328533d33dcf184e6cd9fb09e7803883";
  }

  static const char* value(const ::abb_robot_msgs::SetFileContentsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x328533d33dcf184eULL;
  static const uint64_t static_value2 = 0x6cd9fb09e7803883ULL;
};

template<class ContainerAllocator>
struct DataType< ::abb_robot_msgs::SetFileContentsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abb_robot_msgs/SetFileContentsRequest";
  }

  static const char* value(const ::abb_robot_msgs::SetFileContentsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::abb_robot_msgs::SetFileContentsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#-------------------------------------------------------------------------------\n"
"# Description:\n"
"#   The purpose of this service definition, is to define a way to set the\n"
"#   contents of a file in an ABB robot controller system.\n"
"#\n"
"# Note:\n"
"#   The file will be placed in the system's home directory. If the file\n"
"#   doesn't exist, then it will be created, otherwise it will be overwritten.\n"
"#-------------------------------------------------------------------------------\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Service request fields\n"
"#-------------------------------------------------------------------------------\n"
"# Filename (including file extension) for the file in the system.\n"
"string filename\n"
"\n"
"# New contents for the file.\n"
"string contents\n"
"\n"
;
  }

  static const char* value(const ::abb_robot_msgs::SetFileContentsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::abb_robot_msgs::SetFileContentsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.filename);
      stream.next(m.contents);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetFileContentsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::abb_robot_msgs::SetFileContentsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::abb_robot_msgs::SetFileContentsRequest_<ContainerAllocator>& v)
  {
    s << indent << "filename: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.filename);
    s << indent << "contents: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.contents);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ABB_ROBOT_MSGS_MESSAGE_SETFILECONTENTSREQUEST_H
