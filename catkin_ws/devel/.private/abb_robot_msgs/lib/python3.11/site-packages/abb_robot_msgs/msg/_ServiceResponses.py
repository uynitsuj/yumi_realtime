# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from abb_robot_msgs/ServiceResponses.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ServiceResponses(genpy.Message):
  _md5sum = "c541477c2ff72df8851a0d0cd0b0b782"
  _type = "abb_robot_msgs/ServiceResponses"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# result codes are 16 bit unsigned

# Generic OK
string SUCCESS=""
uint16 RC_SUCCESS=1

# Generic failure message
string FAILED="Service failed (e.g. timeout or resource not found, see the DEBUG log for details)"
uint16 RC_FAILED=2

# The server's underlying communication interface is busy
string SERVER_IS_BUSY="Server is busy"
uint16 RC_SERVER_IS_BUSY=1001

# Filename field is empty in service request
string EMPTY_FILENAME="Filename is empty"
uint16 RC_EMPTY_FILENAME=2001

# Signal name field is empty in service request
string EMPTY_SIGNAL_NAME="Signal name is empty"
uint16 RC_EMPTY_SIGNAL_NAME=2002

# RAPID task name field is empty in service request
string EMPTY_RAPID_TASK_NAME="RAPID task name is empty"
uint16 RC_EMPTY_RAPID_TASK_NAME=2003

# RAPID module name field is empty in service request
string EMPTY_RAPID_MODULE_NAME="RAPID module name is empty"
uint16 RC_EMPTY_RAPID_MODULE_NAME=2004

# RAPID symbol name field is empty in service request
string EMPTY_RAPID_SYMBOL_NAME="RAPID symbol name is empty"
uint16 RC_EMPTY_RAPID_SYMBOL_NAME=2005

# Robot controller is not in auto mode
string NOT_IN_AUTO_MODE="Robot controller is not in AUTO mode"
uint16 RC_NOT_IN_AUTO_MODE=3001

# The motors are off
string MOTORS_ARE_OFF="Motors are off"
uint16 RC_MOTORS_ARE_OFF=3002

# The motors are on
string MOTORS_ARE_ON="Motors are on"
uint16 RC_MOTORS_ARE_ON=3003

# RAPID has not been stopped
string RAPID_NOT_STOPPED="RAPID has not been stopped"
uint16 RC_RAPID_NOT_STOPPED=3004

# RAPID is not running
string RAPID_NOT_RUNNING="RAPID is not running"
uint16 RC_RAPID_NOT_RUNNING=3005

# RobotWare StateMachine Add-In runtime state is missing
string SM_RUNTIME_STATES_MISSING="No runtime states received for any StateMachine Add-In instance"
uint16 RC_SM_RUNTIME_STATES_MISSING=4001

# RobotWare StateMachine Add-In-instances do not know RAPID task
string SM_UNKNOWN_RAPID_TASK="RAPID task not found among known StateMachine Add-In instances"
uint16 RC_SM_UNKNOWN_RAPID_TASK=4002

# RobotWare StateMachine Add-In instance has not been initialized
string SM_UNINITIALIZED="StateMachine Add-In instance has not been initialized"
uint16 RC_SM_UNINITIALIZED=4003
"""
  # Pseudo-constants
  SUCCESS = r'""'
  RC_SUCCESS = 1
  FAILED = r'"Service failed (e.g. timeout or resource not found, see the DEBUG log for details)"'
  RC_FAILED = 2
  SERVER_IS_BUSY = r'"Server is busy"'
  RC_SERVER_IS_BUSY = 1001
  EMPTY_FILENAME = r'"Filename is empty"'
  RC_EMPTY_FILENAME = 2001
  EMPTY_SIGNAL_NAME = r'"Signal name is empty"'
  RC_EMPTY_SIGNAL_NAME = 2002
  EMPTY_RAPID_TASK_NAME = r'"RAPID task name is empty"'
  RC_EMPTY_RAPID_TASK_NAME = 2003
  EMPTY_RAPID_MODULE_NAME = r'"RAPID module name is empty"'
  RC_EMPTY_RAPID_MODULE_NAME = 2004
  EMPTY_RAPID_SYMBOL_NAME = r'"RAPID symbol name is empty"'
  RC_EMPTY_RAPID_SYMBOL_NAME = 2005
  NOT_IN_AUTO_MODE = r'"Robot controller is not in AUTO mode"'
  RC_NOT_IN_AUTO_MODE = 3001
  MOTORS_ARE_OFF = r'"Motors are off"'
  RC_MOTORS_ARE_OFF = 3002
  MOTORS_ARE_ON = r'"Motors are on"'
  RC_MOTORS_ARE_ON = 3003
  RAPID_NOT_STOPPED = r'"RAPID has not been stopped"'
  RC_RAPID_NOT_STOPPED = 3004
  RAPID_NOT_RUNNING = r'"RAPID is not running"'
  RC_RAPID_NOT_RUNNING = 3005
  SM_RUNTIME_STATES_MISSING = r'"No runtime states received for any StateMachine Add-In instance"'
  RC_SM_RUNTIME_STATES_MISSING = 4001
  SM_UNKNOWN_RAPID_TASK = r'"RAPID task not found among known StateMachine Add-In instances"'
  RC_SM_UNKNOWN_RAPID_TASK = 4002
  SM_UNINITIALIZED = r'"StateMachine Add-In instance has not been initialized"'
  RC_SM_UNINITIALIZED = 4003

  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ServiceResponses, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
