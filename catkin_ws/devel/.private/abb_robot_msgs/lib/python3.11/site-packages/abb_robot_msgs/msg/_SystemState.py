# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from abb_robot_msgs/SystemState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import abb_robot_msgs.msg
import std_msgs.msg

class SystemState(genpy.Message):
  _md5sum = "46309669ed6ba4863375b03174d00ad7"
  _type = "abb_robot_msgs/SystemState"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """#-------------------------------------------------------------------------------
# Description:
#   The purpose of this message definition, is to represent a subset of states
#   of an ABB robot controller system.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Message fields
#-------------------------------------------------------------------------------
# Metadata.
std_msgs/Header header

# Motors on/off indicator.
bool motors_on

# Auto/manual mode indicator.
bool auto_mode

# RAPID running/stopped indicator.
bool rapid_running

# RAPID task states.
RAPIDTaskState[] rapid_tasks

# Mechanical unit states.
MechanicalUnitState[] mechanical_units

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: abb_robot_msgs/RAPIDTaskState
#-------------------------------------------------------------------------------
# Description:
#   The purpose of this message definition, is to represent a subset of states
#   of a RAPID task defined in an ABB robot controller system.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Enumerations
#-------------------------------------------------------------------------------
# RAPID execution states:
uint8 EXECUTION_STATE_UNKNOWN       = 1
uint8 EXECUTION_STATE_READY         = 2
uint8 EXECUTION_STATE_STOPPED       = 3
uint8 EXECUTION_STATE_STARTED       = 4
uint8 EXECUTION_STATE_UNINITIALIZED = 5

#-------------------------------------------------------------------------------
# Message fields
#-------------------------------------------------------------------------------
# The RAPID task's name.
string name

# The RAPID task's activated/deactivated status.
bool activated

# The RAPID task's execution state.
uint8 execution_state

# The RAPID task is a motion task.
bool motion_task

================================================================================
MSG: abb_robot_msgs/MechanicalUnitState
#-------------------------------------------------------------------------------
# Description:
#   The purpose of this message definition, is to represent a subset of states
#   of a mechanical unit defined in an ABB robot controller system.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Message fields
#-------------------------------------------------------------------------------
# The mechanical unit's name.
string name

# The mechanical unit's activated/deactivated status.
bool activated
"""
  __slots__ = ['header','motors_on','auto_mode','rapid_running','rapid_tasks','mechanical_units']
  _slot_types = ['std_msgs/Header','bool','bool','bool','abb_robot_msgs/RAPIDTaskState[]','abb_robot_msgs/MechanicalUnitState[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,motors_on,auto_mode,rapid_running,rapid_tasks,mechanical_units

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SystemState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.motors_on is None:
        self.motors_on = False
      if self.auto_mode is None:
        self.auto_mode = False
      if self.rapid_running is None:
        self.rapid_running = False
      if self.rapid_tasks is None:
        self.rapid_tasks = []
      if self.mechanical_units is None:
        self.mechanical_units = []
    else:
      self.header = std_msgs.msg.Header()
      self.motors_on = False
      self.auto_mode = False
      self.rapid_running = False
      self.rapid_tasks = []
      self.mechanical_units = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B().pack(_x.motors_on, _x.auto_mode, _x.rapid_running))
      length = len(self.rapid_tasks)
      buff.write(_struct_I.pack(length))
      for val1 in self.rapid_tasks:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_3B().pack(_x.activated, _x.execution_state, _x.motion_task))
      length = len(self.mechanical_units)
      buff.write(_struct_I.pack(length))
      for val1 in self.mechanical_units:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.activated
        buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.rapid_tasks is None:
        self.rapid_tasks = None
      if self.mechanical_units is None:
        self.mechanical_units = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.motors_on, _x.auto_mode, _x.rapid_running,) = _get_struct_3B().unpack(str[start:end])
      self.motors_on = bool(self.motors_on)
      self.auto_mode = bool(self.auto_mode)
      self.rapid_running = bool(self.rapid_running)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rapid_tasks = []
      for i in range(0, length):
        val1 = abb_robot_msgs.msg.RAPIDTaskState()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 3
        (_x.activated, _x.execution_state, _x.motion_task,) = _get_struct_3B().unpack(str[start:end])
        val1.activated = bool(val1.activated)
        val1.motion_task = bool(val1.motion_task)
        self.rapid_tasks.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.mechanical_units = []
      for i in range(0, length):
        val1 = abb_robot_msgs.msg.MechanicalUnitState()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 1
        (val1.activated,) = _get_struct_B().unpack(str[start:end])
        val1.activated = bool(val1.activated)
        self.mechanical_units.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B().pack(_x.motors_on, _x.auto_mode, _x.rapid_running))
      length = len(self.rapid_tasks)
      buff.write(_struct_I.pack(length))
      for val1 in self.rapid_tasks:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_3B().pack(_x.activated, _x.execution_state, _x.motion_task))
      length = len(self.mechanical_units)
      buff.write(_struct_I.pack(length))
      for val1 in self.mechanical_units:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.activated
        buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.rapid_tasks is None:
        self.rapid_tasks = None
      if self.mechanical_units is None:
        self.mechanical_units = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.motors_on, _x.auto_mode, _x.rapid_running,) = _get_struct_3B().unpack(str[start:end])
      self.motors_on = bool(self.motors_on)
      self.auto_mode = bool(self.auto_mode)
      self.rapid_running = bool(self.rapid_running)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rapid_tasks = []
      for i in range(0, length):
        val1 = abb_robot_msgs.msg.RAPIDTaskState()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 3
        (_x.activated, _x.execution_state, _x.motion_task,) = _get_struct_3B().unpack(str[start:end])
        val1.activated = bool(val1.activated)
        val1.motion_task = bool(val1.motion_task)
        self.rapid_tasks.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.mechanical_units = []
      for i in range(0, length):
        val1 = abb_robot_msgs.msg.MechanicalUnitState()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 1
        (val1.activated,) = _get_struct_B().unpack(str[start:end])
        val1.activated = bool(val1.activated)
        self.mechanical_units.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
