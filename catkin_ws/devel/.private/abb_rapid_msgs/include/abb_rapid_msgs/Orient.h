// Generated by gencpp from file abb_rapid_msgs/Orient.msg
// DO NOT EDIT!


#ifndef ABB_RAPID_MSGS_MESSAGE_ORIENT_H
#define ABB_RAPID_MSGS_MESSAGE_ORIENT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace abb_rapid_msgs
{
template <class ContainerAllocator>
struct Orient_
{
  typedef Orient_<ContainerAllocator> Type;

  Orient_()
    : q1(0.0)
    , q2(0.0)
    , q3(0.0)
    , q4(0.0)  {
    }
  Orient_(const ContainerAllocator& _alloc)
    : q1(0.0)
    , q2(0.0)
    , q3(0.0)
    , q4(0.0)  {
  (void)_alloc;
    }



   typedef float _q1_type;
  _q1_type q1;

   typedef float _q2_type;
  _q2_type q2;

   typedef float _q3_type;
  _q3_type q3;

   typedef float _q4_type;
  _q4_type q4;





  typedef boost::shared_ptr< ::abb_rapid_msgs::Orient_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::abb_rapid_msgs::Orient_<ContainerAllocator> const> ConstPtr;

}; // struct Orient_

typedef ::abb_rapid_msgs::Orient_<std::allocator<void> > Orient;

typedef boost::shared_ptr< ::abb_rapid_msgs::Orient > OrientPtr;
typedef boost::shared_ptr< ::abb_rapid_msgs::Orient const> OrientConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::abb_rapid_msgs::Orient_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::abb_rapid_msgs::Orient_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::abb_rapid_msgs::Orient_<ContainerAllocator1> & lhs, const ::abb_rapid_msgs::Orient_<ContainerAllocator2> & rhs)
{
  return lhs.q1 == rhs.q1 &&
    lhs.q2 == rhs.q2 &&
    lhs.q3 == rhs.q3 &&
    lhs.q4 == rhs.q4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::abb_rapid_msgs::Orient_<ContainerAllocator1> & lhs, const ::abb_rapid_msgs::Orient_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace abb_rapid_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::abb_rapid_msgs::Orient_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abb_rapid_msgs::Orient_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_rapid_msgs::Orient_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_rapid_msgs::Orient_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_rapid_msgs::Orient_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_rapid_msgs::Orient_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::abb_rapid_msgs::Orient_<ContainerAllocator> >
{
  static const char* value()
  {
    return "69cec82442f682ecfe3c0ec1306ced82";
  }

  static const char* value(const ::abb_rapid_msgs::Orient_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x69cec82442f682ecULL;
  static const uint64_t static_value2 = 0xfe3c0ec1306ced82ULL;
};

template<class ContainerAllocator>
struct DataType< ::abb_rapid_msgs::Orient_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abb_rapid_msgs/Orient";
  }

  static const char* value(const ::abb_rapid_msgs::Orient_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::abb_rapid_msgs::Orient_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#-------------------------------------------------------------------------------\n"
"# Description:\n"
"#   The purpose of this message definition, is to represent the\n"
"#   RAPID data type \"orient\" (orientation).\n"
"#\n"
"# Note:\n"
"#   Please see the \"Technical reference manual - RAPID Instructions,\n"
"#   Functions and Data types\" for more details.\n"
"#-------------------------------------------------------------------------------\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Message fields\n"
"#-------------------------------------------------------------------------------\n"
"# Quaternion 1-4.\n"
"float32 q1\n"
"float32 q2\n"
"float32 q3\n"
"float32 q4\n"
;
  }

  static const char* value(const ::abb_rapid_msgs::Orient_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::abb_rapid_msgs::Orient_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.q1);
      stream.next(m.q2);
      stream.next(m.q3);
      stream.next(m.q4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Orient_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::abb_rapid_msgs::Orient_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::abb_rapid_msgs::Orient_<ContainerAllocator>& v)
  {
    s << indent << "q1: ";
    Printer<float>::stream(s, indent + "  ", v.q1);
    s << indent << "q2: ";
    Printer<float>::stream(s, indent + "  ", v.q2);
    s << indent << "q3: ";
    Printer<float>::stream(s, indent + "  ", v.q3);
    s << indent << "q4: ";
    Printer<float>::stream(s, indent + "  ", v.q4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ABB_RAPID_MSGS_MESSAGE_ORIENT_H
