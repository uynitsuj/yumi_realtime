// Generated by gencpp from file abb_rapid_msgs/ToolData.msg
// DO NOT EDIT!


#ifndef ABB_RAPID_MSGS_MESSAGE_TOOLDATA_H
#define ABB_RAPID_MSGS_MESSAGE_TOOLDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <abb_rapid_msgs/Pose.h>
#include <abb_rapid_msgs/LoadData.h>

namespace abb_rapid_msgs
{
template <class ContainerAllocator>
struct ToolData_
{
  typedef ToolData_<ContainerAllocator> Type;

  ToolData_()
    : robhold(false)
    , tframe()
    , tload()  {
    }
  ToolData_(const ContainerAllocator& _alloc)
    : robhold(false)
    , tframe(_alloc)
    , tload(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _robhold_type;
  _robhold_type robhold;

   typedef  ::abb_rapid_msgs::Pose_<ContainerAllocator>  _tframe_type;
  _tframe_type tframe;

   typedef  ::abb_rapid_msgs::LoadData_<ContainerAllocator>  _tload_type;
  _tload_type tload;





  typedef boost::shared_ptr< ::abb_rapid_msgs::ToolData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::abb_rapid_msgs::ToolData_<ContainerAllocator> const> ConstPtr;

}; // struct ToolData_

typedef ::abb_rapid_msgs::ToolData_<std::allocator<void> > ToolData;

typedef boost::shared_ptr< ::abb_rapid_msgs::ToolData > ToolDataPtr;
typedef boost::shared_ptr< ::abb_rapid_msgs::ToolData const> ToolDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::abb_rapid_msgs::ToolData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::abb_rapid_msgs::ToolData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::abb_rapid_msgs::ToolData_<ContainerAllocator1> & lhs, const ::abb_rapid_msgs::ToolData_<ContainerAllocator2> & rhs)
{
  return lhs.robhold == rhs.robhold &&
    lhs.tframe == rhs.tframe &&
    lhs.tload == rhs.tload;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::abb_rapid_msgs::ToolData_<ContainerAllocator1> & lhs, const ::abb_rapid_msgs::ToolData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace abb_rapid_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::abb_rapid_msgs::ToolData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abb_rapid_msgs::ToolData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_rapid_msgs::ToolData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_rapid_msgs::ToolData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_rapid_msgs::ToolData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_rapid_msgs::ToolData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::abb_rapid_msgs::ToolData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2d526e4dd17e28147b27f746cf88c5b6";
  }

  static const char* value(const ::abb_rapid_msgs::ToolData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2d526e4dd17e2814ULL;
  static const uint64_t static_value2 = 0x7b27f746cf88c5b6ULL;
};

template<class ContainerAllocator>
struct DataType< ::abb_rapid_msgs::ToolData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abb_rapid_msgs/ToolData";
  }

  static const char* value(const ::abb_rapid_msgs::ToolData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::abb_rapid_msgs::ToolData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#-------------------------------------------------------------------------------\n"
"# Description:\n"
"#   The purpose of this message definition, is to represent the\n"
"#   RAPID data type \"tooldata\" (tool data).\n"
"#\n"
"# Note:\n"
"#   Please see the \"Technical reference manual - RAPID Instructions,\n"
"#   Functions and Data types\" for more details.\n"
"#-------------------------------------------------------------------------------\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Message fields\n"
"#-------------------------------------------------------------------------------\n"
"# Defines whether or not the robot is holding the tool:\n"
"# - TRUE: The robot is holding the tool.\n"
"# - FALSE: The robot is not holding the tool, that is, a stationary tool.\n"
"bool robhold\n"
"\n"
"# The tool coordinate system, that is:\n"
"# - The position of the TCP (x, y and z) in mm,\n"
"#   expressed in the wrist coordinate system (tool0).\n"
"# - The orientation of the tool coordinate system,\n"
"#   expressed in the wrist coordinate system.\n"
"Pose tframe\n"
"\n"
"# The load of the tool (if robot held tool).\n"
"# The load of the gripper holding the work object (if stationary tool).\n"
"LoadData tload\n"
"\n"
"================================================================================\n"
"MSG: abb_rapid_msgs/Pose\n"
"#-------------------------------------------------------------------------------\n"
"# Description:\n"
"#   The purpose of this message definition, is to represent the\n"
"#   RAPID data type \"pose\" (coordinate transformations).\n"
"#\n"
"# Note:\n"
"#   Please see the \"Technical reference manual - RAPID Instructions,\n"
"#   Functions and Data types\" for more details.\n"
"#-------------------------------------------------------------------------------\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Message fields\n"
"#-------------------------------------------------------------------------------\n"
"# The displacement in position (x, y, and z) of the coordinate system.\n"
"Pos trans\n"
"\n"
"# The rotation of the coordinate system.\n"
"Orient rot\n"
"\n"
"================================================================================\n"
"MSG: abb_rapid_msgs/Pos\n"
"#-------------------------------------------------------------------------------\n"
"# Description:\n"
"#   The purpose of this message definition, is to represent the\n"
"#   RAPID data type \"pos\" (positions (only X, Y and Z)).\n"
"#\n"
"# Note:\n"
"#   Please see the \"Technical reference manual - RAPID Instructions,\n"
"#   Functions and Data types\" for more details.\n"
"#-------------------------------------------------------------------------------\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Message fields\n"
"#-------------------------------------------------------------------------------\n"
"# The x-, y- and z-value of the position.\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"\n"
"================================================================================\n"
"MSG: abb_rapid_msgs/Orient\n"
"#-------------------------------------------------------------------------------\n"
"# Description:\n"
"#   The purpose of this message definition, is to represent the\n"
"#   RAPID data type \"orient\" (orientation).\n"
"#\n"
"# Note:\n"
"#   Please see the \"Technical reference manual - RAPID Instructions,\n"
"#   Functions and Data types\" for more details.\n"
"#-------------------------------------------------------------------------------\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Message fields\n"
"#-------------------------------------------------------------------------------\n"
"# Quaternion 1-4.\n"
"float32 q1\n"
"float32 q2\n"
"float32 q3\n"
"float32 q4\n"
"\n"
"================================================================================\n"
"MSG: abb_rapid_msgs/LoadData\n"
"#-------------------------------------------------------------------------------\n"
"# Description:\n"
"#   The purpose of this message definition, is to represent the\n"
"#   RAPID data type \"loaddata\" (load data).\n"
"#\n"
"# Note:\n"
"#   Please see the \"Technical reference manual - RAPID Instructions,\n"
"#   Functions and Data types\" for more details.\n"
"#-------------------------------------------------------------------------------\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Message fields\n"
"#-------------------------------------------------------------------------------\n"
"# The mass (weight) of the load in kg.\n"
"float32 mass\n"
"\n"
"# The center of gravity of the payload, expressed in mm,\n"
"# in the tool coordinate system if the robot is holding the tool.\n"
"#\n"
"# If a stationary tool is used then the center of gravity for the payload\n"
"# held by the gripper is expressed in the object frame of the work object\n"
"# coordinate system moved by the robot.\n"
"Pos cog\n"
"\n"
"# The orientation of the axes of moment.\n"
"#\n"
"# These are the principal axes of the payload\n"
"# moment of inertia with origin in cog.\n"
"#\n"
"# If the robot is holding the tool, the axes of moment\n"
"# are expressed in the tool coordinate system.\n"
"Orient aom\n"
"\n"
"# The moment of inertia of the load around the x-, y- and z-axis,\n"
"# expressed in kgm^2.\n"
"float32 ix\n"
"float32 iy\n"
"float32 iz\n"
;
  }

  static const char* value(const ::abb_rapid_msgs::ToolData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::abb_rapid_msgs::ToolData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robhold);
      stream.next(m.tframe);
      stream.next(m.tload);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ToolData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::abb_rapid_msgs::ToolData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::abb_rapid_msgs::ToolData_<ContainerAllocator>& v)
  {
    s << indent << "robhold: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.robhold);
    s << indent << "tframe: ";
    s << std::endl;
    Printer< ::abb_rapid_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.tframe);
    s << indent << "tload: ";
    s << std::endl;
    Printer< ::abb_rapid_msgs::LoadData_<ContainerAllocator> >::stream(s, indent + "  ", v.tload);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ABB_RAPID_MSGS_MESSAGE_TOOLDATA_H
