// Generated by gencpp from file abb_rapid_msgs/WObjData.msg
// DO NOT EDIT!


#ifndef ABB_RAPID_MSGS_MESSAGE_WOBJDATA_H
#define ABB_RAPID_MSGS_MESSAGE_WOBJDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <abb_rapid_msgs/Pose.h>
#include <abb_rapid_msgs/Pose.h>

namespace abb_rapid_msgs
{
template <class ContainerAllocator>
struct WObjData_
{
  typedef WObjData_<ContainerAllocator> Type;

  WObjData_()
    : robhold(false)
    , ufprog(false)
    , ufmec()
    , uframe()
    , oframe()  {
    }
  WObjData_(const ContainerAllocator& _alloc)
    : robhold(false)
    , ufprog(false)
    , ufmec(_alloc)
    , uframe(_alloc)
    , oframe(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _robhold_type;
  _robhold_type robhold;

   typedef uint8_t _ufprog_type;
  _ufprog_type ufprog;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _ufmec_type;
  _ufmec_type ufmec;

   typedef  ::abb_rapid_msgs::Pose_<ContainerAllocator>  _uframe_type;
  _uframe_type uframe;

   typedef  ::abb_rapid_msgs::Pose_<ContainerAllocator>  _oframe_type;
  _oframe_type oframe;





  typedef boost::shared_ptr< ::abb_rapid_msgs::WObjData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::abb_rapid_msgs::WObjData_<ContainerAllocator> const> ConstPtr;

}; // struct WObjData_

typedef ::abb_rapid_msgs::WObjData_<std::allocator<void> > WObjData;

typedef boost::shared_ptr< ::abb_rapid_msgs::WObjData > WObjDataPtr;
typedef boost::shared_ptr< ::abb_rapid_msgs::WObjData const> WObjDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::abb_rapid_msgs::WObjData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::abb_rapid_msgs::WObjData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::abb_rapid_msgs::WObjData_<ContainerAllocator1> & lhs, const ::abb_rapid_msgs::WObjData_<ContainerAllocator2> & rhs)
{
  return lhs.robhold == rhs.robhold &&
    lhs.ufprog == rhs.ufprog &&
    lhs.ufmec == rhs.ufmec &&
    lhs.uframe == rhs.uframe &&
    lhs.oframe == rhs.oframe;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::abb_rapid_msgs::WObjData_<ContainerAllocator1> & lhs, const ::abb_rapid_msgs::WObjData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace abb_rapid_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::abb_rapid_msgs::WObjData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abb_rapid_msgs::WObjData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_rapid_msgs::WObjData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_rapid_msgs::WObjData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_rapid_msgs::WObjData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_rapid_msgs::WObjData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::abb_rapid_msgs::WObjData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eb6fd21e8b900ca32b7fe6c07697ac07";
  }

  static const char* value(const ::abb_rapid_msgs::WObjData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeb6fd21e8b900ca3ULL;
  static const uint64_t static_value2 = 0x2b7fe6c07697ac07ULL;
};

template<class ContainerAllocator>
struct DataType< ::abb_rapid_msgs::WObjData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abb_rapid_msgs/WObjData";
  }

  static const char* value(const ::abb_rapid_msgs::WObjData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::abb_rapid_msgs::WObjData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#-------------------------------------------------------------------------------\n"
"# Description:\n"
"#   The purpose of this message definition, is to represent the\n"
"#   RAPID data type \"wobjdata\" (work object data).\n"
"#\n"
"# Note:\n"
"#   Please see the \"Technical reference manual - RAPID Instructions,\n"
"#   Functions and Data types\" for more details.\n"
"#-------------------------------------------------------------------------------\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Message fields\n"
"#-------------------------------------------------------------------------------\n"
"# Defines whether or not the robot in the actual\n"
"# program task is holding the work object:\n"
"# - TRUE: The robot is holding the work object,\n"
"#         i.e. using a stationary tool.\n"
"# - FALSE: The robot is not holding the work object,\n"
"#          i.e. the robot is holding the tool.\n"
"bool robhold\n"
"\n"
"# Defines whether or not a fixed user coordinate system is used:\n"
"# - TRUE: Fixed user coordinate system.\n"
"# - FALSE: Movable user coordinate system,\n"
"#          i.e. coordinated external axes are used.\n"
"#          Also to be used in a MultiMove system in\n"
"#          semicoordinated or synchronized coordinated mode.\n"
"bool ufprog\n"
"\n"
"# The mechanical unit with which the robot movements are coordinated.\n"
"#\n"
"# Only specified in the case of movable user\n"
"# coordinate systems (ufprog is FALSE).\n"
"string ufmec\n"
"\n"
"# The user coordinate system, i.e. the position\n"
"# of the current work surface or fixture.\n"
"Pose uframe\n"
"\n"
"# The object coordinate system, i.e. the position\n"
"# of the current work object.\n"
"Pose oframe\n"
"\n"
"================================================================================\n"
"MSG: abb_rapid_msgs/Pose\n"
"#-------------------------------------------------------------------------------\n"
"# Description:\n"
"#   The purpose of this message definition, is to represent the\n"
"#   RAPID data type \"pose\" (coordinate transformations).\n"
"#\n"
"# Note:\n"
"#   Please see the \"Technical reference manual - RAPID Instructions,\n"
"#   Functions and Data types\" for more details.\n"
"#-------------------------------------------------------------------------------\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Message fields\n"
"#-------------------------------------------------------------------------------\n"
"# The displacement in position (x, y, and z) of the coordinate system.\n"
"Pos trans\n"
"\n"
"# The rotation of the coordinate system.\n"
"Orient rot\n"
"\n"
"================================================================================\n"
"MSG: abb_rapid_msgs/Pos\n"
"#-------------------------------------------------------------------------------\n"
"# Description:\n"
"#   The purpose of this message definition, is to represent the\n"
"#   RAPID data type \"pos\" (positions (only X, Y and Z)).\n"
"#\n"
"# Note:\n"
"#   Please see the \"Technical reference manual - RAPID Instructions,\n"
"#   Functions and Data types\" for more details.\n"
"#-------------------------------------------------------------------------------\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Message fields\n"
"#-------------------------------------------------------------------------------\n"
"# The x-, y- and z-value of the position.\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"\n"
"================================================================================\n"
"MSG: abb_rapid_msgs/Orient\n"
"#-------------------------------------------------------------------------------\n"
"# Description:\n"
"#   The purpose of this message definition, is to represent the\n"
"#   RAPID data type \"orient\" (orientation).\n"
"#\n"
"# Note:\n"
"#   Please see the \"Technical reference manual - RAPID Instructions,\n"
"#   Functions and Data types\" for more details.\n"
"#-------------------------------------------------------------------------------\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Message fields\n"
"#-------------------------------------------------------------------------------\n"
"# Quaternion 1-4.\n"
"float32 q1\n"
"float32 q2\n"
"float32 q3\n"
"float32 q4\n"
;
  }

  static const char* value(const ::abb_rapid_msgs::WObjData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::abb_rapid_msgs::WObjData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robhold);
      stream.next(m.ufprog);
      stream.next(m.ufmec);
      stream.next(m.uframe);
      stream.next(m.oframe);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WObjData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::abb_rapid_msgs::WObjData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::abb_rapid_msgs::WObjData_<ContainerAllocator>& v)
  {
    s << indent << "robhold: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.robhold);
    s << indent << "ufprog: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ufprog);
    s << indent << "ufmec: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.ufmec);
    s << indent << "uframe: ";
    s << std::endl;
    Printer< ::abb_rapid_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.uframe);
    s << indent << "oframe: ";
    s << std::endl;
    Printer< ::abb_rapid_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.oframe);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ABB_RAPID_MSGS_MESSAGE_WOBJDATA_H
