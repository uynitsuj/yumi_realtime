// Generated by gencpp from file abb_rapid_msgs/Pose.msg
// DO NOT EDIT!


#ifndef ABB_RAPID_MSGS_MESSAGE_POSE_H
#define ABB_RAPID_MSGS_MESSAGE_POSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <abb_rapid_msgs/Pos.h>
#include <abb_rapid_msgs/Orient.h>

namespace abb_rapid_msgs
{
template <class ContainerAllocator>
struct Pose_
{
  typedef Pose_<ContainerAllocator> Type;

  Pose_()
    : trans()
    , rot()  {
    }
  Pose_(const ContainerAllocator& _alloc)
    : trans(_alloc)
    , rot(_alloc)  {
  (void)_alloc;
    }



   typedef  ::abb_rapid_msgs::Pos_<ContainerAllocator>  _trans_type;
  _trans_type trans;

   typedef  ::abb_rapid_msgs::Orient_<ContainerAllocator>  _rot_type;
  _rot_type rot;





  typedef boost::shared_ptr< ::abb_rapid_msgs::Pose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::abb_rapid_msgs::Pose_<ContainerAllocator> const> ConstPtr;

}; // struct Pose_

typedef ::abb_rapid_msgs::Pose_<std::allocator<void> > Pose;

typedef boost::shared_ptr< ::abb_rapid_msgs::Pose > PosePtr;
typedef boost::shared_ptr< ::abb_rapid_msgs::Pose const> PoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::abb_rapid_msgs::Pose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::abb_rapid_msgs::Pose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::abb_rapid_msgs::Pose_<ContainerAllocator1> & lhs, const ::abb_rapid_msgs::Pose_<ContainerAllocator2> & rhs)
{
  return lhs.trans == rhs.trans &&
    lhs.rot == rhs.rot;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::abb_rapid_msgs::Pose_<ContainerAllocator1> & lhs, const ::abb_rapid_msgs::Pose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace abb_rapid_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::abb_rapid_msgs::Pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abb_rapid_msgs::Pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_rapid_msgs::Pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_rapid_msgs::Pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_rapid_msgs::Pose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_rapid_msgs::Pose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::abb_rapid_msgs::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "94c76c2f70e3c86d018090698fefbfdc";
  }

  static const char* value(const ::abb_rapid_msgs::Pose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x94c76c2f70e3c86dULL;
  static const uint64_t static_value2 = 0x018090698fefbfdcULL;
};

template<class ContainerAllocator>
struct DataType< ::abb_rapid_msgs::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abb_rapid_msgs/Pose";
  }

  static const char* value(const ::abb_rapid_msgs::Pose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::abb_rapid_msgs::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#-------------------------------------------------------------------------------\n"
"# Description:\n"
"#   The purpose of this message definition, is to represent the\n"
"#   RAPID data type \"pose\" (coordinate transformations).\n"
"#\n"
"# Note:\n"
"#   Please see the \"Technical reference manual - RAPID Instructions,\n"
"#   Functions and Data types\" for more details.\n"
"#-------------------------------------------------------------------------------\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Message fields\n"
"#-------------------------------------------------------------------------------\n"
"# The displacement in position (x, y, and z) of the coordinate system.\n"
"Pos trans\n"
"\n"
"# The rotation of the coordinate system.\n"
"Orient rot\n"
"\n"
"================================================================================\n"
"MSG: abb_rapid_msgs/Pos\n"
"#-------------------------------------------------------------------------------\n"
"# Description:\n"
"#   The purpose of this message definition, is to represent the\n"
"#   RAPID data type \"pos\" (positions (only X, Y and Z)).\n"
"#\n"
"# Note:\n"
"#   Please see the \"Technical reference manual - RAPID Instructions,\n"
"#   Functions and Data types\" for more details.\n"
"#-------------------------------------------------------------------------------\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Message fields\n"
"#-------------------------------------------------------------------------------\n"
"# The x-, y- and z-value of the position.\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"\n"
"================================================================================\n"
"MSG: abb_rapid_msgs/Orient\n"
"#-------------------------------------------------------------------------------\n"
"# Description:\n"
"#   The purpose of this message definition, is to represent the\n"
"#   RAPID data type \"orient\" (orientation).\n"
"#\n"
"# Note:\n"
"#   Please see the \"Technical reference manual - RAPID Instructions,\n"
"#   Functions and Data types\" for more details.\n"
"#-------------------------------------------------------------------------------\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Message fields\n"
"#-------------------------------------------------------------------------------\n"
"# Quaternion 1-4.\n"
"float32 q1\n"
"float32 q2\n"
"float32 q3\n"
"float32 q4\n"
;
  }

  static const char* value(const ::abb_rapid_msgs::Pose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::abb_rapid_msgs::Pose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.trans);
      stream.next(m.rot);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Pose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::abb_rapid_msgs::Pose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::abb_rapid_msgs::Pose_<ContainerAllocator>& v)
  {
    s << indent << "trans: ";
    s << std::endl;
    Printer< ::abb_rapid_msgs::Pos_<ContainerAllocator> >::stream(s, indent + "  ", v.trans);
    s << indent << "rot: ";
    s << std::endl;
    Printer< ::abb_rapid_msgs::Orient_<ContainerAllocator> >::stream(s, indent + "  ", v.rot);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ABB_RAPID_MSGS_MESSAGE_POSE_H
