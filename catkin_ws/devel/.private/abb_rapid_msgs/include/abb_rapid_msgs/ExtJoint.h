// Generated by gencpp from file abb_rapid_msgs/ExtJoint.msg
// DO NOT EDIT!


#ifndef ABB_RAPID_MSGS_MESSAGE_EXTJOINT_H
#define ABB_RAPID_MSGS_MESSAGE_EXTJOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace abb_rapid_msgs
{
template <class ContainerAllocator>
struct ExtJoint_
{
  typedef ExtJoint_<ContainerAllocator> Type;

  ExtJoint_()
    : eax_a(0.0)
    , eax_b(0.0)
    , eax_c(0.0)
    , eax_d(0.0)
    , eax_e(0.0)
    , eax_f(0.0)  {
    }
  ExtJoint_(const ContainerAllocator& _alloc)
    : eax_a(0.0)
    , eax_b(0.0)
    , eax_c(0.0)
    , eax_d(0.0)
    , eax_e(0.0)
    , eax_f(0.0)  {
  (void)_alloc;
    }



   typedef float _eax_a_type;
  _eax_a_type eax_a;

   typedef float _eax_b_type;
  _eax_b_type eax_b;

   typedef float _eax_c_type;
  _eax_c_type eax_c;

   typedef float _eax_d_type;
  _eax_d_type eax_d;

   typedef float _eax_e_type;
  _eax_e_type eax_e;

   typedef float _eax_f_type;
  _eax_f_type eax_f;





  typedef boost::shared_ptr< ::abb_rapid_msgs::ExtJoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::abb_rapid_msgs::ExtJoint_<ContainerAllocator> const> ConstPtr;

}; // struct ExtJoint_

typedef ::abb_rapid_msgs::ExtJoint_<std::allocator<void> > ExtJoint;

typedef boost::shared_ptr< ::abb_rapid_msgs::ExtJoint > ExtJointPtr;
typedef boost::shared_ptr< ::abb_rapid_msgs::ExtJoint const> ExtJointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::abb_rapid_msgs::ExtJoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::abb_rapid_msgs::ExtJoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::abb_rapid_msgs::ExtJoint_<ContainerAllocator1> & lhs, const ::abb_rapid_msgs::ExtJoint_<ContainerAllocator2> & rhs)
{
  return lhs.eax_a == rhs.eax_a &&
    lhs.eax_b == rhs.eax_b &&
    lhs.eax_c == rhs.eax_c &&
    lhs.eax_d == rhs.eax_d &&
    lhs.eax_e == rhs.eax_e &&
    lhs.eax_f == rhs.eax_f;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::abb_rapid_msgs::ExtJoint_<ContainerAllocator1> & lhs, const ::abb_rapid_msgs::ExtJoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace abb_rapid_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::abb_rapid_msgs::ExtJoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abb_rapid_msgs::ExtJoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_rapid_msgs::ExtJoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_rapid_msgs::ExtJoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_rapid_msgs::ExtJoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_rapid_msgs::ExtJoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::abb_rapid_msgs::ExtJoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f8550d9e82bcfae84c73de38fde07b03";
  }

  static const char* value(const ::abb_rapid_msgs::ExtJoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf8550d9e82bcfae8ULL;
  static const uint64_t static_value2 = 0x4c73de38fde07b03ULL;
};

template<class ContainerAllocator>
struct DataType< ::abb_rapid_msgs::ExtJoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abb_rapid_msgs/ExtJoint";
  }

  static const char* value(const ::abb_rapid_msgs::ExtJoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::abb_rapid_msgs::ExtJoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#-------------------------------------------------------------------------------\n"
"# Description:\n"
"#   The purpose of this message definition, is to represent the\n"
"#   RAPID data type \"extjoint\" (position of external joints).\n"
"#\n"
"# Note:\n"
"#   Please see the \"Technical reference manual - RAPID Instructions,\n"
"#   Functions and Data types\" for more details.\n"
"#-------------------------------------------------------------------------------\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Message fields\n"
"#-------------------------------------------------------------------------------\n"
"# The position of the external logical axis \"a\"-\"f\",\n"
"# expressed in degrees or mm (depending on the type of axis).\n"
"float32 eax_a\n"
"float32 eax_b\n"
"float32 eax_c\n"
"float32 eax_d\n"
"float32 eax_e\n"
"float32 eax_f\n"
;
  }

  static const char* value(const ::abb_rapid_msgs::ExtJoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::abb_rapid_msgs::ExtJoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.eax_a);
      stream.next(m.eax_b);
      stream.next(m.eax_c);
      stream.next(m.eax_d);
      stream.next(m.eax_e);
      stream.next(m.eax_f);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExtJoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::abb_rapid_msgs::ExtJoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::abb_rapid_msgs::ExtJoint_<ContainerAllocator>& v)
  {
    s << indent << "eax_a: ";
    Printer<float>::stream(s, indent + "  ", v.eax_a);
    s << indent << "eax_b: ";
    Printer<float>::stream(s, indent + "  ", v.eax_b);
    s << indent << "eax_c: ";
    Printer<float>::stream(s, indent + "  ", v.eax_c);
    s << indent << "eax_d: ";
    Printer<float>::stream(s, indent + "  ", v.eax_d);
    s << indent << "eax_e: ";
    Printer<float>::stream(s, indent + "  ", v.eax_e);
    s << indent << "eax_f: ";
    Printer<float>::stream(s, indent + "  ", v.eax_f);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ABB_RAPID_MSGS_MESSAGE_EXTJOINT_H
