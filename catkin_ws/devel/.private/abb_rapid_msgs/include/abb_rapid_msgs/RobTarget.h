// Generated by gencpp from file abb_rapid_msgs/RobTarget.msg
// DO NOT EDIT!


#ifndef ABB_RAPID_MSGS_MESSAGE_ROBTARGET_H
#define ABB_RAPID_MSGS_MESSAGE_ROBTARGET_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <abb_rapid_msgs/Pos.h>
#include <abb_rapid_msgs/Orient.h>
#include <abb_rapid_msgs/ConfData.h>
#include <abb_rapid_msgs/ExtJoint.h>

namespace abb_rapid_msgs
{
template <class ContainerAllocator>
struct RobTarget_
{
  typedef RobTarget_<ContainerAllocator> Type;

  RobTarget_()
    : trans()
    , rot()
    , robconf()
    , extax()  {
    }
  RobTarget_(const ContainerAllocator& _alloc)
    : trans(_alloc)
    , rot(_alloc)
    , robconf(_alloc)
    , extax(_alloc)  {
  (void)_alloc;
    }



   typedef  ::abb_rapid_msgs::Pos_<ContainerAllocator>  _trans_type;
  _trans_type trans;

   typedef  ::abb_rapid_msgs::Orient_<ContainerAllocator>  _rot_type;
  _rot_type rot;

   typedef  ::abb_rapid_msgs::ConfData_<ContainerAllocator>  _robconf_type;
  _robconf_type robconf;

   typedef  ::abb_rapid_msgs::ExtJoint_<ContainerAllocator>  _extax_type;
  _extax_type extax;





  typedef boost::shared_ptr< ::abb_rapid_msgs::RobTarget_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::abb_rapid_msgs::RobTarget_<ContainerAllocator> const> ConstPtr;

}; // struct RobTarget_

typedef ::abb_rapid_msgs::RobTarget_<std::allocator<void> > RobTarget;

typedef boost::shared_ptr< ::abb_rapid_msgs::RobTarget > RobTargetPtr;
typedef boost::shared_ptr< ::abb_rapid_msgs::RobTarget const> RobTargetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::abb_rapid_msgs::RobTarget_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::abb_rapid_msgs::RobTarget_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::abb_rapid_msgs::RobTarget_<ContainerAllocator1> & lhs, const ::abb_rapid_msgs::RobTarget_<ContainerAllocator2> & rhs)
{
  return lhs.trans == rhs.trans &&
    lhs.rot == rhs.rot &&
    lhs.robconf == rhs.robconf &&
    lhs.extax == rhs.extax;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::abb_rapid_msgs::RobTarget_<ContainerAllocator1> & lhs, const ::abb_rapid_msgs::RobTarget_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace abb_rapid_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::abb_rapid_msgs::RobTarget_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abb_rapid_msgs::RobTarget_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_rapid_msgs::RobTarget_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_rapid_msgs::RobTarget_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_rapid_msgs::RobTarget_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_rapid_msgs::RobTarget_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::abb_rapid_msgs::RobTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "31d5c046c0fae9eadd8133382f15db0a";
  }

  static const char* value(const ::abb_rapid_msgs::RobTarget_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x31d5c046c0fae9eaULL;
  static const uint64_t static_value2 = 0xdd8133382f15db0aULL;
};

template<class ContainerAllocator>
struct DataType< ::abb_rapid_msgs::RobTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abb_rapid_msgs/RobTarget";
  }

  static const char* value(const ::abb_rapid_msgs::RobTarget_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::abb_rapid_msgs::RobTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#-------------------------------------------------------------------------------\n"
"# Description:\n"
"#   The purpose of this message definition, is to represent the\n"
"#   RAPID data type \"robtarget\" (position data).\n"
"#\n"
"# Note:\n"
"#   Please see the \"Technical reference manual - RAPID Instructions,\n"
"#   Functions and Data types\" for more details.\n"
"#-------------------------------------------------------------------------------\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Message fields\n"
"#-------------------------------------------------------------------------------\n"
"# The position (x, y, and z) of the tool center point expressed in mm.\n"
"#\n"
"# The position is specified in relation to the current object coordinate system,\n"
"# including program displacement.\n"
"#\n"
"# If no work object is specified then this is the world coordinate system.\n"
"Pos trans\n"
"\n"
"# The orientation of the tool, expressed in the\n"
"# form of a quaternion (q1, q2, q3, and q4).\n"
"#\n"
"# The orientation is specified in relation to the current\n"
"# object coordinate system including program displacement.\n"
"#\n"
"# If no work object is specified then this is the world coordinate system.\n"
"Orient rot\n"
"\n"
"# The axis configuration of the robot (cf1, cf4, cf6, and cfx).\n"
"#\n"
"# This is defined in the form of the current quarter\n"
"# revolution of axis 1, axis 4, and axis 6.\n"
"#\n"
"# The first positive quarter revolution 0 to 90 degrees is defined as 0.\n"
"#\n"
"# The meaning of the component cfx is dependent on robot type.\n"
"ConfData robconf\n"
"\n"
"# The position of the additional axes.\n"
"ExtJoint extax\n"
"\n"
"================================================================================\n"
"MSG: abb_rapid_msgs/Pos\n"
"#-------------------------------------------------------------------------------\n"
"# Description:\n"
"#   The purpose of this message definition, is to represent the\n"
"#   RAPID data type \"pos\" (positions (only X, Y and Z)).\n"
"#\n"
"# Note:\n"
"#   Please see the \"Technical reference manual - RAPID Instructions,\n"
"#   Functions and Data types\" for more details.\n"
"#-------------------------------------------------------------------------------\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Message fields\n"
"#-------------------------------------------------------------------------------\n"
"# The x-, y- and z-value of the position.\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"\n"
"================================================================================\n"
"MSG: abb_rapid_msgs/Orient\n"
"#-------------------------------------------------------------------------------\n"
"# Description:\n"
"#   The purpose of this message definition, is to represent the\n"
"#   RAPID data type \"orient\" (orientation).\n"
"#\n"
"# Note:\n"
"#   Please see the \"Technical reference manual - RAPID Instructions,\n"
"#   Functions and Data types\" for more details.\n"
"#-------------------------------------------------------------------------------\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Message fields\n"
"#-------------------------------------------------------------------------------\n"
"# Quaternion 1-4.\n"
"float32 q1\n"
"float32 q2\n"
"float32 q3\n"
"float32 q4\n"
"\n"
"================================================================================\n"
"MSG: abb_rapid_msgs/ConfData\n"
"#-------------------------------------------------------------------------------\n"
"# Description:\n"
"#   The purpose of this message definition, is to represent the\n"
"#   RAPID data type \"confdata\" (robot configuration data).\n"
"#\n"
"# Note:\n"
"#   Please see the \"Technical reference manual - RAPID Instructions,\n"
"#   Functions and Data types\" for more details.\n"
"#-------------------------------------------------------------------------------\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Message fields\n"
"#-------------------------------------------------------------------------------\n"
"# Rotating axis:\n"
"# - The current quadrant of axis 1, 4 and 6,\n"
"#   expressed as a positive or negative integer.\n"
"# Linear axis:\n"
"# - The current meter interval of axis 1, 4 and 6,\n"
"#   expressed as a positive or negative integer.\n"
"float32 cf1\n"
"float32 cf4\n"
"float32 cf6\n"
"\n"
"# Rotating axis:\n"
"# - For serial link robots, the current robot configuration,\n"
"#   expressed as an integer in the range from 0 to 7.\n"
"# - For SCARA robots, the current robot configuration,\n"
"#   expressed as an integer in the range from 0 to 1.\n"
"# - For 7-axis robots, the current robot configuration,\n"
"#   expressed as an integer in the range from 0 to 7.\n"
"# - For paint robots, the current quadrant of axis 5,\n"
"#   expressed as a positive or negative integer.\n"
"# - For other robots, using the current quadrant of axis 2,\n"
"#   expressed as a positive or negative integer.\n"
"# Linear axis:\n"
"# - The current meter interval of axis 2,\n"
"#   expressed as a positive or negative integer.\n"
"float32 cfx\n"
"\n"
"================================================================================\n"
"MSG: abb_rapid_msgs/ExtJoint\n"
"#-------------------------------------------------------------------------------\n"
"# Description:\n"
"#   The purpose of this message definition, is to represent the\n"
"#   RAPID data type \"extjoint\" (position of external joints).\n"
"#\n"
"# Note:\n"
"#   Please see the \"Technical reference manual - RAPID Instructions,\n"
"#   Functions and Data types\" for more details.\n"
"#-------------------------------------------------------------------------------\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Message fields\n"
"#-------------------------------------------------------------------------------\n"
"# The position of the external logical axis \"a\"-\"f\",\n"
"# expressed in degrees or mm (depending on the type of axis).\n"
"float32 eax_a\n"
"float32 eax_b\n"
"float32 eax_c\n"
"float32 eax_d\n"
"float32 eax_e\n"
"float32 eax_f\n"
;
  }

  static const char* value(const ::abb_rapid_msgs::RobTarget_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::abb_rapid_msgs::RobTarget_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.trans);
      stream.next(m.rot);
      stream.next(m.robconf);
      stream.next(m.extax);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobTarget_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::abb_rapid_msgs::RobTarget_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::abb_rapid_msgs::RobTarget_<ContainerAllocator>& v)
  {
    s << indent << "trans: ";
    s << std::endl;
    Printer< ::abb_rapid_msgs::Pos_<ContainerAllocator> >::stream(s, indent + "  ", v.trans);
    s << indent << "rot: ";
    s << std::endl;
    Printer< ::abb_rapid_msgs::Orient_<ContainerAllocator> >::stream(s, indent + "  ", v.rot);
    s << indent << "robconf: ";
    s << std::endl;
    Printer< ::abb_rapid_msgs::ConfData_<ContainerAllocator> >::stream(s, indent + "  ", v.robconf);
    s << indent << "extax: ";
    s << std::endl;
    Printer< ::abb_rapid_msgs::ExtJoint_<ContainerAllocator> >::stream(s, indent + "  ", v.extax);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ABB_RAPID_MSGS_MESSAGE_ROBTARGET_H
