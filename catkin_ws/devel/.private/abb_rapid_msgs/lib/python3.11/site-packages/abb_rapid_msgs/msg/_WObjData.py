# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from abb_rapid_msgs/WObjData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import abb_rapid_msgs.msg

class WObjData(genpy.Message):
  _md5sum = "eb6fd21e8b900ca32b7fe6c07697ac07"
  _type = "abb_rapid_msgs/WObjData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#-------------------------------------------------------------------------------
# Description:
#   The purpose of this message definition, is to represent the
#   RAPID data type "wobjdata" (work object data).
#
# Note:
#   Please see the "Technical reference manual - RAPID Instructions,
#   Functions and Data types" for more details.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Message fields
#-------------------------------------------------------------------------------
# Defines whether or not the robot in the actual
# program task is holding the work object:
# - TRUE: The robot is holding the work object,
#         i.e. using a stationary tool.
# - FALSE: The robot is not holding the work object,
#          i.e. the robot is holding the tool.
bool robhold

# Defines whether or not a fixed user coordinate system is used:
# - TRUE: Fixed user coordinate system.
# - FALSE: Movable user coordinate system,
#          i.e. coordinated external axes are used.
#          Also to be used in a MultiMove system in
#          semicoordinated or synchronized coordinated mode.
bool ufprog

# The mechanical unit with which the robot movements are coordinated.
#
# Only specified in the case of movable user
# coordinate systems (ufprog is FALSE).
string ufmec

# The user coordinate system, i.e. the position
# of the current work surface or fixture.
Pose uframe

# The object coordinate system, i.e. the position
# of the current work object.
Pose oframe

================================================================================
MSG: abb_rapid_msgs/Pose
#-------------------------------------------------------------------------------
# Description:
#   The purpose of this message definition, is to represent the
#   RAPID data type "pose" (coordinate transformations).
#
# Note:
#   Please see the "Technical reference manual - RAPID Instructions,
#   Functions and Data types" for more details.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Message fields
#-------------------------------------------------------------------------------
# The displacement in position (x, y, and z) of the coordinate system.
Pos trans

# The rotation of the coordinate system.
Orient rot

================================================================================
MSG: abb_rapid_msgs/Pos
#-------------------------------------------------------------------------------
# Description:
#   The purpose of this message definition, is to represent the
#   RAPID data type "pos" (positions (only X, Y and Z)).
#
# Note:
#   Please see the "Technical reference manual - RAPID Instructions,
#   Functions and Data types" for more details.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Message fields
#-------------------------------------------------------------------------------
# The x-, y- and z-value of the position.
float32 x
float32 y
float32 z

================================================================================
MSG: abb_rapid_msgs/Orient
#-------------------------------------------------------------------------------
# Description:
#   The purpose of this message definition, is to represent the
#   RAPID data type "orient" (orientation).
#
# Note:
#   Please see the "Technical reference manual - RAPID Instructions,
#   Functions and Data types" for more details.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Message fields
#-------------------------------------------------------------------------------
# Quaternion 1-4.
float32 q1
float32 q2
float32 q3
float32 q4
"""
  __slots__ = ['robhold','ufprog','ufmec','uframe','oframe']
  _slot_types = ['bool','bool','string','abb_rapid_msgs/Pose','abb_rapid_msgs/Pose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       robhold,ufprog,ufmec,uframe,oframe

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WObjData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.robhold is None:
        self.robhold = False
      if self.ufprog is None:
        self.ufprog = False
      if self.ufmec is None:
        self.ufmec = ''
      if self.uframe is None:
        self.uframe = abb_rapid_msgs.msg.Pose()
      if self.oframe is None:
        self.oframe = abb_rapid_msgs.msg.Pose()
    else:
      self.robhold = False
      self.ufprog = False
      self.ufmec = ''
      self.uframe = abb_rapid_msgs.msg.Pose()
      self.oframe = abb_rapid_msgs.msg.Pose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.robhold, _x.ufprog))
      _x = self.ufmec
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_14f().pack(_x.uframe.trans.x, _x.uframe.trans.y, _x.uframe.trans.z, _x.uframe.rot.q1, _x.uframe.rot.q2, _x.uframe.rot.q3, _x.uframe.rot.q4, _x.oframe.trans.x, _x.oframe.trans.y, _x.oframe.trans.z, _x.oframe.rot.q1, _x.oframe.rot.q2, _x.oframe.rot.q3, _x.oframe.rot.q4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.uframe is None:
        self.uframe = abb_rapid_msgs.msg.Pose()
      if self.oframe is None:
        self.oframe = abb_rapid_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 2
      (_x.robhold, _x.ufprog,) = _get_struct_2B().unpack(str[start:end])
      self.robhold = bool(self.robhold)
      self.ufprog = bool(self.ufprog)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ufmec = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ufmec = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.uframe.trans.x, _x.uframe.trans.y, _x.uframe.trans.z, _x.uframe.rot.q1, _x.uframe.rot.q2, _x.uframe.rot.q3, _x.uframe.rot.q4, _x.oframe.trans.x, _x.oframe.trans.y, _x.oframe.trans.z, _x.oframe.rot.q1, _x.oframe.rot.q2, _x.oframe.rot.q3, _x.oframe.rot.q4,) = _get_struct_14f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.robhold, _x.ufprog))
      _x = self.ufmec
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_14f().pack(_x.uframe.trans.x, _x.uframe.trans.y, _x.uframe.trans.z, _x.uframe.rot.q1, _x.uframe.rot.q2, _x.uframe.rot.q3, _x.uframe.rot.q4, _x.oframe.trans.x, _x.oframe.trans.y, _x.oframe.trans.z, _x.oframe.rot.q1, _x.oframe.rot.q2, _x.oframe.rot.q3, _x.oframe.rot.q4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.uframe is None:
        self.uframe = abb_rapid_msgs.msg.Pose()
      if self.oframe is None:
        self.oframe = abb_rapid_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 2
      (_x.robhold, _x.ufprog,) = _get_struct_2B().unpack(str[start:end])
      self.robhold = bool(self.robhold)
      self.ufprog = bool(self.ufprog)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ufmec = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ufmec = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.uframe.trans.x, _x.uframe.trans.y, _x.uframe.trans.z, _x.uframe.rot.q1, _x.uframe.rot.q2, _x.uframe.rot.q3, _x.uframe.rot.q4, _x.oframe.trans.x, _x.oframe.trans.y, _x.oframe.trans.z, _x.oframe.rot.q1, _x.oframe.rot.q2, _x.oframe.rot.q3, _x.oframe.rot.q4,) = _get_struct_14f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_14f = None
def _get_struct_14f():
    global _struct_14f
    if _struct_14f is None:
        _struct_14f = struct.Struct("<14f")
    return _struct_14f
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
