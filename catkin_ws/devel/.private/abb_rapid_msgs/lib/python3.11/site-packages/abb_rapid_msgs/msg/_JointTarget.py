# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from abb_rapid_msgs/JointTarget.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import abb_rapid_msgs.msg

class JointTarget(genpy.Message):
  _md5sum = "a80f8974c2ebed9e2ef462fcc2a28a38"
  _type = "abb_rapid_msgs/JointTarget"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#-------------------------------------------------------------------------------
# Description:
#   The purpose of this message definition, is to represent the
#   RAPID data type "jointtarget" (joint position data).
#
# Note:
#   Please see the "Technical reference manual - RAPID Instructions,
#   Functions and Data types" for more details.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Message fields
#-------------------------------------------------------------------------------
# Axis positions of the robot axes in degrees.
RobJoint robax

# The position of the external axes.
ExtJoint extax

================================================================================
MSG: abb_rapid_msgs/RobJoint
#-------------------------------------------------------------------------------
# Description:
#   The purpose of this message definition, is to represent the
#   RAPID data type "robjoint" (joint position of robot axes).
#
# Note:
#   Please see the "Technical reference manual - RAPID Instructions,
#   Functions and Data types" for more details.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Message fields
#-------------------------------------------------------------------------------
# The position of robot axis 1-6 in degrees from the calibration position.
float32 rax_1
float32 rax_2
float32 rax_3
float32 rax_4
float32 rax_5
float32 rax_6

================================================================================
MSG: abb_rapid_msgs/ExtJoint
#-------------------------------------------------------------------------------
# Description:
#   The purpose of this message definition, is to represent the
#   RAPID data type "extjoint" (position of external joints).
#
# Note:
#   Please see the "Technical reference manual - RAPID Instructions,
#   Functions and Data types" for more details.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Message fields
#-------------------------------------------------------------------------------
# The position of the external logical axis "a"-"f",
# expressed in degrees or mm (depending on the type of axis).
float32 eax_a
float32 eax_b
float32 eax_c
float32 eax_d
float32 eax_e
float32 eax_f
"""
  __slots__ = ['robax','extax']
  _slot_types = ['abb_rapid_msgs/RobJoint','abb_rapid_msgs/ExtJoint']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       robax,extax

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(JointTarget, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.robax is None:
        self.robax = abb_rapid_msgs.msg.RobJoint()
      if self.extax is None:
        self.extax = abb_rapid_msgs.msg.ExtJoint()
    else:
      self.robax = abb_rapid_msgs.msg.RobJoint()
      self.extax = abb_rapid_msgs.msg.ExtJoint()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_12f().pack(_x.robax.rax_1, _x.robax.rax_2, _x.robax.rax_3, _x.robax.rax_4, _x.robax.rax_5, _x.robax.rax_6, _x.extax.eax_a, _x.extax.eax_b, _x.extax.eax_c, _x.extax.eax_d, _x.extax.eax_e, _x.extax.eax_f))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.robax is None:
        self.robax = abb_rapid_msgs.msg.RobJoint()
      if self.extax is None:
        self.extax = abb_rapid_msgs.msg.ExtJoint()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.robax.rax_1, _x.robax.rax_2, _x.robax.rax_3, _x.robax.rax_4, _x.robax.rax_5, _x.robax.rax_6, _x.extax.eax_a, _x.extax.eax_b, _x.extax.eax_c, _x.extax.eax_d, _x.extax.eax_e, _x.extax.eax_f,) = _get_struct_12f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_12f().pack(_x.robax.rax_1, _x.robax.rax_2, _x.robax.rax_3, _x.robax.rax_4, _x.robax.rax_5, _x.robax.rax_6, _x.extax.eax_a, _x.extax.eax_b, _x.extax.eax_c, _x.extax.eax_d, _x.extax.eax_e, _x.extax.eax_f))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.robax is None:
        self.robax = abb_rapid_msgs.msg.RobJoint()
      if self.extax is None:
        self.extax = abb_rapid_msgs.msg.ExtJoint()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.robax.rax_1, _x.robax.rax_2, _x.robax.rax_3, _x.robax.rax_4, _x.robax.rax_5, _x.robax.rax_6, _x.extax.eax_a, _x.extax.eax_b, _x.extax.eax_c, _x.extax.eax_d, _x.extax.eax_e, _x.extax.eax_f,) = _get_struct_12f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12f = None
def _get_struct_12f():
    global _struct_12f
    if _struct_12f is None:
        _struct_12f = struct.Struct("<12f")
    return _struct_12f
