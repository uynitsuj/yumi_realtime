# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from abb_rapid_msgs/RobTarget.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import abb_rapid_msgs.msg

class RobTarget(genpy.Message):
  _md5sum = "31d5c046c0fae9eadd8133382f15db0a"
  _type = "abb_rapid_msgs/RobTarget"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#-------------------------------------------------------------------------------
# Description:
#   The purpose of this message definition, is to represent the
#   RAPID data type "robtarget" (position data).
#
# Note:
#   Please see the "Technical reference manual - RAPID Instructions,
#   Functions and Data types" for more details.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Message fields
#-------------------------------------------------------------------------------
# The position (x, y, and z) of the tool center point expressed in mm.
#
# The position is specified in relation to the current object coordinate system,
# including program displacement.
#
# If no work object is specified then this is the world coordinate system.
Pos trans

# The orientation of the tool, expressed in the
# form of a quaternion (q1, q2, q3, and q4).
#
# The orientation is specified in relation to the current
# object coordinate system including program displacement.
#
# If no work object is specified then this is the world coordinate system.
Orient rot

# The axis configuration of the robot (cf1, cf4, cf6, and cfx).
#
# This is defined in the form of the current quarter
# revolution of axis 1, axis 4, and axis 6.
#
# The first positive quarter revolution 0 to 90 degrees is defined as 0.
#
# The meaning of the component cfx is dependent on robot type.
ConfData robconf

# The position of the additional axes.
ExtJoint extax

================================================================================
MSG: abb_rapid_msgs/Pos
#-------------------------------------------------------------------------------
# Description:
#   The purpose of this message definition, is to represent the
#   RAPID data type "pos" (positions (only X, Y and Z)).
#
# Note:
#   Please see the "Technical reference manual - RAPID Instructions,
#   Functions and Data types" for more details.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Message fields
#-------------------------------------------------------------------------------
# The x-, y- and z-value of the position.
float32 x
float32 y
float32 z

================================================================================
MSG: abb_rapid_msgs/Orient
#-------------------------------------------------------------------------------
# Description:
#   The purpose of this message definition, is to represent the
#   RAPID data type "orient" (orientation).
#
# Note:
#   Please see the "Technical reference manual - RAPID Instructions,
#   Functions and Data types" for more details.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Message fields
#-------------------------------------------------------------------------------
# Quaternion 1-4.
float32 q1
float32 q2
float32 q3
float32 q4

================================================================================
MSG: abb_rapid_msgs/ConfData
#-------------------------------------------------------------------------------
# Description:
#   The purpose of this message definition, is to represent the
#   RAPID data type "confdata" (robot configuration data).
#
# Note:
#   Please see the "Technical reference manual - RAPID Instructions,
#   Functions and Data types" for more details.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Message fields
#-------------------------------------------------------------------------------
# Rotating axis:
# - The current quadrant of axis 1, 4 and 6,
#   expressed as a positive or negative integer.
# Linear axis:
# - The current meter interval of axis 1, 4 and 6,
#   expressed as a positive or negative integer.
float32 cf1
float32 cf4
float32 cf6

# Rotating axis:
# - For serial link robots, the current robot configuration,
#   expressed as an integer in the range from 0 to 7.
# - For SCARA robots, the current robot configuration,
#   expressed as an integer in the range from 0 to 1.
# - For 7-axis robots, the current robot configuration,
#   expressed as an integer in the range from 0 to 7.
# - For paint robots, the current quadrant of axis 5,
#   expressed as a positive or negative integer.
# - For other robots, using the current quadrant of axis 2,
#   expressed as a positive or negative integer.
# Linear axis:
# - The current meter interval of axis 2,
#   expressed as a positive or negative integer.
float32 cfx

================================================================================
MSG: abb_rapid_msgs/ExtJoint
#-------------------------------------------------------------------------------
# Description:
#   The purpose of this message definition, is to represent the
#   RAPID data type "extjoint" (position of external joints).
#
# Note:
#   Please see the "Technical reference manual - RAPID Instructions,
#   Functions and Data types" for more details.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Message fields
#-------------------------------------------------------------------------------
# The position of the external logical axis "a"-"f",
# expressed in degrees or mm (depending on the type of axis).
float32 eax_a
float32 eax_b
float32 eax_c
float32 eax_d
float32 eax_e
float32 eax_f
"""
  __slots__ = ['trans','rot','robconf','extax']
  _slot_types = ['abb_rapid_msgs/Pos','abb_rapid_msgs/Orient','abb_rapid_msgs/ConfData','abb_rapid_msgs/ExtJoint']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       trans,rot,robconf,extax

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobTarget, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.trans is None:
        self.trans = abb_rapid_msgs.msg.Pos()
      if self.rot is None:
        self.rot = abb_rapid_msgs.msg.Orient()
      if self.robconf is None:
        self.robconf = abb_rapid_msgs.msg.ConfData()
      if self.extax is None:
        self.extax = abb_rapid_msgs.msg.ExtJoint()
    else:
      self.trans = abb_rapid_msgs.msg.Pos()
      self.rot = abb_rapid_msgs.msg.Orient()
      self.robconf = abb_rapid_msgs.msg.ConfData()
      self.extax = abb_rapid_msgs.msg.ExtJoint()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_17f().pack(_x.trans.x, _x.trans.y, _x.trans.z, _x.rot.q1, _x.rot.q2, _x.rot.q3, _x.rot.q4, _x.robconf.cf1, _x.robconf.cf4, _x.robconf.cf6, _x.robconf.cfx, _x.extax.eax_a, _x.extax.eax_b, _x.extax.eax_c, _x.extax.eax_d, _x.extax.eax_e, _x.extax.eax_f))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trans is None:
        self.trans = abb_rapid_msgs.msg.Pos()
      if self.rot is None:
        self.rot = abb_rapid_msgs.msg.Orient()
      if self.robconf is None:
        self.robconf = abb_rapid_msgs.msg.ConfData()
      if self.extax is None:
        self.extax = abb_rapid_msgs.msg.ExtJoint()
      end = 0
      _x = self
      start = end
      end += 68
      (_x.trans.x, _x.trans.y, _x.trans.z, _x.rot.q1, _x.rot.q2, _x.rot.q3, _x.rot.q4, _x.robconf.cf1, _x.robconf.cf4, _x.robconf.cf6, _x.robconf.cfx, _x.extax.eax_a, _x.extax.eax_b, _x.extax.eax_c, _x.extax.eax_d, _x.extax.eax_e, _x.extax.eax_f,) = _get_struct_17f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_17f().pack(_x.trans.x, _x.trans.y, _x.trans.z, _x.rot.q1, _x.rot.q2, _x.rot.q3, _x.rot.q4, _x.robconf.cf1, _x.robconf.cf4, _x.robconf.cf6, _x.robconf.cfx, _x.extax.eax_a, _x.extax.eax_b, _x.extax.eax_c, _x.extax.eax_d, _x.extax.eax_e, _x.extax.eax_f))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trans is None:
        self.trans = abb_rapid_msgs.msg.Pos()
      if self.rot is None:
        self.rot = abb_rapid_msgs.msg.Orient()
      if self.robconf is None:
        self.robconf = abb_rapid_msgs.msg.ConfData()
      if self.extax is None:
        self.extax = abb_rapid_msgs.msg.ExtJoint()
      end = 0
      _x = self
      start = end
      end += 68
      (_x.trans.x, _x.trans.y, _x.trans.z, _x.rot.q1, _x.rot.q2, _x.rot.q3, _x.rot.q4, _x.robconf.cf1, _x.robconf.cf4, _x.robconf.cf6, _x.robconf.cfx, _x.extax.eax_a, _x.extax.eax_b, _x.extax.eax_c, _x.extax.eax_d, _x.extax.eax_e, _x.extax.eax_f,) = _get_struct_17f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_17f = None
def _get_struct_17f():
    global _struct_17f
    if _struct_17f is None:
        _struct_17f = struct.Struct("<17f")
    return _struct_17f
