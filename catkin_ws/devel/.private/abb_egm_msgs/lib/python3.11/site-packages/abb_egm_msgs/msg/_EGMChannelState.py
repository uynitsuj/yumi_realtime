# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from abb_egm_msgs/EGMChannelState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class EGMChannelState(genpy.Message):
  _md5sum = "bc28749df58cd58b7299c4217fd9899f"
  _type = "abb_egm_msgs/EGMChannelState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#-------------------------------------------------------------------------------
# Description:
#   The purpose of this message definition, is to represent a subset of states
#   of an EGM communication channel. I.e. a channel between an EGM client,
#   in an ABB robot controller system, and an external EGM server.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Enumerations
#-------------------------------------------------------------------------------
# EGM client states:
uint8 EGM_UNDEFINED = 1
uint8 EGM_ERROR     = 2
uint8 EGM_STOPPED   = 3
uint8 EGM_RUNNING   = 4

# Motor states:
uint8 MOTORS_UNDEFINED = 1
uint8 MOTORS_ON        = 2
uint8 MOTORS_OFF       = 3

# RAPID states:
uint8 RAPID_UNDEFINED = 1
uint8 RAPID_STOPPED   = 2
uint8 RAPID_RUNNING   = 3

#-------------------------------------------------------------------------------
# Message fields
#-------------------------------------------------------------------------------
# The EGM channel's name.
string name

# The EGM channel's active/inactive status.
bool active

# Indicator for if the EGM convergence criteria is currently fulfilled or not.
bool egm_convergence_met

# EGM client state.
uint8 egm_client_state

# Motor state.
uint8 motor_state

# RAPID execution state.
uint8 rapid_execution_state

# Utilization rate of the connected mechanical unit.
#
# An utilization rate > 100 mean that EGM motion references are
# too aggressive and should be reduced.
float64 utilization_rate
"""
  # Pseudo-constants
  EGM_UNDEFINED = 1
  EGM_ERROR = 2
  EGM_STOPPED = 3
  EGM_RUNNING = 4
  MOTORS_UNDEFINED = 1
  MOTORS_ON = 2
  MOTORS_OFF = 3
  RAPID_UNDEFINED = 1
  RAPID_STOPPED = 2
  RAPID_RUNNING = 3

  __slots__ = ['name','active','egm_convergence_met','egm_client_state','motor_state','rapid_execution_state','utilization_rate']
  _slot_types = ['string','bool','bool','uint8','uint8','uint8','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name,active,egm_convergence_met,egm_client_state,motor_state,rapid_execution_state,utilization_rate

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EGMChannelState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = ''
      if self.active is None:
        self.active = False
      if self.egm_convergence_met is None:
        self.egm_convergence_met = False
      if self.egm_client_state is None:
        self.egm_client_state = 0
      if self.motor_state is None:
        self.motor_state = 0
      if self.rapid_execution_state is None:
        self.rapid_execution_state = 0
      if self.utilization_rate is None:
        self.utilization_rate = 0.
    else:
      self.name = ''
      self.active = False
      self.egm_convergence_met = False
      self.egm_client_state = 0
      self.motor_state = 0
      self.rapid_execution_state = 0
      self.utilization_rate = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5Bd().pack(_x.active, _x.egm_convergence_met, _x.egm_client_state, _x.motor_state, _x.rapid_execution_state, _x.utilization_rate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.active, _x.egm_convergence_met, _x.egm_client_state, _x.motor_state, _x.rapid_execution_state, _x.utilization_rate,) = _get_struct_5Bd().unpack(str[start:end])
      self.active = bool(self.active)
      self.egm_convergence_met = bool(self.egm_convergence_met)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5Bd().pack(_x.active, _x.egm_convergence_met, _x.egm_client_state, _x.motor_state, _x.rapid_execution_state, _x.utilization_rate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.active, _x.egm_convergence_met, _x.egm_client_state, _x.motor_state, _x.rapid_execution_state, _x.utilization_rate,) = _get_struct_5Bd().unpack(str[start:end])
      self.active = bool(self.active)
      self.egm_convergence_met = bool(self.egm_convergence_met)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5Bd = None
def _get_struct_5Bd():
    global _struct_5Bd
    if _struct_5Bd is None:
        _struct_5Bd = struct.Struct("<5Bd")
    return _struct_5Bd
