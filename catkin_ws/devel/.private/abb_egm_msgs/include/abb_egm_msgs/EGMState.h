// Generated by gencpp from file abb_egm_msgs/EGMState.msg
// DO NOT EDIT!


#ifndef ABB_EGM_MSGS_MESSAGE_EGMSTATE_H
#define ABB_EGM_MSGS_MESSAGE_EGMSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <abb_egm_msgs/EGMChannelState.h>

namespace abb_egm_msgs
{
template <class ContainerAllocator>
struct EGMState_
{
  typedef EGMState_<ContainerAllocator> Type;

  EGMState_()
    : header()
    , egm_channels()  {
    }
  EGMState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , egm_channels(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::abb_egm_msgs::EGMChannelState_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::abb_egm_msgs::EGMChannelState_<ContainerAllocator> >> _egm_channels_type;
  _egm_channels_type egm_channels;





  typedef boost::shared_ptr< ::abb_egm_msgs::EGMState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::abb_egm_msgs::EGMState_<ContainerAllocator> const> ConstPtr;

}; // struct EGMState_

typedef ::abb_egm_msgs::EGMState_<std::allocator<void> > EGMState;

typedef boost::shared_ptr< ::abb_egm_msgs::EGMState > EGMStatePtr;
typedef boost::shared_ptr< ::abb_egm_msgs::EGMState const> EGMStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::abb_egm_msgs::EGMState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::abb_egm_msgs::EGMState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::abb_egm_msgs::EGMState_<ContainerAllocator1> & lhs, const ::abb_egm_msgs::EGMState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.egm_channels == rhs.egm_channels;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::abb_egm_msgs::EGMState_<ContainerAllocator1> & lhs, const ::abb_egm_msgs::EGMState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace abb_egm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::abb_egm_msgs::EGMState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abb_egm_msgs::EGMState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_egm_msgs::EGMState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_egm_msgs::EGMState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_egm_msgs::EGMState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_egm_msgs::EGMState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::abb_egm_msgs::EGMState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a239c0f02980c16cd34f9e56fbc03ff7";
  }

  static const char* value(const ::abb_egm_msgs::EGMState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa239c0f02980c16cULL;
  static const uint64_t static_value2 = 0xd34f9e56fbc03ff7ULL;
};

template<class ContainerAllocator>
struct DataType< ::abb_egm_msgs::EGMState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abb_egm_msgs/EGMState";
  }

  static const char* value(const ::abb_egm_msgs::EGMState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::abb_egm_msgs::EGMState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#-------------------------------------------------------------------------------\n"
"# Description:\n"
"#   The purpose of this message definition, is to represent a subset of states\n"
"#   of all (known) EGM communication channels.\n"
"#-------------------------------------------------------------------------------\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Message fields\n"
"#-------------------------------------------------------------------------------\n"
"# Metadata.\n"
"std_msgs/Header header\n"
"\n"
"# EGM channel states.\n"
"EGMChannelState[] egm_channels\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: abb_egm_msgs/EGMChannelState\n"
"#-------------------------------------------------------------------------------\n"
"# Description:\n"
"#   The purpose of this message definition, is to represent a subset of states\n"
"#   of an EGM communication channel. I.e. a channel between an EGM client,\n"
"#   in an ABB robot controller system, and an external EGM server.\n"
"#-------------------------------------------------------------------------------\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Enumerations\n"
"#-------------------------------------------------------------------------------\n"
"# EGM client states:\n"
"uint8 EGM_UNDEFINED = 1\n"
"uint8 EGM_ERROR     = 2\n"
"uint8 EGM_STOPPED   = 3\n"
"uint8 EGM_RUNNING   = 4\n"
"\n"
"# Motor states:\n"
"uint8 MOTORS_UNDEFINED = 1\n"
"uint8 MOTORS_ON        = 2\n"
"uint8 MOTORS_OFF       = 3\n"
"\n"
"# RAPID states:\n"
"uint8 RAPID_UNDEFINED = 1\n"
"uint8 RAPID_STOPPED   = 2\n"
"uint8 RAPID_RUNNING   = 3\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Message fields\n"
"#-------------------------------------------------------------------------------\n"
"# The EGM channel's name.\n"
"string name\n"
"\n"
"# The EGM channel's active/inactive status.\n"
"bool active\n"
"\n"
"# Indicator for if the EGM convergence criteria is currently fulfilled or not.\n"
"bool egm_convergence_met\n"
"\n"
"# EGM client state.\n"
"uint8 egm_client_state\n"
"\n"
"# Motor state.\n"
"uint8 motor_state\n"
"\n"
"# RAPID execution state.\n"
"uint8 rapid_execution_state\n"
"\n"
"# Utilization rate of the connected mechanical unit.\n"
"#\n"
"# An utilization rate > 100 mean that EGM motion references are\n"
"# too aggressive and should be reduced.\n"
"float64 utilization_rate\n"
;
  }

  static const char* value(const ::abb_egm_msgs::EGMState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::abb_egm_msgs::EGMState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.egm_channels);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EGMState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::abb_egm_msgs::EGMState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::abb_egm_msgs::EGMState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "egm_channels[]" << std::endl;
    for (size_t i = 0; i < v.egm_channels.size(); ++i)
    {
      s << indent << "  egm_channels[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::abb_egm_msgs::EGMChannelState_<ContainerAllocator> >::stream(s, indent + "    ", v.egm_channels[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ABB_EGM_MSGS_MESSAGE_EGMSTATE_H
