// Generated by gencpp from file abb_egm_msgs/EGMChannelState.msg
// DO NOT EDIT!


#ifndef ABB_EGM_MSGS_MESSAGE_EGMCHANNELSTATE_H
#define ABB_EGM_MSGS_MESSAGE_EGMCHANNELSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace abb_egm_msgs
{
template <class ContainerAllocator>
struct EGMChannelState_
{
  typedef EGMChannelState_<ContainerAllocator> Type;

  EGMChannelState_()
    : name()
    , active(false)
    , egm_convergence_met(false)
    , egm_client_state(0)
    , motor_state(0)
    , rapid_execution_state(0)
    , utilization_rate(0.0)  {
    }
  EGMChannelState_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , active(false)
    , egm_convergence_met(false)
    , egm_client_state(0)
    , motor_state(0)
    , rapid_execution_state(0)
    , utilization_rate(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef uint8_t _active_type;
  _active_type active;

   typedef uint8_t _egm_convergence_met_type;
  _egm_convergence_met_type egm_convergence_met;

   typedef uint8_t _egm_client_state_type;
  _egm_client_state_type egm_client_state;

   typedef uint8_t _motor_state_type;
  _motor_state_type motor_state;

   typedef uint8_t _rapid_execution_state_type;
  _rapid_execution_state_type rapid_execution_state;

   typedef double _utilization_rate_type;
  _utilization_rate_type utilization_rate;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(EGM_UNDEFINED)
  #undef EGM_UNDEFINED
#endif
#if defined(_WIN32) && defined(EGM_ERROR)
  #undef EGM_ERROR
#endif
#if defined(_WIN32) && defined(EGM_STOPPED)
  #undef EGM_STOPPED
#endif
#if defined(_WIN32) && defined(EGM_RUNNING)
  #undef EGM_RUNNING
#endif
#if defined(_WIN32) && defined(MOTORS_UNDEFINED)
  #undef MOTORS_UNDEFINED
#endif
#if defined(_WIN32) && defined(MOTORS_ON)
  #undef MOTORS_ON
#endif
#if defined(_WIN32) && defined(MOTORS_OFF)
  #undef MOTORS_OFF
#endif
#if defined(_WIN32) && defined(RAPID_UNDEFINED)
  #undef RAPID_UNDEFINED
#endif
#if defined(_WIN32) && defined(RAPID_STOPPED)
  #undef RAPID_STOPPED
#endif
#if defined(_WIN32) && defined(RAPID_RUNNING)
  #undef RAPID_RUNNING
#endif

  enum {
    EGM_UNDEFINED = 1u,
    EGM_ERROR = 2u,
    EGM_STOPPED = 3u,
    EGM_RUNNING = 4u,
    MOTORS_UNDEFINED = 1u,
    MOTORS_ON = 2u,
    MOTORS_OFF = 3u,
    RAPID_UNDEFINED = 1u,
    RAPID_STOPPED = 2u,
    RAPID_RUNNING = 3u,
  };


  typedef boost::shared_ptr< ::abb_egm_msgs::EGMChannelState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::abb_egm_msgs::EGMChannelState_<ContainerAllocator> const> ConstPtr;

}; // struct EGMChannelState_

typedef ::abb_egm_msgs::EGMChannelState_<std::allocator<void> > EGMChannelState;

typedef boost::shared_ptr< ::abb_egm_msgs::EGMChannelState > EGMChannelStatePtr;
typedef boost::shared_ptr< ::abb_egm_msgs::EGMChannelState const> EGMChannelStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::abb_egm_msgs::EGMChannelState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::abb_egm_msgs::EGMChannelState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::abb_egm_msgs::EGMChannelState_<ContainerAllocator1> & lhs, const ::abb_egm_msgs::EGMChannelState_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.active == rhs.active &&
    lhs.egm_convergence_met == rhs.egm_convergence_met &&
    lhs.egm_client_state == rhs.egm_client_state &&
    lhs.motor_state == rhs.motor_state &&
    lhs.rapid_execution_state == rhs.rapid_execution_state &&
    lhs.utilization_rate == rhs.utilization_rate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::abb_egm_msgs::EGMChannelState_<ContainerAllocator1> & lhs, const ::abb_egm_msgs::EGMChannelState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace abb_egm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::abb_egm_msgs::EGMChannelState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abb_egm_msgs::EGMChannelState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_egm_msgs::EGMChannelState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_egm_msgs::EGMChannelState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_egm_msgs::EGMChannelState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_egm_msgs::EGMChannelState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::abb_egm_msgs::EGMChannelState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bc28749df58cd58b7299c4217fd9899f";
  }

  static const char* value(const ::abb_egm_msgs::EGMChannelState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbc28749df58cd58bULL;
  static const uint64_t static_value2 = 0x7299c4217fd9899fULL;
};

template<class ContainerAllocator>
struct DataType< ::abb_egm_msgs::EGMChannelState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abb_egm_msgs/EGMChannelState";
  }

  static const char* value(const ::abb_egm_msgs::EGMChannelState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::abb_egm_msgs::EGMChannelState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#-------------------------------------------------------------------------------\n"
"# Description:\n"
"#   The purpose of this message definition, is to represent a subset of states\n"
"#   of an EGM communication channel. I.e. a channel between an EGM client,\n"
"#   in an ABB robot controller system, and an external EGM server.\n"
"#-------------------------------------------------------------------------------\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Enumerations\n"
"#-------------------------------------------------------------------------------\n"
"# EGM client states:\n"
"uint8 EGM_UNDEFINED = 1\n"
"uint8 EGM_ERROR     = 2\n"
"uint8 EGM_STOPPED   = 3\n"
"uint8 EGM_RUNNING   = 4\n"
"\n"
"# Motor states:\n"
"uint8 MOTORS_UNDEFINED = 1\n"
"uint8 MOTORS_ON        = 2\n"
"uint8 MOTORS_OFF       = 3\n"
"\n"
"# RAPID states:\n"
"uint8 RAPID_UNDEFINED = 1\n"
"uint8 RAPID_STOPPED   = 2\n"
"uint8 RAPID_RUNNING   = 3\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Message fields\n"
"#-------------------------------------------------------------------------------\n"
"# The EGM channel's name.\n"
"string name\n"
"\n"
"# The EGM channel's active/inactive status.\n"
"bool active\n"
"\n"
"# Indicator for if the EGM convergence criteria is currently fulfilled or not.\n"
"bool egm_convergence_met\n"
"\n"
"# EGM client state.\n"
"uint8 egm_client_state\n"
"\n"
"# Motor state.\n"
"uint8 motor_state\n"
"\n"
"# RAPID execution state.\n"
"uint8 rapid_execution_state\n"
"\n"
"# Utilization rate of the connected mechanical unit.\n"
"#\n"
"# An utilization rate > 100 mean that EGM motion references are\n"
"# too aggressive and should be reduced.\n"
"float64 utilization_rate\n"
;
  }

  static const char* value(const ::abb_egm_msgs::EGMChannelState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::abb_egm_msgs::EGMChannelState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.active);
      stream.next(m.egm_convergence_met);
      stream.next(m.egm_client_state);
      stream.next(m.motor_state);
      stream.next(m.rapid_execution_state);
      stream.next(m.utilization_rate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EGMChannelState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::abb_egm_msgs::EGMChannelState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::abb_egm_msgs::EGMChannelState_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.active);
    s << indent << "egm_convergence_met: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.egm_convergence_met);
    s << indent << "egm_client_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.egm_client_state);
    s << indent << "motor_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor_state);
    s << indent << "rapid_execution_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rapid_execution_state);
    s << indent << "utilization_rate: ";
    Printer<double>::stream(s, indent + "  ", v.utilization_rate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ABB_EGM_MSGS_MESSAGE_EGMCHANNELSTATE_H
