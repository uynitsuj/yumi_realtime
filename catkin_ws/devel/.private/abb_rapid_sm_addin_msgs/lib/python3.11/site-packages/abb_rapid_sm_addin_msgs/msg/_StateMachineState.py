# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from abb_rapid_sm_addin_msgs/StateMachineState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class StateMachineState(genpy.Message):
  _md5sum = "de6354e383149183de9c15ab3d871c7b"
  _type = "abb_rapid_sm_addin_msgs/StateMachineState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#-------------------------------------------------------------------------------
# Description:
#   The purpose of this message definition, is to represent the state of an
#   instance of the RobotWare "StateMachine Add-In"'s RAPID implementation.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Enumerations
#-------------------------------------------------------------------------------
# Possible "StateMachine Add-In" RAPID states:
#
# Note: These enumeration values differ from the RAPID implementation
#       values to avoid conflict with default values in ROS messages.
uint8 SM_STATE_UNKNOWN           = 1
uint8 SM_STATE_IDLE              = 2
uint8 SM_STATE_INITIALIZE        = 3
uint8 SM_STATE_RUN_RAPID_ROUTINE = 4
uint8 SM_STATE_RUN_EGM_ROUTINE   = 5

# Possible "StateMachine Add-In" RAPID EGM actions:
#
# Note: These enumeration values differ from the RAPID implementation
#       values to avoid conflict with default values in ROS messages.
uint8 EGM_ACTION_UNKNOWN      = 1
uint8 EGM_ACTION_NONE         = 2
uint8 EGM_ACTION_RUN_JOINT    = 3
uint8 EGM_ACTION_RUN_POSE     = 4
uint8 EGM_ACTION_STOP         = 5
uint8 EGM_ACTION_START_STREAM = 6
uint8 EGM_ACTION_STOP_STREAM  = 7

#-------------------------------------------------------------------------------
# Message fields
#-------------------------------------------------------------------------------
# The RAPID task that runs the "StateMachine Add-In" instance.
string rapid_task

# The "StateMachine Add-In" instance's current state.
uint8 sm_state

# The "StateMachine Add-In" instance's current EGM action
# (only used if the RobotWare EGM option is present).
uint8 egm_action
"""
  # Pseudo-constants
  SM_STATE_UNKNOWN = 1
  SM_STATE_IDLE = 2
  SM_STATE_INITIALIZE = 3
  SM_STATE_RUN_RAPID_ROUTINE = 4
  SM_STATE_RUN_EGM_ROUTINE = 5
  EGM_ACTION_UNKNOWN = 1
  EGM_ACTION_NONE = 2
  EGM_ACTION_RUN_JOINT = 3
  EGM_ACTION_RUN_POSE = 4
  EGM_ACTION_STOP = 5
  EGM_ACTION_START_STREAM = 6
  EGM_ACTION_STOP_STREAM = 7

  __slots__ = ['rapid_task','sm_state','egm_action']
  _slot_types = ['string','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       rapid_task,sm_state,egm_action

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StateMachineState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.rapid_task is None:
        self.rapid_task = ''
      if self.sm_state is None:
        self.sm_state = 0
      if self.egm_action is None:
        self.egm_action = 0
    else:
      self.rapid_task = ''
      self.sm_state = 0
      self.egm_action = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.rapid_task
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.sm_state, _x.egm_action))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rapid_task = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rapid_task = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.sm_state, _x.egm_action,) = _get_struct_2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.rapid_task
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.sm_state, _x.egm_action))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rapid_task = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rapid_task = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.sm_state, _x.egm_action,) = _get_struct_2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
