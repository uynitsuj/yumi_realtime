# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from abb_rapid_sm_addin_msgs/SetSGCommandRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetSGCommandRequest(genpy.Message):
  _md5sum = "8840583d66e469cae970ed301faf98c0"
  _type = "abb_rapid_sm_addin_msgs/SetSGCommandRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#-------------------------------------------------------------------------------
# Description:
#   The purpose of this service definition, is to define a way to set the values
#   of predefined RAPID variables for commanding a SmartGripper tool.
#
# Note:
#   These variables are defined in each RAPID motion task, in ABB robot
#   controller systems, that are using the RobotWare "StateMachine Add-In"
#   together with a SmartGripper tool.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Enumerations
#-------------------------------------------------------------------------------
# Supported "StateMachine Add-In" SmartGripper commands:
#
# Note: These enumeration values differ from the RAPID implementation
#       values to avoid conflict with default values in ROS messages.
uint8 SG_COMMAND_UNKNOWN      = 1
uint8 SG_COMMAND_NONE         = 2
uint8 SG_COMMAND_INITIALIZE   = 3
uint8 SG_COMMAND_CALIBRATE    = 4
uint8 SG_COMMAND_MOVE_TO      = 5
uint8 SG_COMMAND_GRIP_IN      = 6
uint8 SG_COMMAND_GRIP_OUT     = 7
uint8 SG_COMMAND_BLOW_ON_1    = 8
uint8 SG_COMMAND_BLOW_ON_2    = 9
uint8 SG_COMMAND_BLOW_OFF_1   = 10
uint8 SG_COMMAND_BLOW_OFF_2   = 11
uint8 SG_COMMAND_VACUUM_ON_1  = 12
uint8 SG_COMMAND_VACUUM_ON_2  = 13
uint8 SG_COMMAND_VACUUM_OFF_1 = 14
uint8 SG_COMMAND_VACUUM_OFF_2 = 15

#-------------------------------------------------------------------------------
# Service request fields
#-------------------------------------------------------------------------------
# The RAPID task that runs the "StateMachine Add-In" instance.
string task

# Desired SmartGripper command.
uint8 command

# Desired target position [mm] (only used for the 'SG_COMMAND_MOVE_TO' command).
float32 target_position

"""
  # Pseudo-constants
  SG_COMMAND_UNKNOWN = 1
  SG_COMMAND_NONE = 2
  SG_COMMAND_INITIALIZE = 3
  SG_COMMAND_CALIBRATE = 4
  SG_COMMAND_MOVE_TO = 5
  SG_COMMAND_GRIP_IN = 6
  SG_COMMAND_GRIP_OUT = 7
  SG_COMMAND_BLOW_ON_1 = 8
  SG_COMMAND_BLOW_ON_2 = 9
  SG_COMMAND_BLOW_OFF_1 = 10
  SG_COMMAND_BLOW_OFF_2 = 11
  SG_COMMAND_VACUUM_ON_1 = 12
  SG_COMMAND_VACUUM_ON_2 = 13
  SG_COMMAND_VACUUM_OFF_1 = 14
  SG_COMMAND_VACUUM_OFF_2 = 15

  __slots__ = ['task','command','target_position']
  _slot_types = ['string','uint8','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       task,command,target_position

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetSGCommandRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.task is None:
        self.task = ''
      if self.command is None:
        self.command = 0
      if self.target_position is None:
        self.target_position = 0.
    else:
      self.task = ''
      self.command = 0
      self.target_position = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.task
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Bf().pack(_x.command, _x.target_position))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.command, _x.target_position,) = _get_struct_Bf().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.task
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Bf().pack(_x.command, _x.target_position))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.command, _x.target_position,) = _get_struct_Bf().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Bf = None
def _get_struct_Bf():
    global _struct_Bf
    if _struct_Bf is None:
        _struct_Bf = struct.Struct("<Bf")
    return _struct_Bf
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from abb_rapid_sm_addin_msgs/SetSGCommandResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetSGCommandResponse(genpy.Message):
  _md5sum = "aab0cc4b756aaf08eb67ad6459b36b27"
  _type = "abb_rapid_sm_addin_msgs/SetSGCommandResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
#-------------------------------------------------------------------------------
# Service response fields
#-------------------------------------------------------------------------------
# Service success/failure indicator.
# Refer to 'abb_robot_msgs/ServiceResponses' for defined error codes.
uint16 result_code

# Status message (empty if service succeeded).
string message

"""
  __slots__ = ['result_code','message']
  _slot_types = ['uint16','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result_code,message

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetSGCommandResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.result_code is None:
        self.result_code = 0
      if self.message is None:
        self.message = ''
    else:
      self.result_code = 0
      self.message = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.result_code
      buff.write(_get_struct_H().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 2
      (self.result_code,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.result_code
      buff.write(_get_struct_H().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 2
      (self.result_code,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_H = None
def _get_struct_H():
    global _struct_H
    if _struct_H is None:
        _struct_H = struct.Struct("<H")
    return _struct_H
class SetSGCommand(object):
  _type          = 'abb_rapid_sm_addin_msgs/SetSGCommand'
  _md5sum = '7aa352af5c8c7b889375c50673d12253'
  _request_class  = SetSGCommandRequest
  _response_class = SetSGCommandResponse
