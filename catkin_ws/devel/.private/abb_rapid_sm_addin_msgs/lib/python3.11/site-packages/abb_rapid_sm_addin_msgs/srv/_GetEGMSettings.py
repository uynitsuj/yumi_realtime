# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from abb_rapid_sm_addin_msgs/GetEGMSettingsRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetEGMSettingsRequest(genpy.Message):
  _md5sum = "0ece8f504419f7ca4d91b277e47ff617"
  _type = "abb_rapid_sm_addin_msgs/GetEGMSettingsRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#-------------------------------------------------------------------------------
# Description:
#   The purpose of this service definition, is to define a way to get the value
#   of a predefined RAPID variable of the custom RAPID data type "EGMSettings".
#
# Note:
#   This variable is defined in each RAPID motion task, in ABB robot controller
#   systems, that are using the RobotWare "StateMachine Add-In".
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Service request fields
#-------------------------------------------------------------------------------
# The RAPID task, where the variable exists.
string task

"""
  __slots__ = ['task']
  _slot_types = ['string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       task

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetEGMSettingsRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.task is None:
        self.task = ''
    else:
      self.task = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.task
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.task
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from abb_rapid_sm_addin_msgs/GetEGMSettingsResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import abb_rapid_msgs.msg
import abb_rapid_sm_addin_msgs.msg

class GetEGMSettingsResponse(genpy.Message):
  _md5sum = "e1f4c6b9730a3324dc0ac94d49b23bf7"
  _type = "abb_rapid_sm_addin_msgs/GetEGMSettingsResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
#-------------------------------------------------------------------------------
# Service response fields
#-------------------------------------------------------------------------------
# The settings used for RAPID EGM instructions.
EGMSettings settings

# Service success/failure indicator.
# Refer to 'abb_robot_msgs/ServiceResponses' for defined error codes.
uint16 result_code

# Status message (empty if service succeeded).
string message


================================================================================
MSG: abb_rapid_sm_addin_msgs/EGMSettings
#-------------------------------------------------------------------------------
# Description:
#   The purpose of this message definition, is to represent the custom RAPID
#   data type "EGMSettings" from the RobotWare "StateMachine Add-In".
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Message fields
#-------------------------------------------------------------------------------
# Indicator for if EGM motions are allowed to start.
bool allow_egm_motions

# Indicator for if RAPID tasks should be synced before starting EGM motions
# (only used in multi robot systems).
bool use_presync

# Settings for EGMSetupUC instructions.
EGMSetupSettings setup_uc

# Settings for EGMAct instructions.
EGMActivateSettings activate

# Settings for EGMRun instructions.
EGMRunSettings run

# Settings for EGMStop instructions.
EGMStopSettings stop

================================================================================
MSG: abb_rapid_sm_addin_msgs/EGMSetupSettings
#-------------------------------------------------------------------------------
# Description:
#   The purpose of this message definition, is to represent the custom RAPID
#   data type "EGMSetupSettings" from the RobotWare "StateMachine Add-In".
#
# Note:
#   "EGMSetupSettings" are for example used with the RAPID EGM instruction
#   "EGMSetupUC".
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Message fields
#-------------------------------------------------------------------------------
# Indicator for if the EGM controller should apply filtering on the
# EGM references.
bool use_filtering

# Communication timeout [s].
float32 comm_timeout

================================================================================
MSG: abb_rapid_sm_addin_msgs/EGMActivateSettings
#-------------------------------------------------------------------------------
# Description:
#   The purpose of this message definition, is to represent the custom RAPID
#   data type "EGMActivateSettings" from the RobotWare "StateMachine Add-In".
#
# Note:
#   "EGMActivateSettings" are for example used with the RAPID EGM instructions
#   "EGMActJoint" and "EGMActPose".
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Message fields
#-------------------------------------------------------------------------------
# Tool to use for EGM motions.
abb_rapid_msgs/ToolData tool

# Work object to use for EGM motions.
abb_rapid_msgs/WObjData wobj

# Correction frame to use for EGM motions (only used in EGM pose mode).
abb_rapid_msgs/Pose correction_frame

# Sensor frame to use for EGM motions (only used in EGM pose mode).
abb_rapid_msgs/Pose sensor_frame

# Condition threshold value [deg or mm] for when an EGM motion's convergence
# criteria is considered to be fulfilled.
float32 cond_min_max

# Low pass filter bandwidth [Hz] for the EGM controller.
float32 lp_filter

# Sample rate [ms] for the EGM communication.
uint8 sample_rate

# Maximum admitted joint speed [deg/s].
float32 max_speed_deviation

================================================================================
MSG: abb_rapid_msgs/ToolData
#-------------------------------------------------------------------------------
# Description:
#   The purpose of this message definition, is to represent the
#   RAPID data type "tooldata" (tool data).
#
# Note:
#   Please see the "Technical reference manual - RAPID Instructions,
#   Functions and Data types" for more details.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Message fields
#-------------------------------------------------------------------------------
# Defines whether or not the robot is holding the tool:
# - TRUE: The robot is holding the tool.
# - FALSE: The robot is not holding the tool, that is, a stationary tool.
bool robhold

# The tool coordinate system, that is:
# - The position of the TCP (x, y and z) in mm,
#   expressed in the wrist coordinate system (tool0).
# - The orientation of the tool coordinate system,
#   expressed in the wrist coordinate system.
Pose tframe

# The load of the tool (if robot held tool).
# The load of the gripper holding the work object (if stationary tool).
LoadData tload

================================================================================
MSG: abb_rapid_msgs/Pose
#-------------------------------------------------------------------------------
# Description:
#   The purpose of this message definition, is to represent the
#   RAPID data type "pose" (coordinate transformations).
#
# Note:
#   Please see the "Technical reference manual - RAPID Instructions,
#   Functions and Data types" for more details.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Message fields
#-------------------------------------------------------------------------------
# The displacement in position (x, y, and z) of the coordinate system.
Pos trans

# The rotation of the coordinate system.
Orient rot

================================================================================
MSG: abb_rapid_msgs/Pos
#-------------------------------------------------------------------------------
# Description:
#   The purpose of this message definition, is to represent the
#   RAPID data type "pos" (positions (only X, Y and Z)).
#
# Note:
#   Please see the "Technical reference manual - RAPID Instructions,
#   Functions and Data types" for more details.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Message fields
#-------------------------------------------------------------------------------
# The x-, y- and z-value of the position.
float32 x
float32 y
float32 z

================================================================================
MSG: abb_rapid_msgs/Orient
#-------------------------------------------------------------------------------
# Description:
#   The purpose of this message definition, is to represent the
#   RAPID data type "orient" (orientation).
#
# Note:
#   Please see the "Technical reference manual - RAPID Instructions,
#   Functions and Data types" for more details.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Message fields
#-------------------------------------------------------------------------------
# Quaternion 1-4.
float32 q1
float32 q2
float32 q3
float32 q4

================================================================================
MSG: abb_rapid_msgs/LoadData
#-------------------------------------------------------------------------------
# Description:
#   The purpose of this message definition, is to represent the
#   RAPID data type "loaddata" (load data).
#
# Note:
#   Please see the "Technical reference manual - RAPID Instructions,
#   Functions and Data types" for more details.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Message fields
#-------------------------------------------------------------------------------
# The mass (weight) of the load in kg.
float32 mass

# The center of gravity of the payload, expressed in mm,
# in the tool coordinate system if the robot is holding the tool.
#
# If a stationary tool is used then the center of gravity for the payload
# held by the gripper is expressed in the object frame of the work object
# coordinate system moved by the robot.
Pos cog

# The orientation of the axes of moment.
#
# These are the principal axes of the payload
# moment of inertia with origin in cog.
#
# If the robot is holding the tool, the axes of moment
# are expressed in the tool coordinate system.
Orient aom

# The moment of inertia of the load around the x-, y- and z-axis,
# expressed in kgm^2.
float32 ix
float32 iy
float32 iz

================================================================================
MSG: abb_rapid_msgs/WObjData
#-------------------------------------------------------------------------------
# Description:
#   The purpose of this message definition, is to represent the
#   RAPID data type "wobjdata" (work object data).
#
# Note:
#   Please see the "Technical reference manual - RAPID Instructions,
#   Functions and Data types" for more details.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Message fields
#-------------------------------------------------------------------------------
# Defines whether or not the robot in the actual
# program task is holding the work object:
# - TRUE: The robot is holding the work object,
#         i.e. using a stationary tool.
# - FALSE: The robot is not holding the work object,
#          i.e. the robot is holding the tool.
bool robhold

# Defines whether or not a fixed user coordinate system is used:
# - TRUE: Fixed user coordinate system.
# - FALSE: Movable user coordinate system,
#          i.e. coordinated external axes are used.
#          Also to be used in a MultiMove system in
#          semicoordinated or synchronized coordinated mode.
bool ufprog

# The mechanical unit with which the robot movements are coordinated.
#
# Only specified in the case of movable user
# coordinate systems (ufprog is FALSE).
string ufmec

# The user coordinate system, i.e. the position
# of the current work surface or fixture.
Pose uframe

# The object coordinate system, i.e. the position
# of the current work object.
Pose oframe

================================================================================
MSG: abb_rapid_sm_addin_msgs/EGMRunSettings
#-------------------------------------------------------------------------------
# Description:
#   The purpose of this message definition, is to represent the custom RAPID
#   data type "EGMRunSettings" from the RobotWare "StateMachine Add-In".
#
# Note:
#   "EGMRunSettings" are for example used with the RAPID EGM instructions
#   "EGMRunJoint" and "EGMRunPose".
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Message fields
#-------------------------------------------------------------------------------
# Condition time [s] for how long an EGM motion's convergence criteria must be
# fulfilled before the motion is considered to be finished.
float32 cond_time

# Ramp in time [s].
float32 ramp_in_time

# Static offset applied on top of the EGM references
# (only used in EGM pose mode).
abb_rapid_msgs/Pose offset

# Position correction gain for the EGM controller.
float32 pos_corr_gain

================================================================================
MSG: abb_rapid_sm_addin_msgs/EGMStopSettings
#-------------------------------------------------------------------------------
# Description:
#   The purpose of this message definition, is to represent the custom RAPID
#   data type "EGMStopSettings" from the RobotWare "StateMachine Add-In".
#
# Note:
#   "EGMStopSettings" are for example used with the RAPID EGM instruction
#   "EGMStop".
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Message fields
#-------------------------------------------------------------------------------
# Ramp out time [s].
float32 ramp_out_time
"""
  __slots__ = ['settings','result_code','message']
  _slot_types = ['abb_rapid_sm_addin_msgs/EGMSettings','uint16','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       settings,result_code,message

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetEGMSettingsResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.settings is None:
        self.settings = abb_rapid_sm_addin_msgs.msg.EGMSettings()
      if self.result_code is None:
        self.result_code = 0
      if self.message is None:
        self.message = ''
    else:
      self.settings = abb_rapid_sm_addin_msgs.msg.EGMSettings()
      self.result_code = 0
      self.message = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3BfB18f2B().pack(_x.settings.allow_egm_motions, _x.settings.use_presync, _x.settings.setup_uc.use_filtering, _x.settings.setup_uc.comm_timeout, _x.settings.activate.tool.robhold, _x.settings.activate.tool.tframe.trans.x, _x.settings.activate.tool.tframe.trans.y, _x.settings.activate.tool.tframe.trans.z, _x.settings.activate.tool.tframe.rot.q1, _x.settings.activate.tool.tframe.rot.q2, _x.settings.activate.tool.tframe.rot.q3, _x.settings.activate.tool.tframe.rot.q4, _x.settings.activate.tool.tload.mass, _x.settings.activate.tool.tload.cog.x, _x.settings.activate.tool.tload.cog.y, _x.settings.activate.tool.tload.cog.z, _x.settings.activate.tool.tload.aom.q1, _x.settings.activate.tool.tload.aom.q2, _x.settings.activate.tool.tload.aom.q3, _x.settings.activate.tool.tload.aom.q4, _x.settings.activate.tool.tload.ix, _x.settings.activate.tool.tload.iy, _x.settings.activate.tool.tload.iz, _x.settings.activate.wobj.robhold, _x.settings.activate.wobj.ufprog))
      _x = self.settings.activate.wobj.ufmec
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_30fB12fH().pack(_x.settings.activate.wobj.uframe.trans.x, _x.settings.activate.wobj.uframe.trans.y, _x.settings.activate.wobj.uframe.trans.z, _x.settings.activate.wobj.uframe.rot.q1, _x.settings.activate.wobj.uframe.rot.q2, _x.settings.activate.wobj.uframe.rot.q3, _x.settings.activate.wobj.uframe.rot.q4, _x.settings.activate.wobj.oframe.trans.x, _x.settings.activate.wobj.oframe.trans.y, _x.settings.activate.wobj.oframe.trans.z, _x.settings.activate.wobj.oframe.rot.q1, _x.settings.activate.wobj.oframe.rot.q2, _x.settings.activate.wobj.oframe.rot.q3, _x.settings.activate.wobj.oframe.rot.q4, _x.settings.activate.correction_frame.trans.x, _x.settings.activate.correction_frame.trans.y, _x.settings.activate.correction_frame.trans.z, _x.settings.activate.correction_frame.rot.q1, _x.settings.activate.correction_frame.rot.q2, _x.settings.activate.correction_frame.rot.q3, _x.settings.activate.correction_frame.rot.q4, _x.settings.activate.sensor_frame.trans.x, _x.settings.activate.sensor_frame.trans.y, _x.settings.activate.sensor_frame.trans.z, _x.settings.activate.sensor_frame.rot.q1, _x.settings.activate.sensor_frame.rot.q2, _x.settings.activate.sensor_frame.rot.q3, _x.settings.activate.sensor_frame.rot.q4, _x.settings.activate.cond_min_max, _x.settings.activate.lp_filter, _x.settings.activate.sample_rate, _x.settings.activate.max_speed_deviation, _x.settings.run.cond_time, _x.settings.run.ramp_in_time, _x.settings.run.offset.trans.x, _x.settings.run.offset.trans.y, _x.settings.run.offset.trans.z, _x.settings.run.offset.rot.q1, _x.settings.run.offset.rot.q2, _x.settings.run.offset.rot.q3, _x.settings.run.offset.rot.q4, _x.settings.run.pos_corr_gain, _x.settings.stop.ramp_out_time, _x.result_code))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.settings is None:
        self.settings = abb_rapid_sm_addin_msgs.msg.EGMSettings()
      end = 0
      _x = self
      start = end
      end += 82
      (_x.settings.allow_egm_motions, _x.settings.use_presync, _x.settings.setup_uc.use_filtering, _x.settings.setup_uc.comm_timeout, _x.settings.activate.tool.robhold, _x.settings.activate.tool.tframe.trans.x, _x.settings.activate.tool.tframe.trans.y, _x.settings.activate.tool.tframe.trans.z, _x.settings.activate.tool.tframe.rot.q1, _x.settings.activate.tool.tframe.rot.q2, _x.settings.activate.tool.tframe.rot.q3, _x.settings.activate.tool.tframe.rot.q4, _x.settings.activate.tool.tload.mass, _x.settings.activate.tool.tload.cog.x, _x.settings.activate.tool.tload.cog.y, _x.settings.activate.tool.tload.cog.z, _x.settings.activate.tool.tload.aom.q1, _x.settings.activate.tool.tload.aom.q2, _x.settings.activate.tool.tload.aom.q3, _x.settings.activate.tool.tload.aom.q4, _x.settings.activate.tool.tload.ix, _x.settings.activate.tool.tload.iy, _x.settings.activate.tool.tload.iz, _x.settings.activate.wobj.robhold, _x.settings.activate.wobj.ufprog,) = _get_struct_3BfB18f2B().unpack(str[start:end])
      self.settings.allow_egm_motions = bool(self.settings.allow_egm_motions)
      self.settings.use_presync = bool(self.settings.use_presync)
      self.settings.setup_uc.use_filtering = bool(self.settings.setup_uc.use_filtering)
      self.settings.activate.tool.robhold = bool(self.settings.activate.tool.robhold)
      self.settings.activate.wobj.robhold = bool(self.settings.activate.wobj.robhold)
      self.settings.activate.wobj.ufprog = bool(self.settings.activate.wobj.ufprog)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.settings.activate.wobj.ufmec = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.settings.activate.wobj.ufmec = str[start:end]
      _x = self
      start = end
      end += 171
      (_x.settings.activate.wobj.uframe.trans.x, _x.settings.activate.wobj.uframe.trans.y, _x.settings.activate.wobj.uframe.trans.z, _x.settings.activate.wobj.uframe.rot.q1, _x.settings.activate.wobj.uframe.rot.q2, _x.settings.activate.wobj.uframe.rot.q3, _x.settings.activate.wobj.uframe.rot.q4, _x.settings.activate.wobj.oframe.trans.x, _x.settings.activate.wobj.oframe.trans.y, _x.settings.activate.wobj.oframe.trans.z, _x.settings.activate.wobj.oframe.rot.q1, _x.settings.activate.wobj.oframe.rot.q2, _x.settings.activate.wobj.oframe.rot.q3, _x.settings.activate.wobj.oframe.rot.q4, _x.settings.activate.correction_frame.trans.x, _x.settings.activate.correction_frame.trans.y, _x.settings.activate.correction_frame.trans.z, _x.settings.activate.correction_frame.rot.q1, _x.settings.activate.correction_frame.rot.q2, _x.settings.activate.correction_frame.rot.q3, _x.settings.activate.correction_frame.rot.q4, _x.settings.activate.sensor_frame.trans.x, _x.settings.activate.sensor_frame.trans.y, _x.settings.activate.sensor_frame.trans.z, _x.settings.activate.sensor_frame.rot.q1, _x.settings.activate.sensor_frame.rot.q2, _x.settings.activate.sensor_frame.rot.q3, _x.settings.activate.sensor_frame.rot.q4, _x.settings.activate.cond_min_max, _x.settings.activate.lp_filter, _x.settings.activate.sample_rate, _x.settings.activate.max_speed_deviation, _x.settings.run.cond_time, _x.settings.run.ramp_in_time, _x.settings.run.offset.trans.x, _x.settings.run.offset.trans.y, _x.settings.run.offset.trans.z, _x.settings.run.offset.rot.q1, _x.settings.run.offset.rot.q2, _x.settings.run.offset.rot.q3, _x.settings.run.offset.rot.q4, _x.settings.run.pos_corr_gain, _x.settings.stop.ramp_out_time, _x.result_code,) = _get_struct_30fB12fH().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3BfB18f2B().pack(_x.settings.allow_egm_motions, _x.settings.use_presync, _x.settings.setup_uc.use_filtering, _x.settings.setup_uc.comm_timeout, _x.settings.activate.tool.robhold, _x.settings.activate.tool.tframe.trans.x, _x.settings.activate.tool.tframe.trans.y, _x.settings.activate.tool.tframe.trans.z, _x.settings.activate.tool.tframe.rot.q1, _x.settings.activate.tool.tframe.rot.q2, _x.settings.activate.tool.tframe.rot.q3, _x.settings.activate.tool.tframe.rot.q4, _x.settings.activate.tool.tload.mass, _x.settings.activate.tool.tload.cog.x, _x.settings.activate.tool.tload.cog.y, _x.settings.activate.tool.tload.cog.z, _x.settings.activate.tool.tload.aom.q1, _x.settings.activate.tool.tload.aom.q2, _x.settings.activate.tool.tload.aom.q3, _x.settings.activate.tool.tload.aom.q4, _x.settings.activate.tool.tload.ix, _x.settings.activate.tool.tload.iy, _x.settings.activate.tool.tload.iz, _x.settings.activate.wobj.robhold, _x.settings.activate.wobj.ufprog))
      _x = self.settings.activate.wobj.ufmec
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_30fB12fH().pack(_x.settings.activate.wobj.uframe.trans.x, _x.settings.activate.wobj.uframe.trans.y, _x.settings.activate.wobj.uframe.trans.z, _x.settings.activate.wobj.uframe.rot.q1, _x.settings.activate.wobj.uframe.rot.q2, _x.settings.activate.wobj.uframe.rot.q3, _x.settings.activate.wobj.uframe.rot.q4, _x.settings.activate.wobj.oframe.trans.x, _x.settings.activate.wobj.oframe.trans.y, _x.settings.activate.wobj.oframe.trans.z, _x.settings.activate.wobj.oframe.rot.q1, _x.settings.activate.wobj.oframe.rot.q2, _x.settings.activate.wobj.oframe.rot.q3, _x.settings.activate.wobj.oframe.rot.q4, _x.settings.activate.correction_frame.trans.x, _x.settings.activate.correction_frame.trans.y, _x.settings.activate.correction_frame.trans.z, _x.settings.activate.correction_frame.rot.q1, _x.settings.activate.correction_frame.rot.q2, _x.settings.activate.correction_frame.rot.q3, _x.settings.activate.correction_frame.rot.q4, _x.settings.activate.sensor_frame.trans.x, _x.settings.activate.sensor_frame.trans.y, _x.settings.activate.sensor_frame.trans.z, _x.settings.activate.sensor_frame.rot.q1, _x.settings.activate.sensor_frame.rot.q2, _x.settings.activate.sensor_frame.rot.q3, _x.settings.activate.sensor_frame.rot.q4, _x.settings.activate.cond_min_max, _x.settings.activate.lp_filter, _x.settings.activate.sample_rate, _x.settings.activate.max_speed_deviation, _x.settings.run.cond_time, _x.settings.run.ramp_in_time, _x.settings.run.offset.trans.x, _x.settings.run.offset.trans.y, _x.settings.run.offset.trans.z, _x.settings.run.offset.rot.q1, _x.settings.run.offset.rot.q2, _x.settings.run.offset.rot.q3, _x.settings.run.offset.rot.q4, _x.settings.run.pos_corr_gain, _x.settings.stop.ramp_out_time, _x.result_code))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.settings is None:
        self.settings = abb_rapid_sm_addin_msgs.msg.EGMSettings()
      end = 0
      _x = self
      start = end
      end += 82
      (_x.settings.allow_egm_motions, _x.settings.use_presync, _x.settings.setup_uc.use_filtering, _x.settings.setup_uc.comm_timeout, _x.settings.activate.tool.robhold, _x.settings.activate.tool.tframe.trans.x, _x.settings.activate.tool.tframe.trans.y, _x.settings.activate.tool.tframe.trans.z, _x.settings.activate.tool.tframe.rot.q1, _x.settings.activate.tool.tframe.rot.q2, _x.settings.activate.tool.tframe.rot.q3, _x.settings.activate.tool.tframe.rot.q4, _x.settings.activate.tool.tload.mass, _x.settings.activate.tool.tload.cog.x, _x.settings.activate.tool.tload.cog.y, _x.settings.activate.tool.tload.cog.z, _x.settings.activate.tool.tload.aom.q1, _x.settings.activate.tool.tload.aom.q2, _x.settings.activate.tool.tload.aom.q3, _x.settings.activate.tool.tload.aom.q4, _x.settings.activate.tool.tload.ix, _x.settings.activate.tool.tload.iy, _x.settings.activate.tool.tload.iz, _x.settings.activate.wobj.robhold, _x.settings.activate.wobj.ufprog,) = _get_struct_3BfB18f2B().unpack(str[start:end])
      self.settings.allow_egm_motions = bool(self.settings.allow_egm_motions)
      self.settings.use_presync = bool(self.settings.use_presync)
      self.settings.setup_uc.use_filtering = bool(self.settings.setup_uc.use_filtering)
      self.settings.activate.tool.robhold = bool(self.settings.activate.tool.robhold)
      self.settings.activate.wobj.robhold = bool(self.settings.activate.wobj.robhold)
      self.settings.activate.wobj.ufprog = bool(self.settings.activate.wobj.ufprog)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.settings.activate.wobj.ufmec = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.settings.activate.wobj.ufmec = str[start:end]
      _x = self
      start = end
      end += 171
      (_x.settings.activate.wobj.uframe.trans.x, _x.settings.activate.wobj.uframe.trans.y, _x.settings.activate.wobj.uframe.trans.z, _x.settings.activate.wobj.uframe.rot.q1, _x.settings.activate.wobj.uframe.rot.q2, _x.settings.activate.wobj.uframe.rot.q3, _x.settings.activate.wobj.uframe.rot.q4, _x.settings.activate.wobj.oframe.trans.x, _x.settings.activate.wobj.oframe.trans.y, _x.settings.activate.wobj.oframe.trans.z, _x.settings.activate.wobj.oframe.rot.q1, _x.settings.activate.wobj.oframe.rot.q2, _x.settings.activate.wobj.oframe.rot.q3, _x.settings.activate.wobj.oframe.rot.q4, _x.settings.activate.correction_frame.trans.x, _x.settings.activate.correction_frame.trans.y, _x.settings.activate.correction_frame.trans.z, _x.settings.activate.correction_frame.rot.q1, _x.settings.activate.correction_frame.rot.q2, _x.settings.activate.correction_frame.rot.q3, _x.settings.activate.correction_frame.rot.q4, _x.settings.activate.sensor_frame.trans.x, _x.settings.activate.sensor_frame.trans.y, _x.settings.activate.sensor_frame.trans.z, _x.settings.activate.sensor_frame.rot.q1, _x.settings.activate.sensor_frame.rot.q2, _x.settings.activate.sensor_frame.rot.q3, _x.settings.activate.sensor_frame.rot.q4, _x.settings.activate.cond_min_max, _x.settings.activate.lp_filter, _x.settings.activate.sample_rate, _x.settings.activate.max_speed_deviation, _x.settings.run.cond_time, _x.settings.run.ramp_in_time, _x.settings.run.offset.trans.x, _x.settings.run.offset.trans.y, _x.settings.run.offset.trans.z, _x.settings.run.offset.rot.q1, _x.settings.run.offset.rot.q2, _x.settings.run.offset.rot.q3, _x.settings.run.offset.rot.q4, _x.settings.run.pos_corr_gain, _x.settings.stop.ramp_out_time, _x.result_code,) = _get_struct_30fB12fH().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_30fB12fH = None
def _get_struct_30fB12fH():
    global _struct_30fB12fH
    if _struct_30fB12fH is None:
        _struct_30fB12fH = struct.Struct("<30fB12fH")
    return _struct_30fB12fH
_struct_3BfB18f2B = None
def _get_struct_3BfB18f2B():
    global _struct_3BfB18f2B
    if _struct_3BfB18f2B is None:
        _struct_3BfB18f2B = struct.Struct("<3BfB18f2B")
    return _struct_3BfB18f2B
class GetEGMSettings(object):
  _type          = 'abb_rapid_sm_addin_msgs/GetEGMSettings'
  _md5sum = '8735578c5cf9e61a67a68c6c0fe0172b'
  _request_class  = GetEGMSettingsRequest
  _response_class = GetEGMSettingsResponse
