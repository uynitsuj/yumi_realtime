# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from abb_rapid_sm_addin_msgs/EGMRunSettings.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import abb_rapid_msgs.msg

class EGMRunSettings(genpy.Message):
  _md5sum = "f6a2d3b6d7d6ffc880c4bc86612a6691"
  _type = "abb_rapid_sm_addin_msgs/EGMRunSettings"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#-------------------------------------------------------------------------------
# Description:
#   The purpose of this message definition, is to represent the custom RAPID
#   data type "EGMRunSettings" from the RobotWare "StateMachine Add-In".
#
# Note:
#   "EGMRunSettings" are for example used with the RAPID EGM instructions
#   "EGMRunJoint" and "EGMRunPose".
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Message fields
#-------------------------------------------------------------------------------
# Condition time [s] for how long an EGM motion's convergence criteria must be
# fulfilled before the motion is considered to be finished.
float32 cond_time

# Ramp in time [s].
float32 ramp_in_time

# Static offset applied on top of the EGM references
# (only used in EGM pose mode).
abb_rapid_msgs/Pose offset

# Position correction gain for the EGM controller.
float32 pos_corr_gain

================================================================================
MSG: abb_rapid_msgs/Pose
#-------------------------------------------------------------------------------
# Description:
#   The purpose of this message definition, is to represent the
#   RAPID data type "pose" (coordinate transformations).
#
# Note:
#   Please see the "Technical reference manual - RAPID Instructions,
#   Functions and Data types" for more details.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Message fields
#-------------------------------------------------------------------------------
# The displacement in position (x, y, and z) of the coordinate system.
Pos trans

# The rotation of the coordinate system.
Orient rot

================================================================================
MSG: abb_rapid_msgs/Pos
#-------------------------------------------------------------------------------
# Description:
#   The purpose of this message definition, is to represent the
#   RAPID data type "pos" (positions (only X, Y and Z)).
#
# Note:
#   Please see the "Technical reference manual - RAPID Instructions,
#   Functions and Data types" for more details.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Message fields
#-------------------------------------------------------------------------------
# The x-, y- and z-value of the position.
float32 x
float32 y
float32 z

================================================================================
MSG: abb_rapid_msgs/Orient
#-------------------------------------------------------------------------------
# Description:
#   The purpose of this message definition, is to represent the
#   RAPID data type "orient" (orientation).
#
# Note:
#   Please see the "Technical reference manual - RAPID Instructions,
#   Functions and Data types" for more details.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Message fields
#-------------------------------------------------------------------------------
# Quaternion 1-4.
float32 q1
float32 q2
float32 q3
float32 q4
"""
  __slots__ = ['cond_time','ramp_in_time','offset','pos_corr_gain']
  _slot_types = ['float32','float32','abb_rapid_msgs/Pose','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cond_time,ramp_in_time,offset,pos_corr_gain

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EGMRunSettings, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cond_time is None:
        self.cond_time = 0.
      if self.ramp_in_time is None:
        self.ramp_in_time = 0.
      if self.offset is None:
        self.offset = abb_rapid_msgs.msg.Pose()
      if self.pos_corr_gain is None:
        self.pos_corr_gain = 0.
    else:
      self.cond_time = 0.
      self.ramp_in_time = 0.
      self.offset = abb_rapid_msgs.msg.Pose()
      self.pos_corr_gain = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_10f().pack(_x.cond_time, _x.ramp_in_time, _x.offset.trans.x, _x.offset.trans.y, _x.offset.trans.z, _x.offset.rot.q1, _x.offset.rot.q2, _x.offset.rot.q3, _x.offset.rot.q4, _x.pos_corr_gain))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.offset is None:
        self.offset = abb_rapid_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 40
      (_x.cond_time, _x.ramp_in_time, _x.offset.trans.x, _x.offset.trans.y, _x.offset.trans.z, _x.offset.rot.q1, _x.offset.rot.q2, _x.offset.rot.q3, _x.offset.rot.q4, _x.pos_corr_gain,) = _get_struct_10f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_10f().pack(_x.cond_time, _x.ramp_in_time, _x.offset.trans.x, _x.offset.trans.y, _x.offset.trans.z, _x.offset.rot.q1, _x.offset.rot.q2, _x.offset.rot.q3, _x.offset.rot.q4, _x.pos_corr_gain))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.offset is None:
        self.offset = abb_rapid_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 40
      (_x.cond_time, _x.ramp_in_time, _x.offset.trans.x, _x.offset.trans.y, _x.offset.trans.z, _x.offset.rot.q1, _x.offset.rot.q2, _x.offset.rot.q3, _x.offset.rot.q4, _x.pos_corr_gain,) = _get_struct_10f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10f = None
def _get_struct_10f():
    global _struct_10f
    if _struct_10f is None:
        _struct_10f = struct.Struct("<10f")
    return _struct_10f
