// Generated by gencpp from file abb_rapid_sm_addin_msgs/GetEGMSettingsRequest.msg
// DO NOT EDIT!


#ifndef ABB_RAPID_SM_ADDIN_MSGS_MESSAGE_GETEGMSETTINGSREQUEST_H
#define ABB_RAPID_SM_ADDIN_MSGS_MESSAGE_GETEGMSETTINGSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace abb_rapid_sm_addin_msgs
{
template <class ContainerAllocator>
struct GetEGMSettingsRequest_
{
  typedef GetEGMSettingsRequest_<ContainerAllocator> Type;

  GetEGMSettingsRequest_()
    : task()  {
    }
  GetEGMSettingsRequest_(const ContainerAllocator& _alloc)
    : task(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _task_type;
  _task_type task;





  typedef boost::shared_ptr< ::abb_rapid_sm_addin_msgs::GetEGMSettingsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::abb_rapid_sm_addin_msgs::GetEGMSettingsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetEGMSettingsRequest_

typedef ::abb_rapid_sm_addin_msgs::GetEGMSettingsRequest_<std::allocator<void> > GetEGMSettingsRequest;

typedef boost::shared_ptr< ::abb_rapid_sm_addin_msgs::GetEGMSettingsRequest > GetEGMSettingsRequestPtr;
typedef boost::shared_ptr< ::abb_rapid_sm_addin_msgs::GetEGMSettingsRequest const> GetEGMSettingsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::abb_rapid_sm_addin_msgs::GetEGMSettingsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::abb_rapid_sm_addin_msgs::GetEGMSettingsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::abb_rapid_sm_addin_msgs::GetEGMSettingsRequest_<ContainerAllocator1> & lhs, const ::abb_rapid_sm_addin_msgs::GetEGMSettingsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.task == rhs.task;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::abb_rapid_sm_addin_msgs::GetEGMSettingsRequest_<ContainerAllocator1> & lhs, const ::abb_rapid_sm_addin_msgs::GetEGMSettingsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace abb_rapid_sm_addin_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::abb_rapid_sm_addin_msgs::GetEGMSettingsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abb_rapid_sm_addin_msgs::GetEGMSettingsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_rapid_sm_addin_msgs::GetEGMSettingsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_rapid_sm_addin_msgs::GetEGMSettingsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_rapid_sm_addin_msgs::GetEGMSettingsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_rapid_sm_addin_msgs::GetEGMSettingsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::abb_rapid_sm_addin_msgs::GetEGMSettingsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0ece8f504419f7ca4d91b277e47ff617";
  }

  static const char* value(const ::abb_rapid_sm_addin_msgs::GetEGMSettingsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0ece8f504419f7caULL;
  static const uint64_t static_value2 = 0x4d91b277e47ff617ULL;
};

template<class ContainerAllocator>
struct DataType< ::abb_rapid_sm_addin_msgs::GetEGMSettingsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abb_rapid_sm_addin_msgs/GetEGMSettingsRequest";
  }

  static const char* value(const ::abb_rapid_sm_addin_msgs::GetEGMSettingsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::abb_rapid_sm_addin_msgs::GetEGMSettingsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#-------------------------------------------------------------------------------\n"
"# Description:\n"
"#   The purpose of this service definition, is to define a way to get the value\n"
"#   of a predefined RAPID variable of the custom RAPID data type \"EGMSettings\".\n"
"#\n"
"# Note:\n"
"#   This variable is defined in each RAPID motion task, in ABB robot controller\n"
"#   systems, that are using the RobotWare \"StateMachine Add-In\".\n"
"#-------------------------------------------------------------------------------\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Service request fields\n"
"#-------------------------------------------------------------------------------\n"
"# The RAPID task, where the variable exists.\n"
"string task\n"
"\n"
;
  }

  static const char* value(const ::abb_rapid_sm_addin_msgs::GetEGMSettingsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::abb_rapid_sm_addin_msgs::GetEGMSettingsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.task);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetEGMSettingsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::abb_rapid_sm_addin_msgs::GetEGMSettingsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::abb_rapid_sm_addin_msgs::GetEGMSettingsRequest_<ContainerAllocator>& v)
  {
    s << indent << "task: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.task);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ABB_RAPID_SM_ADDIN_MSGS_MESSAGE_GETEGMSETTINGSREQUEST_H
