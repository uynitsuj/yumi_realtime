// Generated by gencpp from file abb_rapid_sm_addin_msgs/EGMRunSettings.msg
// DO NOT EDIT!


#ifndef ABB_RAPID_SM_ADDIN_MSGS_MESSAGE_EGMRUNSETTINGS_H
#define ABB_RAPID_SM_ADDIN_MSGS_MESSAGE_EGMRUNSETTINGS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <abb_rapid_msgs/Pose.h>

namespace abb_rapid_sm_addin_msgs
{
template <class ContainerAllocator>
struct EGMRunSettings_
{
  typedef EGMRunSettings_<ContainerAllocator> Type;

  EGMRunSettings_()
    : cond_time(0.0)
    , ramp_in_time(0.0)
    , offset()
    , pos_corr_gain(0.0)  {
    }
  EGMRunSettings_(const ContainerAllocator& _alloc)
    : cond_time(0.0)
    , ramp_in_time(0.0)
    , offset(_alloc)
    , pos_corr_gain(0.0)  {
  (void)_alloc;
    }



   typedef float _cond_time_type;
  _cond_time_type cond_time;

   typedef float _ramp_in_time_type;
  _ramp_in_time_type ramp_in_time;

   typedef  ::abb_rapid_msgs::Pose_<ContainerAllocator>  _offset_type;
  _offset_type offset;

   typedef float _pos_corr_gain_type;
  _pos_corr_gain_type pos_corr_gain;





  typedef boost::shared_ptr< ::abb_rapid_sm_addin_msgs::EGMRunSettings_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::abb_rapid_sm_addin_msgs::EGMRunSettings_<ContainerAllocator> const> ConstPtr;

}; // struct EGMRunSettings_

typedef ::abb_rapid_sm_addin_msgs::EGMRunSettings_<std::allocator<void> > EGMRunSettings;

typedef boost::shared_ptr< ::abb_rapid_sm_addin_msgs::EGMRunSettings > EGMRunSettingsPtr;
typedef boost::shared_ptr< ::abb_rapid_sm_addin_msgs::EGMRunSettings const> EGMRunSettingsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::abb_rapid_sm_addin_msgs::EGMRunSettings_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::abb_rapid_sm_addin_msgs::EGMRunSettings_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::abb_rapid_sm_addin_msgs::EGMRunSettings_<ContainerAllocator1> & lhs, const ::abb_rapid_sm_addin_msgs::EGMRunSettings_<ContainerAllocator2> & rhs)
{
  return lhs.cond_time == rhs.cond_time &&
    lhs.ramp_in_time == rhs.ramp_in_time &&
    lhs.offset == rhs.offset &&
    lhs.pos_corr_gain == rhs.pos_corr_gain;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::abb_rapid_sm_addin_msgs::EGMRunSettings_<ContainerAllocator1> & lhs, const ::abb_rapid_sm_addin_msgs::EGMRunSettings_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace abb_rapid_sm_addin_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::abb_rapid_sm_addin_msgs::EGMRunSettings_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abb_rapid_sm_addin_msgs::EGMRunSettings_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_rapid_sm_addin_msgs::EGMRunSettings_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_rapid_sm_addin_msgs::EGMRunSettings_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_rapid_sm_addin_msgs::EGMRunSettings_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_rapid_sm_addin_msgs::EGMRunSettings_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::abb_rapid_sm_addin_msgs::EGMRunSettings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f6a2d3b6d7d6ffc880c4bc86612a6691";
  }

  static const char* value(const ::abb_rapid_sm_addin_msgs::EGMRunSettings_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf6a2d3b6d7d6ffc8ULL;
  static const uint64_t static_value2 = 0x80c4bc86612a6691ULL;
};

template<class ContainerAllocator>
struct DataType< ::abb_rapid_sm_addin_msgs::EGMRunSettings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abb_rapid_sm_addin_msgs/EGMRunSettings";
  }

  static const char* value(const ::abb_rapid_sm_addin_msgs::EGMRunSettings_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::abb_rapid_sm_addin_msgs::EGMRunSettings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#-------------------------------------------------------------------------------\n"
"# Description:\n"
"#   The purpose of this message definition, is to represent the custom RAPID\n"
"#   data type \"EGMRunSettings\" from the RobotWare \"StateMachine Add-In\".\n"
"#\n"
"# Note:\n"
"#   \"EGMRunSettings\" are for example used with the RAPID EGM instructions\n"
"#   \"EGMRunJoint\" and \"EGMRunPose\".\n"
"#-------------------------------------------------------------------------------\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Message fields\n"
"#-------------------------------------------------------------------------------\n"
"# Condition time [s] for how long an EGM motion's convergence criteria must be\n"
"# fulfilled before the motion is considered to be finished.\n"
"float32 cond_time\n"
"\n"
"# Ramp in time [s].\n"
"float32 ramp_in_time\n"
"\n"
"# Static offset applied on top of the EGM references\n"
"# (only used in EGM pose mode).\n"
"abb_rapid_msgs/Pose offset\n"
"\n"
"# Position correction gain for the EGM controller.\n"
"float32 pos_corr_gain\n"
"\n"
"================================================================================\n"
"MSG: abb_rapid_msgs/Pose\n"
"#-------------------------------------------------------------------------------\n"
"# Description:\n"
"#   The purpose of this message definition, is to represent the\n"
"#   RAPID data type \"pose\" (coordinate transformations).\n"
"#\n"
"# Note:\n"
"#   Please see the \"Technical reference manual - RAPID Instructions,\n"
"#   Functions and Data types\" for more details.\n"
"#-------------------------------------------------------------------------------\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Message fields\n"
"#-------------------------------------------------------------------------------\n"
"# The displacement in position (x, y, and z) of the coordinate system.\n"
"Pos trans\n"
"\n"
"# The rotation of the coordinate system.\n"
"Orient rot\n"
"\n"
"================================================================================\n"
"MSG: abb_rapid_msgs/Pos\n"
"#-------------------------------------------------------------------------------\n"
"# Description:\n"
"#   The purpose of this message definition, is to represent the\n"
"#   RAPID data type \"pos\" (positions (only X, Y and Z)).\n"
"#\n"
"# Note:\n"
"#   Please see the \"Technical reference manual - RAPID Instructions,\n"
"#   Functions and Data types\" for more details.\n"
"#-------------------------------------------------------------------------------\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Message fields\n"
"#-------------------------------------------------------------------------------\n"
"# The x-, y- and z-value of the position.\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"\n"
"================================================================================\n"
"MSG: abb_rapid_msgs/Orient\n"
"#-------------------------------------------------------------------------------\n"
"# Description:\n"
"#   The purpose of this message definition, is to represent the\n"
"#   RAPID data type \"orient\" (orientation).\n"
"#\n"
"# Note:\n"
"#   Please see the \"Technical reference manual - RAPID Instructions,\n"
"#   Functions and Data types\" for more details.\n"
"#-------------------------------------------------------------------------------\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Message fields\n"
"#-------------------------------------------------------------------------------\n"
"# Quaternion 1-4.\n"
"float32 q1\n"
"float32 q2\n"
"float32 q3\n"
"float32 q4\n"
;
  }

  static const char* value(const ::abb_rapid_sm_addin_msgs::EGMRunSettings_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::abb_rapid_sm_addin_msgs::EGMRunSettings_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cond_time);
      stream.next(m.ramp_in_time);
      stream.next(m.offset);
      stream.next(m.pos_corr_gain);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EGMRunSettings_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::abb_rapid_sm_addin_msgs::EGMRunSettings_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::abb_rapid_sm_addin_msgs::EGMRunSettings_<ContainerAllocator>& v)
  {
    s << indent << "cond_time: ";
    Printer<float>::stream(s, indent + "  ", v.cond_time);
    s << indent << "ramp_in_time: ";
    Printer<float>::stream(s, indent + "  ", v.ramp_in_time);
    s << indent << "offset: ";
    s << std::endl;
    Printer< ::abb_rapid_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.offset);
    s << indent << "pos_corr_gain: ";
    Printer<float>::stream(s, indent + "  ", v.pos_corr_gain);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ABB_RAPID_SM_ADDIN_MSGS_MESSAGE_EGMRUNSETTINGS_H
