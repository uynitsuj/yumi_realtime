// Generated by gencpp from file abb_rapid_sm_addin_msgs/SetSGCommandRequest.msg
// DO NOT EDIT!


#ifndef ABB_RAPID_SM_ADDIN_MSGS_MESSAGE_SETSGCOMMANDREQUEST_H
#define ABB_RAPID_SM_ADDIN_MSGS_MESSAGE_SETSGCOMMANDREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace abb_rapid_sm_addin_msgs
{
template <class ContainerAllocator>
struct SetSGCommandRequest_
{
  typedef SetSGCommandRequest_<ContainerAllocator> Type;

  SetSGCommandRequest_()
    : task()
    , command(0)
    , target_position(0.0)  {
    }
  SetSGCommandRequest_(const ContainerAllocator& _alloc)
    : task(_alloc)
    , command(0)
    , target_position(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _task_type;
  _task_type task;

   typedef uint8_t _command_type;
  _command_type command;

   typedef float _target_position_type;
  _target_position_type target_position;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SG_COMMAND_UNKNOWN)
  #undef SG_COMMAND_UNKNOWN
#endif
#if defined(_WIN32) && defined(SG_COMMAND_NONE)
  #undef SG_COMMAND_NONE
#endif
#if defined(_WIN32) && defined(SG_COMMAND_INITIALIZE)
  #undef SG_COMMAND_INITIALIZE
#endif
#if defined(_WIN32) && defined(SG_COMMAND_CALIBRATE)
  #undef SG_COMMAND_CALIBRATE
#endif
#if defined(_WIN32) && defined(SG_COMMAND_MOVE_TO)
  #undef SG_COMMAND_MOVE_TO
#endif
#if defined(_WIN32) && defined(SG_COMMAND_GRIP_IN)
  #undef SG_COMMAND_GRIP_IN
#endif
#if defined(_WIN32) && defined(SG_COMMAND_GRIP_OUT)
  #undef SG_COMMAND_GRIP_OUT
#endif
#if defined(_WIN32) && defined(SG_COMMAND_BLOW_ON_1)
  #undef SG_COMMAND_BLOW_ON_1
#endif
#if defined(_WIN32) && defined(SG_COMMAND_BLOW_ON_2)
  #undef SG_COMMAND_BLOW_ON_2
#endif
#if defined(_WIN32) && defined(SG_COMMAND_BLOW_OFF_1)
  #undef SG_COMMAND_BLOW_OFF_1
#endif
#if defined(_WIN32) && defined(SG_COMMAND_BLOW_OFF_2)
  #undef SG_COMMAND_BLOW_OFF_2
#endif
#if defined(_WIN32) && defined(SG_COMMAND_VACUUM_ON_1)
  #undef SG_COMMAND_VACUUM_ON_1
#endif
#if defined(_WIN32) && defined(SG_COMMAND_VACUUM_ON_2)
  #undef SG_COMMAND_VACUUM_ON_2
#endif
#if defined(_WIN32) && defined(SG_COMMAND_VACUUM_OFF_1)
  #undef SG_COMMAND_VACUUM_OFF_1
#endif
#if defined(_WIN32) && defined(SG_COMMAND_VACUUM_OFF_2)
  #undef SG_COMMAND_VACUUM_OFF_2
#endif

  enum {
    SG_COMMAND_UNKNOWN = 1u,
    SG_COMMAND_NONE = 2u,
    SG_COMMAND_INITIALIZE = 3u,
    SG_COMMAND_CALIBRATE = 4u,
    SG_COMMAND_MOVE_TO = 5u,
    SG_COMMAND_GRIP_IN = 6u,
    SG_COMMAND_GRIP_OUT = 7u,
    SG_COMMAND_BLOW_ON_1 = 8u,
    SG_COMMAND_BLOW_ON_2 = 9u,
    SG_COMMAND_BLOW_OFF_1 = 10u,
    SG_COMMAND_BLOW_OFF_2 = 11u,
    SG_COMMAND_VACUUM_ON_1 = 12u,
    SG_COMMAND_VACUUM_ON_2 = 13u,
    SG_COMMAND_VACUUM_OFF_1 = 14u,
    SG_COMMAND_VACUUM_OFF_2 = 15u,
  };


  typedef boost::shared_ptr< ::abb_rapid_sm_addin_msgs::SetSGCommandRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::abb_rapid_sm_addin_msgs::SetSGCommandRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetSGCommandRequest_

typedef ::abb_rapid_sm_addin_msgs::SetSGCommandRequest_<std::allocator<void> > SetSGCommandRequest;

typedef boost::shared_ptr< ::abb_rapid_sm_addin_msgs::SetSGCommandRequest > SetSGCommandRequestPtr;
typedef boost::shared_ptr< ::abb_rapid_sm_addin_msgs::SetSGCommandRequest const> SetSGCommandRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::abb_rapid_sm_addin_msgs::SetSGCommandRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::abb_rapid_sm_addin_msgs::SetSGCommandRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::abb_rapid_sm_addin_msgs::SetSGCommandRequest_<ContainerAllocator1> & lhs, const ::abb_rapid_sm_addin_msgs::SetSGCommandRequest_<ContainerAllocator2> & rhs)
{
  return lhs.task == rhs.task &&
    lhs.command == rhs.command &&
    lhs.target_position == rhs.target_position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::abb_rapid_sm_addin_msgs::SetSGCommandRequest_<ContainerAllocator1> & lhs, const ::abb_rapid_sm_addin_msgs::SetSGCommandRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace abb_rapid_sm_addin_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::abb_rapid_sm_addin_msgs::SetSGCommandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abb_rapid_sm_addin_msgs::SetSGCommandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_rapid_sm_addin_msgs::SetSGCommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_rapid_sm_addin_msgs::SetSGCommandRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_rapid_sm_addin_msgs::SetSGCommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_rapid_sm_addin_msgs::SetSGCommandRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::abb_rapid_sm_addin_msgs::SetSGCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8840583d66e469cae970ed301faf98c0";
  }

  static const char* value(const ::abb_rapid_sm_addin_msgs::SetSGCommandRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8840583d66e469caULL;
  static const uint64_t static_value2 = 0xe970ed301faf98c0ULL;
};

template<class ContainerAllocator>
struct DataType< ::abb_rapid_sm_addin_msgs::SetSGCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abb_rapid_sm_addin_msgs/SetSGCommandRequest";
  }

  static const char* value(const ::abb_rapid_sm_addin_msgs::SetSGCommandRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::abb_rapid_sm_addin_msgs::SetSGCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#-------------------------------------------------------------------------------\n"
"# Description:\n"
"#   The purpose of this service definition, is to define a way to set the values\n"
"#   of predefined RAPID variables for commanding a SmartGripper tool.\n"
"#\n"
"# Note:\n"
"#   These variables are defined in each RAPID motion task, in ABB robot\n"
"#   controller systems, that are using the RobotWare \"StateMachine Add-In\"\n"
"#   together with a SmartGripper tool.\n"
"#-------------------------------------------------------------------------------\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Enumerations\n"
"#-------------------------------------------------------------------------------\n"
"# Supported \"StateMachine Add-In\" SmartGripper commands:\n"
"#\n"
"# Note: These enumeration values differ from the RAPID implementation\n"
"#       values to avoid conflict with default values in ROS messages.\n"
"uint8 SG_COMMAND_UNKNOWN      = 1\n"
"uint8 SG_COMMAND_NONE         = 2\n"
"uint8 SG_COMMAND_INITIALIZE   = 3\n"
"uint8 SG_COMMAND_CALIBRATE    = 4\n"
"uint8 SG_COMMAND_MOVE_TO      = 5\n"
"uint8 SG_COMMAND_GRIP_IN      = 6\n"
"uint8 SG_COMMAND_GRIP_OUT     = 7\n"
"uint8 SG_COMMAND_BLOW_ON_1    = 8\n"
"uint8 SG_COMMAND_BLOW_ON_2    = 9\n"
"uint8 SG_COMMAND_BLOW_OFF_1   = 10\n"
"uint8 SG_COMMAND_BLOW_OFF_2   = 11\n"
"uint8 SG_COMMAND_VACUUM_ON_1  = 12\n"
"uint8 SG_COMMAND_VACUUM_ON_2  = 13\n"
"uint8 SG_COMMAND_VACUUM_OFF_1 = 14\n"
"uint8 SG_COMMAND_VACUUM_OFF_2 = 15\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Service request fields\n"
"#-------------------------------------------------------------------------------\n"
"# The RAPID task that runs the \"StateMachine Add-In\" instance.\n"
"string task\n"
"\n"
"# Desired SmartGripper command.\n"
"uint8 command\n"
"\n"
"# Desired target position [mm] (only used for the 'SG_COMMAND_MOVE_TO' command).\n"
"float32 target_position\n"
"\n"
;
  }

  static const char* value(const ::abb_rapid_sm_addin_msgs::SetSGCommandRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::abb_rapid_sm_addin_msgs::SetSGCommandRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.task);
      stream.next(m.command);
      stream.next(m.target_position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetSGCommandRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::abb_rapid_sm_addin_msgs::SetSGCommandRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::abb_rapid_sm_addin_msgs::SetSGCommandRequest_<ContainerAllocator>& v)
  {
    s << indent << "task: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.task);
    s << indent << "command: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.command);
    s << indent << "target_position: ";
    Printer<float>::stream(s, indent + "  ", v.target_position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ABB_RAPID_SM_ADDIN_MSGS_MESSAGE_SETSGCOMMANDREQUEST_H
