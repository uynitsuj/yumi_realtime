// Generated by gencpp from file abb_rapid_sm_addin_msgs/RuntimeState.msg
// DO NOT EDIT!


#ifndef ABB_RAPID_SM_ADDIN_MSGS_MESSAGE_RUNTIMESTATE_H
#define ABB_RAPID_SM_ADDIN_MSGS_MESSAGE_RUNTIMESTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <abb_rapid_sm_addin_msgs/StateMachineState.h>

namespace abb_rapid_sm_addin_msgs
{
template <class ContainerAllocator>
struct RuntimeState_
{
  typedef RuntimeState_<ContainerAllocator> Type;

  RuntimeState_()
    : header()
    , state_machines()  {
    }
  RuntimeState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , state_machines(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::abb_rapid_sm_addin_msgs::StateMachineState_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::abb_rapid_sm_addin_msgs::StateMachineState_<ContainerAllocator> >> _state_machines_type;
  _state_machines_type state_machines;





  typedef boost::shared_ptr< ::abb_rapid_sm_addin_msgs::RuntimeState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::abb_rapid_sm_addin_msgs::RuntimeState_<ContainerAllocator> const> ConstPtr;

}; // struct RuntimeState_

typedef ::abb_rapid_sm_addin_msgs::RuntimeState_<std::allocator<void> > RuntimeState;

typedef boost::shared_ptr< ::abb_rapid_sm_addin_msgs::RuntimeState > RuntimeStatePtr;
typedef boost::shared_ptr< ::abb_rapid_sm_addin_msgs::RuntimeState const> RuntimeStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::abb_rapid_sm_addin_msgs::RuntimeState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::abb_rapid_sm_addin_msgs::RuntimeState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::abb_rapid_sm_addin_msgs::RuntimeState_<ContainerAllocator1> & lhs, const ::abb_rapid_sm_addin_msgs::RuntimeState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.state_machines == rhs.state_machines;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::abb_rapid_sm_addin_msgs::RuntimeState_<ContainerAllocator1> & lhs, const ::abb_rapid_sm_addin_msgs::RuntimeState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace abb_rapid_sm_addin_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::abb_rapid_sm_addin_msgs::RuntimeState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abb_rapid_sm_addin_msgs::RuntimeState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_rapid_sm_addin_msgs::RuntimeState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_rapid_sm_addin_msgs::RuntimeState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_rapid_sm_addin_msgs::RuntimeState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_rapid_sm_addin_msgs::RuntimeState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::abb_rapid_sm_addin_msgs::RuntimeState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1f803b084f80e27cb1a45c04dc77c6e7";
  }

  static const char* value(const ::abb_rapid_sm_addin_msgs::RuntimeState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1f803b084f80e27cULL;
  static const uint64_t static_value2 = 0xb1a45c04dc77c6e7ULL;
};

template<class ContainerAllocator>
struct DataType< ::abb_rapid_sm_addin_msgs::RuntimeState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abb_rapid_sm_addin_msgs/RuntimeState";
  }

  static const char* value(const ::abb_rapid_sm_addin_msgs::RuntimeState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::abb_rapid_sm_addin_msgs::RuntimeState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#-------------------------------------------------------------------------------\n"
"# Description:\n"
"#   The purpose of this message definition, is to represent the runtime states\n"
"#   of all (known) RobotWare \"StateMachine Add-In\" RAPID instances.\n"
"#-------------------------------------------------------------------------------\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Message fields\n"
"#-------------------------------------------------------------------------------\n"
"# Metadata.\n"
"std_msgs/Header header\n"
"\n"
"# \"StateMachine Add-In\" instances.\n"
"StateMachineState[] state_machines\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: abb_rapid_sm_addin_msgs/StateMachineState\n"
"#-------------------------------------------------------------------------------\n"
"# Description:\n"
"#   The purpose of this message definition, is to represent the state of an\n"
"#   instance of the RobotWare \"StateMachine Add-In\"'s RAPID implementation.\n"
"#-------------------------------------------------------------------------------\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Enumerations\n"
"#-------------------------------------------------------------------------------\n"
"# Possible \"StateMachine Add-In\" RAPID states:\n"
"#\n"
"# Note: These enumeration values differ from the RAPID implementation\n"
"#       values to avoid conflict with default values in ROS messages.\n"
"uint8 SM_STATE_UNKNOWN           = 1\n"
"uint8 SM_STATE_IDLE              = 2\n"
"uint8 SM_STATE_INITIALIZE        = 3\n"
"uint8 SM_STATE_RUN_RAPID_ROUTINE = 4\n"
"uint8 SM_STATE_RUN_EGM_ROUTINE   = 5\n"
"\n"
"# Possible \"StateMachine Add-In\" RAPID EGM actions:\n"
"#\n"
"# Note: These enumeration values differ from the RAPID implementation\n"
"#       values to avoid conflict with default values in ROS messages.\n"
"uint8 EGM_ACTION_UNKNOWN      = 1\n"
"uint8 EGM_ACTION_NONE         = 2\n"
"uint8 EGM_ACTION_RUN_JOINT    = 3\n"
"uint8 EGM_ACTION_RUN_POSE     = 4\n"
"uint8 EGM_ACTION_STOP         = 5\n"
"uint8 EGM_ACTION_START_STREAM = 6\n"
"uint8 EGM_ACTION_STOP_STREAM  = 7\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Message fields\n"
"#-------------------------------------------------------------------------------\n"
"# The RAPID task that runs the \"StateMachine Add-In\" instance.\n"
"string rapid_task\n"
"\n"
"# The \"StateMachine Add-In\" instance's current state.\n"
"uint8 sm_state\n"
"\n"
"# The \"StateMachine Add-In\" instance's current EGM action\n"
"# (only used if the RobotWare EGM option is present).\n"
"uint8 egm_action\n"
;
  }

  static const char* value(const ::abb_rapid_sm_addin_msgs::RuntimeState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::abb_rapid_sm_addin_msgs::RuntimeState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.state_machines);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RuntimeState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::abb_rapid_sm_addin_msgs::RuntimeState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::abb_rapid_sm_addin_msgs::RuntimeState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "state_machines[]" << std::endl;
    for (size_t i = 0; i < v.state_machines.size(); ++i)
    {
      s << indent << "  state_machines[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::abb_rapid_sm_addin_msgs::StateMachineState_<ContainerAllocator> >::stream(s, indent + "    ", v.state_machines[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ABB_RAPID_SM_ADDIN_MSGS_MESSAGE_RUNTIMESTATE_H
