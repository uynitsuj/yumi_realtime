// Generated by gencpp from file abb_rapid_sm_addin_msgs/EGMSetupSettings.msg
// DO NOT EDIT!


#ifndef ABB_RAPID_SM_ADDIN_MSGS_MESSAGE_EGMSETUPSETTINGS_H
#define ABB_RAPID_SM_ADDIN_MSGS_MESSAGE_EGMSETUPSETTINGS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace abb_rapid_sm_addin_msgs
{
template <class ContainerAllocator>
struct EGMSetupSettings_
{
  typedef EGMSetupSettings_<ContainerAllocator> Type;

  EGMSetupSettings_()
    : use_filtering(false)
    , comm_timeout(0.0)  {
    }
  EGMSetupSettings_(const ContainerAllocator& _alloc)
    : use_filtering(false)
    , comm_timeout(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _use_filtering_type;
  _use_filtering_type use_filtering;

   typedef float _comm_timeout_type;
  _comm_timeout_type comm_timeout;





  typedef boost::shared_ptr< ::abb_rapid_sm_addin_msgs::EGMSetupSettings_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::abb_rapid_sm_addin_msgs::EGMSetupSettings_<ContainerAllocator> const> ConstPtr;

}; // struct EGMSetupSettings_

typedef ::abb_rapid_sm_addin_msgs::EGMSetupSettings_<std::allocator<void> > EGMSetupSettings;

typedef boost::shared_ptr< ::abb_rapid_sm_addin_msgs::EGMSetupSettings > EGMSetupSettingsPtr;
typedef boost::shared_ptr< ::abb_rapid_sm_addin_msgs::EGMSetupSettings const> EGMSetupSettingsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::abb_rapid_sm_addin_msgs::EGMSetupSettings_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::abb_rapid_sm_addin_msgs::EGMSetupSettings_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::abb_rapid_sm_addin_msgs::EGMSetupSettings_<ContainerAllocator1> & lhs, const ::abb_rapid_sm_addin_msgs::EGMSetupSettings_<ContainerAllocator2> & rhs)
{
  return lhs.use_filtering == rhs.use_filtering &&
    lhs.comm_timeout == rhs.comm_timeout;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::abb_rapid_sm_addin_msgs::EGMSetupSettings_<ContainerAllocator1> & lhs, const ::abb_rapid_sm_addin_msgs::EGMSetupSettings_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace abb_rapid_sm_addin_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::abb_rapid_sm_addin_msgs::EGMSetupSettings_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abb_rapid_sm_addin_msgs::EGMSetupSettings_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_rapid_sm_addin_msgs::EGMSetupSettings_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_rapid_sm_addin_msgs::EGMSetupSettings_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_rapid_sm_addin_msgs::EGMSetupSettings_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_rapid_sm_addin_msgs::EGMSetupSettings_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::abb_rapid_sm_addin_msgs::EGMSetupSettings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "13bb9a91c166ef61bfdd5d16c6d9ac65";
  }

  static const char* value(const ::abb_rapid_sm_addin_msgs::EGMSetupSettings_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x13bb9a91c166ef61ULL;
  static const uint64_t static_value2 = 0xbfdd5d16c6d9ac65ULL;
};

template<class ContainerAllocator>
struct DataType< ::abb_rapid_sm_addin_msgs::EGMSetupSettings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abb_rapid_sm_addin_msgs/EGMSetupSettings";
  }

  static const char* value(const ::abb_rapid_sm_addin_msgs::EGMSetupSettings_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::abb_rapid_sm_addin_msgs::EGMSetupSettings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#-------------------------------------------------------------------------------\n"
"# Description:\n"
"#   The purpose of this message definition, is to represent the custom RAPID\n"
"#   data type \"EGMSetupSettings\" from the RobotWare \"StateMachine Add-In\".\n"
"#\n"
"# Note:\n"
"#   \"EGMSetupSettings\" are for example used with the RAPID EGM instruction\n"
"#   \"EGMSetupUC\".\n"
"#-------------------------------------------------------------------------------\n"
"\n"
"#-------------------------------------------------------------------------------\n"
"# Message fields\n"
"#-------------------------------------------------------------------------------\n"
"# Indicator for if the EGM controller should apply filtering on the\n"
"# EGM references.\n"
"bool use_filtering\n"
"\n"
"# Communication timeout [s].\n"
"float32 comm_timeout\n"
;
  }

  static const char* value(const ::abb_rapid_sm_addin_msgs::EGMSetupSettings_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::abb_rapid_sm_addin_msgs::EGMSetupSettings_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.use_filtering);
      stream.next(m.comm_timeout);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EGMSetupSettings_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::abb_rapid_sm_addin_msgs::EGMSetupSettings_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::abb_rapid_sm_addin_msgs::EGMSetupSettings_<ContainerAllocator>& v)
  {
    s << indent << "use_filtering: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.use_filtering);
    s << indent << "comm_timeout: ";
    Printer<float>::stream(s, indent + "  ", v.comm_timeout);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ABB_RAPID_SM_ADDIN_MSGS_MESSAGE_EGMSETUPSETTINGS_H
