// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: egm.proto

#include "egm.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace abb {
namespace egm {

inline constexpr EgmTestSignals::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : signals_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EgmTestSignals::EgmTestSignals(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EgmTestSignalsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EgmTestSignalsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EgmTestSignalsDefaultTypeInternal() {}
  union {
    EgmTestSignals _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EgmTestSignalsDefaultTypeInternal _EgmTestSignals_default_instance_;

inline constexpr EgmRapidCtrlExecState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        state_{static_cast< ::abb::egm::EgmRapidCtrlExecState_RapidCtrlExecStateType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR EgmRapidCtrlExecState::EgmRapidCtrlExecState(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EgmRapidCtrlExecStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EgmRapidCtrlExecStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EgmRapidCtrlExecStateDefaultTypeInternal() {}
  union {
    EgmRapidCtrlExecState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EgmRapidCtrlExecStateDefaultTypeInternal _EgmRapidCtrlExecState_default_instance_;

inline constexpr EgmQuaternion::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        u0_{0},
        u1_{0},
        u2_{0},
        u3_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EgmQuaternion::EgmQuaternion(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EgmQuaternionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EgmQuaternionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EgmQuaternionDefaultTypeInternal() {}
  union {
    EgmQuaternion _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EgmQuaternionDefaultTypeInternal _EgmQuaternion_default_instance_;

inline constexpr EgmMotorState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        state_{static_cast< ::abb::egm::EgmMotorState_MotorStateType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR EgmMotorState::EgmMotorState(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EgmMotorStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EgmMotorStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EgmMotorStateDefaultTypeInternal() {}
  union {
    EgmMotorState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EgmMotorStateDefaultTypeInternal _EgmMotorState_default_instance_;

inline constexpr EgmMeasuredForce::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : force_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EgmMeasuredForce::EgmMeasuredForce(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EgmMeasuredForceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EgmMeasuredForceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EgmMeasuredForceDefaultTypeInternal() {}
  union {
    EgmMeasuredForce _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EgmMeasuredForceDefaultTypeInternal _EgmMeasuredForce_default_instance_;

inline constexpr EgmMCIState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        state_{static_cast< ::abb::egm::EgmMCIState_MCIStateType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR EgmMCIState::EgmMCIState(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EgmMCIStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EgmMCIStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EgmMCIStateDefaultTypeInternal() {}
  union {
    EgmMCIState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EgmMCIStateDefaultTypeInternal _EgmMCIState_default_instance_;

inline constexpr EgmJoints::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : joints_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EgmJoints::EgmJoints(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EgmJointsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EgmJointsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EgmJointsDefaultTypeInternal() {}
  union {
    EgmJoints _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EgmJointsDefaultTypeInternal _EgmJoints_default_instance_;

inline constexpr EgmHeader::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        seqno_{0u},
        tm_{0u},
        mtype_{static_cast< ::abb::egm::EgmHeader_MessageType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR EgmHeader::EgmHeader(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EgmHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EgmHeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EgmHeaderDefaultTypeInternal() {}
  union {
    EgmHeader _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EgmHeaderDefaultTypeInternal _EgmHeader_default_instance_;

inline constexpr EgmExternalJoints::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : joints_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EgmExternalJoints::EgmExternalJoints(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EgmExternalJointsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EgmExternalJointsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EgmExternalJointsDefaultTypeInternal() {}
  union {
    EgmExternalJoints _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EgmExternalJointsDefaultTypeInternal _EgmExternalJoints_default_instance_;

inline constexpr EgmEuler::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        x_{0},
        y_{0},
        z_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EgmEuler::EgmEuler(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EgmEulerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EgmEulerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EgmEulerDefaultTypeInternal() {}
  union {
    EgmEuler _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EgmEulerDefaultTypeInternal _EgmEuler_default_instance_;

inline constexpr EgmClock::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        sec_{::uint64_t{0u}},
        usec_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR EgmClock::EgmClock(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EgmClockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EgmClockDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EgmClockDefaultTypeInternal() {}
  union {
    EgmClock _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EgmClockDefaultTypeInternal _EgmClock_default_instance_;

inline constexpr EgmCartesianSpeed::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : value_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EgmCartesianSpeed::EgmCartesianSpeed(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EgmCartesianSpeedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EgmCartesianSpeedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EgmCartesianSpeedDefaultTypeInternal() {}
  union {
    EgmCartesianSpeed _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EgmCartesianSpeedDefaultTypeInternal _EgmCartesianSpeed_default_instance_;

inline constexpr EgmCartesian::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        x_{0},
        y_{0},
        z_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EgmCartesian::EgmCartesian(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EgmCartesianDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EgmCartesianDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EgmCartesianDefaultTypeInternal() {}
  union {
    EgmCartesian _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EgmCartesianDefaultTypeInternal _EgmCartesian_default_instance_;

inline constexpr EgmSpeedRef::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        joints_{nullptr},
        cartesians_{nullptr},
        externaljoints_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR EgmSpeedRef::EgmSpeedRef(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EgmSpeedRefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EgmSpeedRefDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EgmSpeedRefDefaultTypeInternal() {}
  union {
    EgmSpeedRef _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EgmSpeedRefDefaultTypeInternal _EgmSpeedRef_default_instance_;

inline constexpr EgmPose::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        pos_{nullptr},
        orient_{nullptr},
        euler_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR EgmPose::EgmPose(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EgmPoseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EgmPoseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EgmPoseDefaultTypeInternal() {}
  union {
    EgmPose _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EgmPoseDefaultTypeInternal _EgmPose_default_instance_;

inline constexpr EgmPathCorr::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        pos_{nullptr},
        age_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR EgmPathCorr::EgmPathCorr(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EgmPathCorrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EgmPathCorrDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EgmPathCorrDefaultTypeInternal() {}
  union {
    EgmPathCorr _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EgmPathCorrDefaultTypeInternal _EgmPathCorr_default_instance_;

inline constexpr EgmSensorPathCorr::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        pathcorr_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR EgmSensorPathCorr::EgmSensorPathCorr(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EgmSensorPathCorrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EgmSensorPathCorrDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EgmSensorPathCorrDefaultTypeInternal() {}
  union {
    EgmSensorPathCorr _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EgmSensorPathCorrDefaultTypeInternal _EgmSensorPathCorr_default_instance_;

inline constexpr EgmPlanned::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        joints_{nullptr},
        cartesian_{nullptr},
        externaljoints_{nullptr},
        time_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR EgmPlanned::EgmPlanned(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EgmPlannedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EgmPlannedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EgmPlannedDefaultTypeInternal() {}
  union {
    EgmPlanned _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EgmPlannedDefaultTypeInternal _EgmPlanned_default_instance_;

inline constexpr EgmFeedBack::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        joints_{nullptr},
        cartesian_{nullptr},
        externaljoints_{nullptr},
        time_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR EgmFeedBack::EgmFeedBack(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EgmFeedBackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EgmFeedBackDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EgmFeedBackDefaultTypeInternal() {}
  union {
    EgmFeedBack _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EgmFeedBackDefaultTypeInternal _EgmFeedBack_default_instance_;

inline constexpr EgmSensor::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        planned_{nullptr},
        speedref_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR EgmSensor::EgmSensor(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EgmSensorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EgmSensorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EgmSensorDefaultTypeInternal() {}
  union {
    EgmSensor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EgmSensorDefaultTypeInternal _EgmSensor_default_instance_;

inline constexpr EgmRobot::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        feedback_{nullptr},
        planned_{nullptr},
        motorstate_{nullptr},
        mcistate_{nullptr},
        testsignals_{nullptr},
        rapidexecstate_{nullptr},
        measuredforce_{nullptr},
        utilizationrate_{0},
        mciconvergencemet_{false} {}

template <typename>
PROTOBUF_CONSTEXPR EgmRobot::EgmRobot(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EgmRobotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EgmRobotDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EgmRobotDefaultTypeInternal() {}
  union {
    EgmRobot _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EgmRobotDefaultTypeInternal _EgmRobot_default_instance_;
}  // namespace egm
}  // namespace abb
static ::_pb::Metadata file_level_metadata_egm_2eproto[21];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_egm_2eproto[4];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_egm_2eproto = nullptr;
const ::uint32_t TableStruct_egm_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmHeader, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmHeader, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmHeader, _impl_.seqno_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmHeader, _impl_.tm_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmHeader, _impl_.mtype_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmCartesian, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmCartesian, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmCartesian, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmCartesian, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmCartesian, _impl_.z_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmQuaternion, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmQuaternion, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmQuaternion, _impl_.u0_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmQuaternion, _impl_.u1_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmQuaternion, _impl_.u2_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmQuaternion, _impl_.u3_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmEuler, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmEuler, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmEuler, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmEuler, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmEuler, _impl_.z_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmClock, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmClock, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmClock, _impl_.sec_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmClock, _impl_.usec_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmPose, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmPose, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmPose, _impl_.pos_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmPose, _impl_.orient_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmPose, _impl_.euler_),
    0,
    1,
    2,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmCartesianSpeed, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmCartesianSpeed, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmJoints, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmJoints, _impl_.joints_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmExternalJoints, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmExternalJoints, _impl_.joints_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmPlanned, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmPlanned, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmPlanned, _impl_.joints_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmPlanned, _impl_.cartesian_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmPlanned, _impl_.externaljoints_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmPlanned, _impl_.time_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmSpeedRef, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmSpeedRef, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmSpeedRef, _impl_.joints_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmSpeedRef, _impl_.cartesians_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmSpeedRef, _impl_.externaljoints_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmPathCorr, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmPathCorr, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmPathCorr, _impl_.pos_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmPathCorr, _impl_.age_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmFeedBack, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmFeedBack, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmFeedBack, _impl_.joints_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmFeedBack, _impl_.cartesian_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmFeedBack, _impl_.externaljoints_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmFeedBack, _impl_.time_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmMotorState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmMotorState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmMotorState, _impl_.state_),
    0,
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmMCIState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmMCIState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmMCIState, _impl_.state_),
    0,
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmRapidCtrlExecState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmRapidCtrlExecState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmRapidCtrlExecState, _impl_.state_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmTestSignals, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmTestSignals, _impl_.signals_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmMeasuredForce, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmMeasuredForce, _impl_.force_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmRobot, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmRobot, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmRobot, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmRobot, _impl_.feedback_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmRobot, _impl_.planned_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmRobot, _impl_.motorstate_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmRobot, _impl_.mcistate_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmRobot, _impl_.mciconvergencemet_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmRobot, _impl_.testsignals_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmRobot, _impl_.rapidexecstate_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmRobot, _impl_.measuredforce_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmRobot, _impl_.utilizationrate_),
    0,
    1,
    2,
    3,
    4,
    9,
    5,
    6,
    7,
    8,
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmSensor, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmSensor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmSensor, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmSensor, _impl_.planned_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmSensor, _impl_.speedref_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmSensorPathCorr, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmSensorPathCorr, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmSensorPathCorr, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::EgmSensorPathCorr, _impl_.pathcorr_),
    0,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 11, -1, sizeof(::abb::egm::EgmHeader)},
        {14, 25, -1, sizeof(::abb::egm::EgmCartesian)},
        {28, 40, -1, sizeof(::abb::egm::EgmQuaternion)},
        {44, 55, -1, sizeof(::abb::egm::EgmEuler)},
        {58, 68, -1, sizeof(::abb::egm::EgmClock)},
        {70, 81, -1, sizeof(::abb::egm::EgmPose)},
        {84, -1, -1, sizeof(::abb::egm::EgmCartesianSpeed)},
        {93, -1, -1, sizeof(::abb::egm::EgmJoints)},
        {102, -1, -1, sizeof(::abb::egm::EgmExternalJoints)},
        {111, 123, -1, sizeof(::abb::egm::EgmPlanned)},
        {127, 138, -1, sizeof(::abb::egm::EgmSpeedRef)},
        {141, 151, -1, sizeof(::abb::egm::EgmPathCorr)},
        {153, 165, -1, sizeof(::abb::egm::EgmFeedBack)},
        {169, 178, -1, sizeof(::abb::egm::EgmMotorState)},
        {179, 188, -1, sizeof(::abb::egm::EgmMCIState)},
        {189, 198, -1, sizeof(::abb::egm::EgmRapidCtrlExecState)},
        {199, -1, -1, sizeof(::abb::egm::EgmTestSignals)},
        {208, -1, -1, sizeof(::abb::egm::EgmMeasuredForce)},
        {217, 235, -1, sizeof(::abb::egm::EgmRobot)},
        {245, 256, -1, sizeof(::abb::egm::EgmSensor)},
        {259, 269, -1, sizeof(::abb::egm::EgmSensorPathCorr)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::abb::egm::_EgmHeader_default_instance_._instance,
    &::abb::egm::_EgmCartesian_default_instance_._instance,
    &::abb::egm::_EgmQuaternion_default_instance_._instance,
    &::abb::egm::_EgmEuler_default_instance_._instance,
    &::abb::egm::_EgmClock_default_instance_._instance,
    &::abb::egm::_EgmPose_default_instance_._instance,
    &::abb::egm::_EgmCartesianSpeed_default_instance_._instance,
    &::abb::egm::_EgmJoints_default_instance_._instance,
    &::abb::egm::_EgmExternalJoints_default_instance_._instance,
    &::abb::egm::_EgmPlanned_default_instance_._instance,
    &::abb::egm::_EgmSpeedRef_default_instance_._instance,
    &::abb::egm::_EgmPathCorr_default_instance_._instance,
    &::abb::egm::_EgmFeedBack_default_instance_._instance,
    &::abb::egm::_EgmMotorState_default_instance_._instance,
    &::abb::egm::_EgmMCIState_default_instance_._instance,
    &::abb::egm::_EgmRapidCtrlExecState_default_instance_._instance,
    &::abb::egm::_EgmTestSignals_default_instance_._instance,
    &::abb::egm::_EgmMeasuredForce_default_instance_._instance,
    &::abb::egm::_EgmRobot_default_instance_._instance,
    &::abb::egm::_EgmSensor_default_instance_._instance,
    &::abb::egm::_EgmSensorPathCorr_default_instance_._instance,
};
const char descriptor_table_protodef_egm_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\tegm.proto\022\007abb.egm\"\353\001\n\tEgmHeader\022\r\n\005se"
    "qno\030\001 \001(\r\022\n\n\002tm\030\002 \001(\r\022@\n\005mtype\030\003 \001(\0162\036.a"
    "bb.egm.EgmHeader.MessageType:\021MSGTYPE_UN"
    "DEFINED\"\200\001\n\013MessageType\022\025\n\021MSGTYPE_UNDEF"
    "INED\020\000\022\023\n\017MSGTYPE_COMMAND\020\001\022\020\n\014MSGTYPE_D"
    "ATA\020\002\022\026\n\022MSGTYPE_CORRECTION\020\003\022\033\n\027MSGTYPE"
    "_PATH_CORRECTION\020\004\"/\n\014EgmCartesian\022\t\n\001x\030"
    "\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\t\n\001z\030\003 \002(\001\"\?\n\rEgmQuater"
    "nion\022\n\n\002u0\030\001 \002(\001\022\n\n\002u1\030\002 \002(\001\022\n\n\002u2\030\003 \002(\001"
    "\022\n\n\002u3\030\004 \002(\001\"+\n\010EgmEuler\022\t\n\001x\030\001 \002(\001\022\t\n\001y"
    "\030\002 \002(\001\022\t\n\001z\030\003 \002(\001\"%\n\010EgmClock\022\013\n\003sec\030\001 \002"
    "(\004\022\014\n\004usec\030\002 \002(\004\"w\n\007EgmPose\022\"\n\003pos\030\001 \001(\013"
    "2\025.abb.egm.EgmCartesian\022&\n\006orient\030\002 \001(\0132"
    "\026.abb.egm.EgmQuaternion\022 \n\005euler\030\003 \001(\0132\021"
    ".abb.egm.EgmEuler\"\"\n\021EgmCartesianSpeed\022\r"
    "\n\005value\030\001 \003(\001\"\033\n\tEgmJoints\022\016\n\006joints\030\001 \003"
    "(\001\"#\n\021EgmExternalJoints\022\016\n\006joints\030\001 \003(\001\""
    "\242\001\n\nEgmPlanned\022\"\n\006joints\030\001 \001(\0132\022.abb.egm"
    ".EgmJoints\022#\n\tcartesian\030\002 \001(\0132\020.abb.egm."
    "EgmPose\022*\n\016externalJoints\030\003 \001(\0132\022.abb.eg"
    "m.EgmJoints\022\037\n\004time\030\004 \001(\0132\021.abb.egm.EgmC"
    "lock\"\215\001\n\013EgmSpeedRef\022\"\n\006joints\030\001 \001(\0132\022.a"
    "bb.egm.EgmJoints\022.\n\ncartesians\030\002 \001(\0132\032.a"
    "bb.egm.EgmCartesianSpeed\022*\n\016externalJoin"
    "ts\030\003 \001(\0132\022.abb.egm.EgmJoints\">\n\013EgmPathC"
    "orr\022\"\n\003pos\030\001 \002(\0132\025.abb.egm.EgmCartesian\022"
    "\013\n\003age\030\002 \002(\r\"\243\001\n\013EgmFeedBack\022\"\n\006joints\030\001"
    " \001(\0132\022.abb.egm.EgmJoints\022#\n\tcartesian\030\002 "
    "\001(\0132\020.abb.egm.EgmPose\022*\n\016externalJoints\030"
    "\003 \001(\0132\022.abb.egm.EgmJoints\022\037\n\004time\030\004 \001(\0132"
    "\021.abb.egm.EgmClock\"\214\001\n\rEgmMotorState\0224\n\005"
    "state\030\001 \002(\0162%.abb.egm.EgmMotorState.Moto"
    "rStateType\"E\n\016MotorStateType\022\024\n\020MOTORS_U"
    "NDEFINED\020\000\022\r\n\tMOTORS_ON\020\001\022\016\n\nMOTORS_OFF\020"
    "\002\"\242\001\n\013EgmMCIState\022\?\n\005state\030\001 \002(\0162!.abb.e"
    "gm.EgmMCIState.MCIStateType:\rMCI_UNDEFIN"
    "ED\"R\n\014MCIStateType\022\021\n\rMCI_UNDEFINED\020\000\022\r\n"
    "\tMCI_ERROR\020\001\022\017\n\013MCI_STOPPED\020\002\022\017\n\013MCI_RUN"
    "NING\020\003\"\303\001\n\025EgmRapidCtrlExecState\022U\n\005stat"
    "e\030\001 \002(\01625.abb.egm.EgmRapidCtrlExecState."
    "RapidCtrlExecStateType:\017RAPID_UNDEFINED\""
    "S\n\026RapidCtrlExecStateType\022\023\n\017RAPID_UNDEF"
    "INED\020\000\022\021\n\rRAPID_STOPPED\020\001\022\021\n\rRAPID_RUNNI"
    "NG\020\002\"!\n\016EgmTestSignals\022\017\n\007signals\030\001 \003(\001\""
    "!\n\020EgmMeasuredForce\022\r\n\005force\030\001 \003(\001\"\234\003\n\010E"
    "gmRobot\022\"\n\006header\030\001 \001(\0132\022.abb.egm.EgmHea"
    "der\022&\n\010feedBack\030\002 \001(\0132\024.abb.egm.EgmFeedB"
    "ack\022$\n\007planned\030\003 \001(\0132\023.abb.egm.EgmPlanne"
    "d\022*\n\nmotorState\030\004 \001(\0132\026.abb.egm.EgmMotor"
    "State\022&\n\010mciState\030\005 \001(\0132\024.abb.egm.EgmMCI"
    "State\022\031\n\021mciConvergenceMet\030\006 \001(\010\022,\n\013test"
    "Signals\030\007 \001(\0132\027.abb.egm.EgmTestSignals\0226"
    "\n\016rapidExecState\030\010 \001(\0132\036.abb.egm.EgmRapi"
    "dCtrlExecState\0220\n\rmeasuredForce\030\t \001(\0132\031."
    "abb.egm.EgmMeasuredForce\022\027\n\017utilizationR"
    "ate\030\n \001(\001\"}\n\tEgmSensor\022\"\n\006header\030\001 \001(\0132\022"
    ".abb.egm.EgmHeader\022$\n\007planned\030\002 \001(\0132\023.ab"
    "b.egm.EgmPlanned\022&\n\010speedRef\030\003 \001(\0132\024.abb"
    ".egm.EgmSpeedRef\"_\n\021EgmSensorPathCorr\022\"\n"
    "\006header\030\001 \001(\0132\022.abb.egm.EgmHeader\022&\n\010pat"
    "hCorr\030\002 \001(\0132\024.abb.egm.EgmPathCorr"
};
static ::absl::once_flag descriptor_table_egm_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_egm_2eproto = {
    false,
    false,
    2433,
    descriptor_table_protodef_egm_2eproto,
    "egm.proto",
    &descriptor_table_egm_2eproto_once,
    nullptr,
    0,
    21,
    schemas,
    file_default_instances,
    TableStruct_egm_2eproto::offsets,
    file_level_metadata_egm_2eproto,
    file_level_enum_descriptors_egm_2eproto,
    file_level_service_descriptors_egm_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_egm_2eproto_getter() {
  return &descriptor_table_egm_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_egm_2eproto(&descriptor_table_egm_2eproto);
namespace abb {
namespace egm {
const ::google::protobuf::EnumDescriptor* EgmHeader_MessageType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_egm_2eproto);
  return file_level_enum_descriptors_egm_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t EgmHeader_MessageType_internal_data_[] = {
    327680u, 0u, };
bool EgmHeader_MessageType_IsValid(int value) {
  return 0 <= value && value <= 4;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr EgmHeader_MessageType EgmHeader::MSGTYPE_UNDEFINED;
constexpr EgmHeader_MessageType EgmHeader::MSGTYPE_COMMAND;
constexpr EgmHeader_MessageType EgmHeader::MSGTYPE_DATA;
constexpr EgmHeader_MessageType EgmHeader::MSGTYPE_CORRECTION;
constexpr EgmHeader_MessageType EgmHeader::MSGTYPE_PATH_CORRECTION;
constexpr EgmHeader_MessageType EgmHeader::MessageType_MIN;
constexpr EgmHeader_MessageType EgmHeader::MessageType_MAX;
constexpr int EgmHeader::MessageType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* EgmMotorState_MotorStateType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_egm_2eproto);
  return file_level_enum_descriptors_egm_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t EgmMotorState_MotorStateType_internal_data_[] = {
    196608u, 0u, };
bool EgmMotorState_MotorStateType_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr EgmMotorState_MotorStateType EgmMotorState::MOTORS_UNDEFINED;
constexpr EgmMotorState_MotorStateType EgmMotorState::MOTORS_ON;
constexpr EgmMotorState_MotorStateType EgmMotorState::MOTORS_OFF;
constexpr EgmMotorState_MotorStateType EgmMotorState::MotorStateType_MIN;
constexpr EgmMotorState_MotorStateType EgmMotorState::MotorStateType_MAX;
constexpr int EgmMotorState::MotorStateType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* EgmMCIState_MCIStateType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_egm_2eproto);
  return file_level_enum_descriptors_egm_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t EgmMCIState_MCIStateType_internal_data_[] = {
    262144u, 0u, };
bool EgmMCIState_MCIStateType_IsValid(int value) {
  return 0 <= value && value <= 3;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr EgmMCIState_MCIStateType EgmMCIState::MCI_UNDEFINED;
constexpr EgmMCIState_MCIStateType EgmMCIState::MCI_ERROR;
constexpr EgmMCIState_MCIStateType EgmMCIState::MCI_STOPPED;
constexpr EgmMCIState_MCIStateType EgmMCIState::MCI_RUNNING;
constexpr EgmMCIState_MCIStateType EgmMCIState::MCIStateType_MIN;
constexpr EgmMCIState_MCIStateType EgmMCIState::MCIStateType_MAX;
constexpr int EgmMCIState::MCIStateType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* EgmRapidCtrlExecState_RapidCtrlExecStateType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_egm_2eproto);
  return file_level_enum_descriptors_egm_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t EgmRapidCtrlExecState_RapidCtrlExecStateType_internal_data_[] = {
    196608u, 0u, };
bool EgmRapidCtrlExecState_RapidCtrlExecStateType_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr EgmRapidCtrlExecState_RapidCtrlExecStateType EgmRapidCtrlExecState::RAPID_UNDEFINED;
constexpr EgmRapidCtrlExecState_RapidCtrlExecStateType EgmRapidCtrlExecState::RAPID_STOPPED;
constexpr EgmRapidCtrlExecState_RapidCtrlExecStateType EgmRapidCtrlExecState::RAPID_RUNNING;
constexpr EgmRapidCtrlExecState_RapidCtrlExecStateType EgmRapidCtrlExecState::RapidCtrlExecStateType_MIN;
constexpr EgmRapidCtrlExecState_RapidCtrlExecStateType EgmRapidCtrlExecState::RapidCtrlExecStateType_MAX;
constexpr int EgmRapidCtrlExecState::RapidCtrlExecStateType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class EgmHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<EgmHeader>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EgmHeader, _impl_._has_bits_);
  static void set_has_seqno(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mtype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

EgmHeader::EgmHeader(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.EgmHeader)
}
EgmHeader::EgmHeader(
    ::google::protobuf::Arena* arena, const EgmHeader& from)
    : EgmHeader(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE EgmHeader::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void EgmHeader::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, seqno_),
           0,
           offsetof(Impl_, mtype_) -
               offsetof(Impl_, seqno_) +
               sizeof(Impl_::mtype_));
}
EgmHeader::~EgmHeader() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmHeader)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EgmHeader::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EgmHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmHeader)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.seqno_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.mtype_) -
        reinterpret_cast<char*>(&_impl_.seqno_)) + sizeof(_impl_.mtype_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EgmHeader::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> EgmHeader::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EgmHeader, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_EgmHeader_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 seqno = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EgmHeader, _impl_.seqno_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(EgmHeader, _impl_.seqno_)}},
    // optional uint32 tm = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EgmHeader, _impl_.tm_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(EgmHeader, _impl_.tm_)}},
    // optional .abb.egm.EgmHeader.MessageType mtype = 3 [default = MSGTYPE_UNDEFINED];
    {::_pbi::TcParser::FastEr0S1,
     {24, 2, 4, PROTOBUF_FIELD_OFFSET(EgmHeader, _impl_.mtype_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 seqno = 1;
    {PROTOBUF_FIELD_OFFSET(EgmHeader, _impl_.seqno_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 tm = 2;
    {PROTOBUF_FIELD_OFFSET(EgmHeader, _impl_.tm_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .abb.egm.EgmHeader.MessageType mtype = 3 [default = MSGTYPE_UNDEFINED];
    {PROTOBUF_FIELD_OFFSET(EgmHeader, _impl_.mtype_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
  }}, {{
    {0, 5},
  }}, {{
  }},
};

::uint8_t* EgmHeader::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmHeader)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 seqno = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_seqno(), target);
  }

  // optional uint32 tm = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_tm(), target);
  }

  // optional .abb.egm.EgmHeader.MessageType mtype = 3 [default = MSGTYPE_UNDEFINED];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_mtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmHeader)
  return target;
}

::size_t EgmHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmHeader)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 seqno = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_seqno());
    }

    // optional uint32 tm = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_tm());
    }

    // optional .abb.egm.EgmHeader.MessageType mtype = 3 [default = MSGTYPE_UNDEFINED];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_mtype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EgmHeader::_class_data_ = {
    EgmHeader::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EgmHeader::GetClassData() const {
  return &_class_data_;
}

void EgmHeader::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EgmHeader*>(&to_msg);
  auto& from = static_cast<const EgmHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmHeader)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.seqno_ = from._impl_.seqno_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tm_ = from._impl_.tm_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mtype_ = from._impl_.mtype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EgmHeader::CopyFrom(const EgmHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EgmHeader::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* EgmHeader::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EgmHeader::InternalSwap(EgmHeader* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EgmHeader, _impl_.mtype_)
      + sizeof(EgmHeader::_impl_.mtype_)
      - PROTOBUF_FIELD_OFFSET(EgmHeader, _impl_.seqno_)>(
          reinterpret_cast<char*>(&_impl_.seqno_),
          reinterpret_cast<char*>(&other->_impl_.seqno_));
}

::google::protobuf::Metadata EgmHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_2eproto_getter, &descriptor_table_egm_2eproto_once,
      file_level_metadata_egm_2eproto[0]);
}
// ===================================================================

class EgmCartesian::_Internal {
 public:
  using HasBits = decltype(std::declval<EgmCartesian>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EgmCartesian, _impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

EgmCartesian::EgmCartesian(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.EgmCartesian)
}
EgmCartesian::EgmCartesian(
    ::google::protobuf::Arena* arena, const EgmCartesian& from)
    : EgmCartesian(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE EgmCartesian::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void EgmCartesian::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, z_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::z_));
}
EgmCartesian::~EgmCartesian() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmCartesian)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EgmCartesian::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EgmCartesian::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmCartesian)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.x_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.z_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EgmCartesian::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> EgmCartesian::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EgmCartesian, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_EgmCartesian_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required double x = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 0, 0, PROTOBUF_FIELD_OFFSET(EgmCartesian, _impl_.x_)}},
    // required double y = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 1, 0, PROTOBUF_FIELD_OFFSET(EgmCartesian, _impl_.y_)}},
    // required double z = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 2, 0, PROTOBUF_FIELD_OFFSET(EgmCartesian, _impl_.z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required double x = 1;
    {PROTOBUF_FIELD_OFFSET(EgmCartesian, _impl_.x_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // required double y = 2;
    {PROTOBUF_FIELD_OFFSET(EgmCartesian, _impl_.y_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // required double z = 3;
    {PROTOBUF_FIELD_OFFSET(EgmCartesian, _impl_.z_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* EgmCartesian::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmCartesian)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_x(), target);
  }

  // required double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_y(), target);
  }

  // required double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmCartesian)
  return target;
}

::size_t EgmCartesian::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmCartesian)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // required double x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }

    // required double y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

    // required double z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EgmCartesian::_class_data_ = {
    EgmCartesian::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EgmCartesian::GetClassData() const {
  return &_class_data_;
}

void EgmCartesian::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EgmCartesian*>(&to_msg);
  auto& from = static_cast<const EgmCartesian&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmCartesian)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.z_ = from._impl_.z_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EgmCartesian::CopyFrom(const EgmCartesian& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmCartesian)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EgmCartesian::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) {
    return false;
  }
  return true;
}

::_pbi::CachedSize* EgmCartesian::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EgmCartesian::InternalSwap(EgmCartesian* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EgmCartesian, _impl_.z_)
      + sizeof(EgmCartesian::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(EgmCartesian, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata EgmCartesian::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_2eproto_getter, &descriptor_table_egm_2eproto_once,
      file_level_metadata_egm_2eproto[1]);
}
// ===================================================================

class EgmQuaternion::_Internal {
 public:
  using HasBits = decltype(std::declval<EgmQuaternion>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EgmQuaternion, _impl_._has_bits_);
  static void set_has_u0(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_u1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_u2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_u3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

EgmQuaternion::EgmQuaternion(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.EgmQuaternion)
}
EgmQuaternion::EgmQuaternion(
    ::google::protobuf::Arena* arena, const EgmQuaternion& from)
    : EgmQuaternion(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE EgmQuaternion::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void EgmQuaternion::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, u0_),
           0,
           offsetof(Impl_, u3_) -
               offsetof(Impl_, u0_) +
               sizeof(Impl_::u3_));
}
EgmQuaternion::~EgmQuaternion() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmQuaternion)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EgmQuaternion::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EgmQuaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmQuaternion)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.u0_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.u3_) -
        reinterpret_cast<char*>(&_impl_.u0_)) + sizeof(_impl_.u3_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EgmQuaternion::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> EgmQuaternion::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EgmQuaternion, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_EgmQuaternion_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // required double u3 = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 3, 0, PROTOBUF_FIELD_OFFSET(EgmQuaternion, _impl_.u3_)}},
    // required double u0 = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 0, 0, PROTOBUF_FIELD_OFFSET(EgmQuaternion, _impl_.u0_)}},
    // required double u1 = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 1, 0, PROTOBUF_FIELD_OFFSET(EgmQuaternion, _impl_.u1_)}},
    // required double u2 = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 2, 0, PROTOBUF_FIELD_OFFSET(EgmQuaternion, _impl_.u2_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required double u0 = 1;
    {PROTOBUF_FIELD_OFFSET(EgmQuaternion, _impl_.u0_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // required double u1 = 2;
    {PROTOBUF_FIELD_OFFSET(EgmQuaternion, _impl_.u1_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // required double u2 = 3;
    {PROTOBUF_FIELD_OFFSET(EgmQuaternion, _impl_.u2_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // required double u3 = 4;
    {PROTOBUF_FIELD_OFFSET(EgmQuaternion, _impl_.u3_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* EgmQuaternion::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmQuaternion)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required double u0 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_u0(), target);
  }

  // required double u1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_u1(), target);
  }

  // required double u2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_u2(), target);
  }

  // required double u3 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_u3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmQuaternion)
  return target;
}

::size_t EgmQuaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmQuaternion)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // required double u0 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }

    // required double u1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

    // required double u2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }

    // required double u3 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EgmQuaternion::_class_data_ = {
    EgmQuaternion::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EgmQuaternion::GetClassData() const {
  return &_class_data_;
}

void EgmQuaternion::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EgmQuaternion*>(&to_msg);
  auto& from = static_cast<const EgmQuaternion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmQuaternion)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.u0_ = from._impl_.u0_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.u1_ = from._impl_.u1_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.u2_ = from._impl_.u2_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.u3_ = from._impl_.u3_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EgmQuaternion::CopyFrom(const EgmQuaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmQuaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EgmQuaternion::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) {
    return false;
  }
  return true;
}

::_pbi::CachedSize* EgmQuaternion::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EgmQuaternion::InternalSwap(EgmQuaternion* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EgmQuaternion, _impl_.u3_)
      + sizeof(EgmQuaternion::_impl_.u3_)
      - PROTOBUF_FIELD_OFFSET(EgmQuaternion, _impl_.u0_)>(
          reinterpret_cast<char*>(&_impl_.u0_),
          reinterpret_cast<char*>(&other->_impl_.u0_));
}

::google::protobuf::Metadata EgmQuaternion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_2eproto_getter, &descriptor_table_egm_2eproto_once,
      file_level_metadata_egm_2eproto[2]);
}
// ===================================================================

class EgmEuler::_Internal {
 public:
  using HasBits = decltype(std::declval<EgmEuler>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EgmEuler, _impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

EgmEuler::EgmEuler(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.EgmEuler)
}
EgmEuler::EgmEuler(
    ::google::protobuf::Arena* arena, const EgmEuler& from)
    : EgmEuler(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE EgmEuler::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void EgmEuler::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, z_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::z_));
}
EgmEuler::~EgmEuler() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmEuler)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EgmEuler::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EgmEuler::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmEuler)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.x_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.z_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EgmEuler::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> EgmEuler::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EgmEuler, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_EgmEuler_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required double x = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 0, 0, PROTOBUF_FIELD_OFFSET(EgmEuler, _impl_.x_)}},
    // required double y = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 1, 0, PROTOBUF_FIELD_OFFSET(EgmEuler, _impl_.y_)}},
    // required double z = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 2, 0, PROTOBUF_FIELD_OFFSET(EgmEuler, _impl_.z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required double x = 1;
    {PROTOBUF_FIELD_OFFSET(EgmEuler, _impl_.x_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // required double y = 2;
    {PROTOBUF_FIELD_OFFSET(EgmEuler, _impl_.y_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // required double z = 3;
    {PROTOBUF_FIELD_OFFSET(EgmEuler, _impl_.z_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* EgmEuler::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmEuler)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_x(), target);
  }

  // required double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_y(), target);
  }

  // required double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmEuler)
  return target;
}

::size_t EgmEuler::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmEuler)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // required double x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }

    // required double y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

    // required double z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EgmEuler::_class_data_ = {
    EgmEuler::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EgmEuler::GetClassData() const {
  return &_class_data_;
}

void EgmEuler::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EgmEuler*>(&to_msg);
  auto& from = static_cast<const EgmEuler&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmEuler)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.z_ = from._impl_.z_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EgmEuler::CopyFrom(const EgmEuler& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmEuler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EgmEuler::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) {
    return false;
  }
  return true;
}

::_pbi::CachedSize* EgmEuler::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EgmEuler::InternalSwap(EgmEuler* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EgmEuler, _impl_.z_)
      + sizeof(EgmEuler::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(EgmEuler, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata EgmEuler::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_2eproto_getter, &descriptor_table_egm_2eproto_once,
      file_level_metadata_egm_2eproto[3]);
}
// ===================================================================

class EgmClock::_Internal {
 public:
  using HasBits = decltype(std::declval<EgmClock>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EgmClock, _impl_._has_bits_);
  static void set_has_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

EgmClock::EgmClock(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.EgmClock)
}
EgmClock::EgmClock(
    ::google::protobuf::Arena* arena, const EgmClock& from)
    : EgmClock(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE EgmClock::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void EgmClock::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, sec_),
           0,
           offsetof(Impl_, usec_) -
               offsetof(Impl_, sec_) +
               sizeof(Impl_::usec_));
}
EgmClock::~EgmClock() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmClock)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EgmClock::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EgmClock::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmClock)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.sec_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.usec_) -
        reinterpret_cast<char*>(&_impl_.sec_)) + sizeof(_impl_.usec_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EgmClock::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> EgmClock::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EgmClock, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_EgmClock_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // required uint64 usec = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(EgmClock, _impl_.usec_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(EgmClock, _impl_.usec_)}},
    // required uint64 sec = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(EgmClock, _impl_.sec_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(EgmClock, _impl_.sec_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required uint64 sec = 1;
    {PROTOBUF_FIELD_OFFSET(EgmClock, _impl_.sec_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // required uint64 usec = 2;
    {PROTOBUF_FIELD_OFFSET(EgmClock, _impl_.usec_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* EgmClock::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmClock)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 sec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_sec(), target);
  }

  // required uint64 usec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_usec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmClock)
  return target;
}

::size_t EgmClock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmClock)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // required uint64 sec = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_sec());
    }

    // required uint64 usec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_usec());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EgmClock::_class_data_ = {
    EgmClock::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EgmClock::GetClassData() const {
  return &_class_data_;
}

void EgmClock::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EgmClock*>(&to_msg);
  auto& from = static_cast<const EgmClock&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmClock)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.sec_ = from._impl_.sec_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.usec_ = from._impl_.usec_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EgmClock::CopyFrom(const EgmClock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmClock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EgmClock::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) {
    return false;
  }
  return true;
}

::_pbi::CachedSize* EgmClock::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EgmClock::InternalSwap(EgmClock* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EgmClock, _impl_.usec_)
      + sizeof(EgmClock::_impl_.usec_)
      - PROTOBUF_FIELD_OFFSET(EgmClock, _impl_.sec_)>(
          reinterpret_cast<char*>(&_impl_.sec_),
          reinterpret_cast<char*>(&other->_impl_.sec_));
}

::google::protobuf::Metadata EgmClock::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_2eproto_getter, &descriptor_table_egm_2eproto_once,
      file_level_metadata_egm_2eproto[4]);
}
// ===================================================================

class EgmPose::_Internal {
 public:
  using HasBits = decltype(std::declval<EgmPose>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EgmPose, _impl_._has_bits_);
  static const ::abb::egm::EgmCartesian& pos(const EgmPose* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::egm::EgmQuaternion& orient(const EgmPose* msg);
  static void set_has_orient(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::abb::egm::EgmEuler& euler(const EgmPose* msg);
  static void set_has_euler(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::abb::egm::EgmCartesian& EgmPose::_Internal::pos(const EgmPose* msg) {
  return *msg->_impl_.pos_;
}
const ::abb::egm::EgmQuaternion& EgmPose::_Internal::orient(const EgmPose* msg) {
  return *msg->_impl_.orient_;
}
const ::abb::egm::EgmEuler& EgmPose::_Internal::euler(const EgmPose* msg) {
  return *msg->_impl_.euler_;
}
EgmPose::EgmPose(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.EgmPose)
}
inline PROTOBUF_NDEBUG_INLINE EgmPose::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

EgmPose::EgmPose(
    ::google::protobuf::Arena* arena,
    const EgmPose& from)
    : ::google::protobuf::Message(arena) {
  EgmPose* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.pos_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::abb::egm::EgmCartesian>(arena, *from._impl_.pos_)
                : nullptr;
  _impl_.orient_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::abb::egm::EgmQuaternion>(arena, *from._impl_.orient_)
                : nullptr;
  _impl_.euler_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::abb::egm::EgmEuler>(arena, *from._impl_.euler_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:abb.egm.EgmPose)
}
inline PROTOBUF_NDEBUG_INLINE EgmPose::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void EgmPose::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pos_),
           0,
           offsetof(Impl_, euler_) -
               offsetof(Impl_, pos_) +
               sizeof(Impl_::euler_));
}
EgmPose::~EgmPose() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmPose)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EgmPose::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.pos_;
  delete _impl_.orient_;
  delete _impl_.euler_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EgmPose::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmPose)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.pos_ != nullptr);
      _impl_.pos_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.orient_ != nullptr);
      _impl_.orient_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.euler_ != nullptr);
      _impl_.euler_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EgmPose::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> EgmPose::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EgmPose, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_EgmPose_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .abb.egm.EgmCartesian pos = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(EgmPose, _impl_.pos_)}},
    // optional .abb.egm.EgmQuaternion orient = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(EgmPose, _impl_.orient_)}},
    // optional .abb.egm.EgmEuler euler = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(EgmPose, _impl_.euler_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .abb.egm.EgmCartesian pos = 1;
    {PROTOBUF_FIELD_OFFSET(EgmPose, _impl_.pos_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.EgmQuaternion orient = 2;
    {PROTOBUF_FIELD_OFFSET(EgmPose, _impl_.orient_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.EgmEuler euler = 3;
    {PROTOBUF_FIELD_OFFSET(EgmPose, _impl_.euler_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::egm::EgmCartesian>()},
    {::_pbi::TcParser::GetTable<::abb::egm::EgmQuaternion>()},
    {::_pbi::TcParser::GetTable<::abb::egm::EgmEuler>()},
  }}, {{
  }},
};

::uint8_t* EgmPose::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmPose)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .abb.egm.EgmCartesian pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.EgmQuaternion orient = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::orient(this),
        _Internal::orient(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.EgmEuler euler = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::euler(this),
        _Internal::euler(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmPose)
  return target;
}

::size_t EgmPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmPose)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .abb.egm.EgmCartesian pos = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.pos_);
    }

    // optional .abb.egm.EgmQuaternion orient = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.orient_);
    }

    // optional .abb.egm.EgmEuler euler = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.euler_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EgmPose::_class_data_ = {
    EgmPose::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EgmPose::GetClassData() const {
  return &_class_data_;
}

void EgmPose::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EgmPose*>(&to_msg);
  auto& from = static_cast<const EgmPose&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmPose)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_pos()->::abb::egm::EgmCartesian::MergeFrom(
          from._internal_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_orient()->::abb::egm::EgmQuaternion::MergeFrom(
          from._internal_orient());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_euler()->::abb::egm::EgmEuler::MergeFrom(
          from._internal_euler());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EgmPose::CopyFrom(const EgmPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EgmPose::IsInitialized() const {
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!_impl_.pos_->IsInitialized()) return false;
  }
  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!_impl_.orient_->IsInitialized()) return false;
  }
  if ((_impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!_impl_.euler_->IsInitialized()) return false;
  }
  return true;
}

::_pbi::CachedSize* EgmPose::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EgmPose::InternalSwap(EgmPose* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EgmPose, _impl_.euler_)
      + sizeof(EgmPose::_impl_.euler_)
      - PROTOBUF_FIELD_OFFSET(EgmPose, _impl_.pos_)>(
          reinterpret_cast<char*>(&_impl_.pos_),
          reinterpret_cast<char*>(&other->_impl_.pos_));
}

::google::protobuf::Metadata EgmPose::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_2eproto_getter, &descriptor_table_egm_2eproto_once,
      file_level_metadata_egm_2eproto[5]);
}
// ===================================================================

class EgmCartesianSpeed::_Internal {
 public:
};

EgmCartesianSpeed::EgmCartesianSpeed(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.EgmCartesianSpeed)
}
inline PROTOBUF_NDEBUG_INLINE EgmCartesianSpeed::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : value_{visibility, arena, from.value_},
        _cached_size_{0} {}

EgmCartesianSpeed::EgmCartesianSpeed(
    ::google::protobuf::Arena* arena,
    const EgmCartesianSpeed& from)
    : ::google::protobuf::Message(arena) {
  EgmCartesianSpeed* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:abb.egm.EgmCartesianSpeed)
}
inline PROTOBUF_NDEBUG_INLINE EgmCartesianSpeed::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : value_{visibility, arena},
        _cached_size_{0} {}

inline void EgmCartesianSpeed::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
EgmCartesianSpeed::~EgmCartesianSpeed() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmCartesianSpeed)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EgmCartesianSpeed::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EgmCartesianSpeed::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmCartesianSpeed)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EgmCartesianSpeed::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> EgmCartesianSpeed::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_EgmCartesianSpeed_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated double value = 1;
    {::_pbi::TcParser::FastF64R1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(EgmCartesianSpeed, _impl_.value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated double value = 1;
    {PROTOBUF_FIELD_OFFSET(EgmCartesianSpeed, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* EgmCartesianSpeed::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmCartesianSpeed)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated double value = 1;
  for (int i = 0, n = this->_internal_value_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_value().Get(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmCartesianSpeed)
  return target;
}

::size_t EgmCartesianSpeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmCartesianSpeed)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double value = 1;
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_value_size())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_value_size());
    ;
    total_size += tag_size + data_size;
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EgmCartesianSpeed::_class_data_ = {
    EgmCartesianSpeed::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EgmCartesianSpeed::GetClassData() const {
  return &_class_data_;
}

void EgmCartesianSpeed::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EgmCartesianSpeed*>(&to_msg);
  auto& from = static_cast<const EgmCartesianSpeed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmCartesianSpeed)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_value()->MergeFrom(from._internal_value());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EgmCartesianSpeed::CopyFrom(const EgmCartesianSpeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmCartesianSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EgmCartesianSpeed::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* EgmCartesianSpeed::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EgmCartesianSpeed::InternalSwap(EgmCartesianSpeed* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
}

::google::protobuf::Metadata EgmCartesianSpeed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_2eproto_getter, &descriptor_table_egm_2eproto_once,
      file_level_metadata_egm_2eproto[6]);
}
// ===================================================================

class EgmJoints::_Internal {
 public:
};

EgmJoints::EgmJoints(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.EgmJoints)
}
inline PROTOBUF_NDEBUG_INLINE EgmJoints::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : joints_{visibility, arena, from.joints_},
        _cached_size_{0} {}

EgmJoints::EgmJoints(
    ::google::protobuf::Arena* arena,
    const EgmJoints& from)
    : ::google::protobuf::Message(arena) {
  EgmJoints* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:abb.egm.EgmJoints)
}
inline PROTOBUF_NDEBUG_INLINE EgmJoints::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : joints_{visibility, arena},
        _cached_size_{0} {}

inline void EgmJoints::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
EgmJoints::~EgmJoints() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmJoints)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EgmJoints::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EgmJoints::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmJoints)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.joints_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EgmJoints::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> EgmJoints::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_EgmJoints_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated double joints = 1;
    {::_pbi::TcParser::FastF64R1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(EgmJoints, _impl_.joints_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated double joints = 1;
    {PROTOBUF_FIELD_OFFSET(EgmJoints, _impl_.joints_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* EgmJoints::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmJoints)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated double joints = 1;
  for (int i = 0, n = this->_internal_joints_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_joints().Get(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmJoints)
  return target;
}

::size_t EgmJoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmJoints)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double joints = 1;
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_joints_size())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_joints_size());
    ;
    total_size += tag_size + data_size;
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EgmJoints::_class_data_ = {
    EgmJoints::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EgmJoints::GetClassData() const {
  return &_class_data_;
}

void EgmJoints::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EgmJoints*>(&to_msg);
  auto& from = static_cast<const EgmJoints&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmJoints)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_joints()->MergeFrom(from._internal_joints());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EgmJoints::CopyFrom(const EgmJoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmJoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EgmJoints::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* EgmJoints::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EgmJoints::InternalSwap(EgmJoints* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.joints_.InternalSwap(&other->_impl_.joints_);
}

::google::protobuf::Metadata EgmJoints::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_2eproto_getter, &descriptor_table_egm_2eproto_once,
      file_level_metadata_egm_2eproto[7]);
}
// ===================================================================

class EgmExternalJoints::_Internal {
 public:
};

EgmExternalJoints::EgmExternalJoints(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.EgmExternalJoints)
}
inline PROTOBUF_NDEBUG_INLINE EgmExternalJoints::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : joints_{visibility, arena, from.joints_},
        _cached_size_{0} {}

EgmExternalJoints::EgmExternalJoints(
    ::google::protobuf::Arena* arena,
    const EgmExternalJoints& from)
    : ::google::protobuf::Message(arena) {
  EgmExternalJoints* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:abb.egm.EgmExternalJoints)
}
inline PROTOBUF_NDEBUG_INLINE EgmExternalJoints::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : joints_{visibility, arena},
        _cached_size_{0} {}

inline void EgmExternalJoints::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
EgmExternalJoints::~EgmExternalJoints() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmExternalJoints)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EgmExternalJoints::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EgmExternalJoints::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmExternalJoints)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.joints_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EgmExternalJoints::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> EgmExternalJoints::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_EgmExternalJoints_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated double joints = 1;
    {::_pbi::TcParser::FastF64R1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(EgmExternalJoints, _impl_.joints_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated double joints = 1;
    {PROTOBUF_FIELD_OFFSET(EgmExternalJoints, _impl_.joints_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* EgmExternalJoints::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmExternalJoints)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated double joints = 1;
  for (int i = 0, n = this->_internal_joints_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_joints().Get(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmExternalJoints)
  return target;
}

::size_t EgmExternalJoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmExternalJoints)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double joints = 1;
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_joints_size())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_joints_size());
    ;
    total_size += tag_size + data_size;
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EgmExternalJoints::_class_data_ = {
    EgmExternalJoints::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EgmExternalJoints::GetClassData() const {
  return &_class_data_;
}

void EgmExternalJoints::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EgmExternalJoints*>(&to_msg);
  auto& from = static_cast<const EgmExternalJoints&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmExternalJoints)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_joints()->MergeFrom(from._internal_joints());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EgmExternalJoints::CopyFrom(const EgmExternalJoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmExternalJoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EgmExternalJoints::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* EgmExternalJoints::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EgmExternalJoints::InternalSwap(EgmExternalJoints* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.joints_.InternalSwap(&other->_impl_.joints_);
}

::google::protobuf::Metadata EgmExternalJoints::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_2eproto_getter, &descriptor_table_egm_2eproto_once,
      file_level_metadata_egm_2eproto[8]);
}
// ===================================================================

class EgmPlanned::_Internal {
 public:
  using HasBits = decltype(std::declval<EgmPlanned>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EgmPlanned, _impl_._has_bits_);
  static const ::abb::egm::EgmJoints& joints(const EgmPlanned* msg);
  static void set_has_joints(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::egm::EgmPose& cartesian(const EgmPlanned* msg);
  static void set_has_cartesian(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::abb::egm::EgmJoints& externaljoints(const EgmPlanned* msg);
  static void set_has_externaljoints(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::abb::egm::EgmClock& time(const EgmPlanned* msg);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::abb::egm::EgmJoints& EgmPlanned::_Internal::joints(const EgmPlanned* msg) {
  return *msg->_impl_.joints_;
}
const ::abb::egm::EgmPose& EgmPlanned::_Internal::cartesian(const EgmPlanned* msg) {
  return *msg->_impl_.cartesian_;
}
const ::abb::egm::EgmJoints& EgmPlanned::_Internal::externaljoints(const EgmPlanned* msg) {
  return *msg->_impl_.externaljoints_;
}
const ::abb::egm::EgmClock& EgmPlanned::_Internal::time(const EgmPlanned* msg) {
  return *msg->_impl_.time_;
}
EgmPlanned::EgmPlanned(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.EgmPlanned)
}
inline PROTOBUF_NDEBUG_INLINE EgmPlanned::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

EgmPlanned::EgmPlanned(
    ::google::protobuf::Arena* arena,
    const EgmPlanned& from)
    : ::google::protobuf::Message(arena) {
  EgmPlanned* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.joints_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::abb::egm::EgmJoints>(arena, *from._impl_.joints_)
                : nullptr;
  _impl_.cartesian_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::abb::egm::EgmPose>(arena, *from._impl_.cartesian_)
                : nullptr;
  _impl_.externaljoints_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::abb::egm::EgmJoints>(arena, *from._impl_.externaljoints_)
                : nullptr;
  _impl_.time_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::abb::egm::EgmClock>(arena, *from._impl_.time_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:abb.egm.EgmPlanned)
}
inline PROTOBUF_NDEBUG_INLINE EgmPlanned::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void EgmPlanned::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, joints_),
           0,
           offsetof(Impl_, time_) -
               offsetof(Impl_, joints_) +
               sizeof(Impl_::time_));
}
EgmPlanned::~EgmPlanned() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmPlanned)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EgmPlanned::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.joints_;
  delete _impl_.cartesian_;
  delete _impl_.externaljoints_;
  delete _impl_.time_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EgmPlanned::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmPlanned)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.joints_ != nullptr);
      _impl_.joints_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.cartesian_ != nullptr);
      _impl_.cartesian_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.externaljoints_ != nullptr);
      _impl_.externaljoints_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.time_ != nullptr);
      _impl_.time_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EgmPlanned::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2> EgmPlanned::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EgmPlanned, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_EgmPlanned_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional .abb.egm.EgmClock time = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(EgmPlanned, _impl_.time_)}},
    // optional .abb.egm.EgmJoints joints = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(EgmPlanned, _impl_.joints_)}},
    // optional .abb.egm.EgmPose cartesian = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(EgmPlanned, _impl_.cartesian_)}},
    // optional .abb.egm.EgmJoints externalJoints = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(EgmPlanned, _impl_.externaljoints_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .abb.egm.EgmJoints joints = 1;
    {PROTOBUF_FIELD_OFFSET(EgmPlanned, _impl_.joints_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.EgmPose cartesian = 2;
    {PROTOBUF_FIELD_OFFSET(EgmPlanned, _impl_.cartesian_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.EgmJoints externalJoints = 3;
    {PROTOBUF_FIELD_OFFSET(EgmPlanned, _impl_.externaljoints_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.EgmClock time = 4;
    {PROTOBUF_FIELD_OFFSET(EgmPlanned, _impl_.time_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::egm::EgmJoints>()},
    {::_pbi::TcParser::GetTable<::abb::egm::EgmPose>()},
    {::_pbi::TcParser::GetTable<::abb::egm::EgmJoints>()},
    {::_pbi::TcParser::GetTable<::abb::egm::EgmClock>()},
  }}, {{
  }},
};

::uint8_t* EgmPlanned::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmPlanned)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .abb.egm.EgmJoints joints = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::joints(this),
        _Internal::joints(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.EgmPose cartesian = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::cartesian(this),
        _Internal::cartesian(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.EgmJoints externalJoints = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::externaljoints(this),
        _Internal::externaljoints(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.EgmClock time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmPlanned)
  return target;
}

::size_t EgmPlanned::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmPlanned)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .abb.egm.EgmJoints joints = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.joints_);
    }

    // optional .abb.egm.EgmPose cartesian = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.cartesian_);
    }

    // optional .abb.egm.EgmJoints externalJoints = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.externaljoints_);
    }

    // optional .abb.egm.EgmClock time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.time_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EgmPlanned::_class_data_ = {
    EgmPlanned::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EgmPlanned::GetClassData() const {
  return &_class_data_;
}

void EgmPlanned::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EgmPlanned*>(&to_msg);
  auto& from = static_cast<const EgmPlanned&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmPlanned)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_joints()->::abb::egm::EgmJoints::MergeFrom(
          from._internal_joints());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cartesian()->::abb::egm::EgmPose::MergeFrom(
          from._internal_cartesian());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_externaljoints()->::abb::egm::EgmJoints::MergeFrom(
          from._internal_externaljoints());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_time()->::abb::egm::EgmClock::MergeFrom(
          from._internal_time());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EgmPlanned::CopyFrom(const EgmPlanned& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmPlanned)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EgmPlanned::IsInitialized() const {
  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!_impl_.cartesian_->IsInitialized()) return false;
  }
  if ((_impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (!_impl_.time_->IsInitialized()) return false;
  }
  return true;
}

::_pbi::CachedSize* EgmPlanned::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EgmPlanned::InternalSwap(EgmPlanned* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EgmPlanned, _impl_.time_)
      + sizeof(EgmPlanned::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(EgmPlanned, _impl_.joints_)>(
          reinterpret_cast<char*>(&_impl_.joints_),
          reinterpret_cast<char*>(&other->_impl_.joints_));
}

::google::protobuf::Metadata EgmPlanned::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_2eproto_getter, &descriptor_table_egm_2eproto_once,
      file_level_metadata_egm_2eproto[9]);
}
// ===================================================================

class EgmSpeedRef::_Internal {
 public:
  using HasBits = decltype(std::declval<EgmSpeedRef>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EgmSpeedRef, _impl_._has_bits_);
  static const ::abb::egm::EgmJoints& joints(const EgmSpeedRef* msg);
  static void set_has_joints(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::egm::EgmCartesianSpeed& cartesians(const EgmSpeedRef* msg);
  static void set_has_cartesians(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::abb::egm::EgmJoints& externaljoints(const EgmSpeedRef* msg);
  static void set_has_externaljoints(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::abb::egm::EgmJoints& EgmSpeedRef::_Internal::joints(const EgmSpeedRef* msg) {
  return *msg->_impl_.joints_;
}
const ::abb::egm::EgmCartesianSpeed& EgmSpeedRef::_Internal::cartesians(const EgmSpeedRef* msg) {
  return *msg->_impl_.cartesians_;
}
const ::abb::egm::EgmJoints& EgmSpeedRef::_Internal::externaljoints(const EgmSpeedRef* msg) {
  return *msg->_impl_.externaljoints_;
}
EgmSpeedRef::EgmSpeedRef(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.EgmSpeedRef)
}
inline PROTOBUF_NDEBUG_INLINE EgmSpeedRef::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

EgmSpeedRef::EgmSpeedRef(
    ::google::protobuf::Arena* arena,
    const EgmSpeedRef& from)
    : ::google::protobuf::Message(arena) {
  EgmSpeedRef* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.joints_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::abb::egm::EgmJoints>(arena, *from._impl_.joints_)
                : nullptr;
  _impl_.cartesians_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::abb::egm::EgmCartesianSpeed>(arena, *from._impl_.cartesians_)
                : nullptr;
  _impl_.externaljoints_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::abb::egm::EgmJoints>(arena, *from._impl_.externaljoints_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:abb.egm.EgmSpeedRef)
}
inline PROTOBUF_NDEBUG_INLINE EgmSpeedRef::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void EgmSpeedRef::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, joints_),
           0,
           offsetof(Impl_, externaljoints_) -
               offsetof(Impl_, joints_) +
               sizeof(Impl_::externaljoints_));
}
EgmSpeedRef::~EgmSpeedRef() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmSpeedRef)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EgmSpeedRef::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.joints_;
  delete _impl_.cartesians_;
  delete _impl_.externaljoints_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EgmSpeedRef::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmSpeedRef)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.joints_ != nullptr);
      _impl_.joints_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.cartesians_ != nullptr);
      _impl_.cartesians_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.externaljoints_ != nullptr);
      _impl_.externaljoints_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EgmSpeedRef::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> EgmSpeedRef::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EgmSpeedRef, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_EgmSpeedRef_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .abb.egm.EgmJoints joints = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(EgmSpeedRef, _impl_.joints_)}},
    // optional .abb.egm.EgmCartesianSpeed cartesians = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(EgmSpeedRef, _impl_.cartesians_)}},
    // optional .abb.egm.EgmJoints externalJoints = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(EgmSpeedRef, _impl_.externaljoints_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .abb.egm.EgmJoints joints = 1;
    {PROTOBUF_FIELD_OFFSET(EgmSpeedRef, _impl_.joints_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.EgmCartesianSpeed cartesians = 2;
    {PROTOBUF_FIELD_OFFSET(EgmSpeedRef, _impl_.cartesians_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.EgmJoints externalJoints = 3;
    {PROTOBUF_FIELD_OFFSET(EgmSpeedRef, _impl_.externaljoints_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::egm::EgmJoints>()},
    {::_pbi::TcParser::GetTable<::abb::egm::EgmCartesianSpeed>()},
    {::_pbi::TcParser::GetTable<::abb::egm::EgmJoints>()},
  }}, {{
  }},
};

::uint8_t* EgmSpeedRef::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmSpeedRef)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .abb.egm.EgmJoints joints = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::joints(this),
        _Internal::joints(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.EgmCartesianSpeed cartesians = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::cartesians(this),
        _Internal::cartesians(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.EgmJoints externalJoints = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::externaljoints(this),
        _Internal::externaljoints(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmSpeedRef)
  return target;
}

::size_t EgmSpeedRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmSpeedRef)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .abb.egm.EgmJoints joints = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.joints_);
    }

    // optional .abb.egm.EgmCartesianSpeed cartesians = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.cartesians_);
    }

    // optional .abb.egm.EgmJoints externalJoints = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.externaljoints_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EgmSpeedRef::_class_data_ = {
    EgmSpeedRef::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EgmSpeedRef::GetClassData() const {
  return &_class_data_;
}

void EgmSpeedRef::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EgmSpeedRef*>(&to_msg);
  auto& from = static_cast<const EgmSpeedRef&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmSpeedRef)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_joints()->::abb::egm::EgmJoints::MergeFrom(
          from._internal_joints());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cartesians()->::abb::egm::EgmCartesianSpeed::MergeFrom(
          from._internal_cartesians());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_externaljoints()->::abb::egm::EgmJoints::MergeFrom(
          from._internal_externaljoints());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EgmSpeedRef::CopyFrom(const EgmSpeedRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmSpeedRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EgmSpeedRef::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* EgmSpeedRef::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EgmSpeedRef::InternalSwap(EgmSpeedRef* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EgmSpeedRef, _impl_.externaljoints_)
      + sizeof(EgmSpeedRef::_impl_.externaljoints_)
      - PROTOBUF_FIELD_OFFSET(EgmSpeedRef, _impl_.joints_)>(
          reinterpret_cast<char*>(&_impl_.joints_),
          reinterpret_cast<char*>(&other->_impl_.joints_));
}

::google::protobuf::Metadata EgmSpeedRef::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_2eproto_getter, &descriptor_table_egm_2eproto_once,
      file_level_metadata_egm_2eproto[10]);
}
// ===================================================================

class EgmPathCorr::_Internal {
 public:
  using HasBits = decltype(std::declval<EgmPathCorr>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EgmPathCorr, _impl_._has_bits_);
  static const ::abb::egm::EgmCartesian& pos(const EgmPathCorr* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_age(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::abb::egm::EgmCartesian& EgmPathCorr::_Internal::pos(const EgmPathCorr* msg) {
  return *msg->_impl_.pos_;
}
EgmPathCorr::EgmPathCorr(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.EgmPathCorr)
}
inline PROTOBUF_NDEBUG_INLINE EgmPathCorr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

EgmPathCorr::EgmPathCorr(
    ::google::protobuf::Arena* arena,
    const EgmPathCorr& from)
    : ::google::protobuf::Message(arena) {
  EgmPathCorr* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.pos_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::abb::egm::EgmCartesian>(arena, *from._impl_.pos_)
                : nullptr;
  _impl_.age_ = from._impl_.age_;

  // @@protoc_insertion_point(copy_constructor:abb.egm.EgmPathCorr)
}
inline PROTOBUF_NDEBUG_INLINE EgmPathCorr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void EgmPathCorr::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pos_),
           0,
           offsetof(Impl_, age_) -
               offsetof(Impl_, pos_) +
               sizeof(Impl_::age_));
}
EgmPathCorr::~EgmPathCorr() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmPathCorr)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EgmPathCorr::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.pos_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EgmPathCorr::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmPathCorr)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pos_ != nullptr);
    _impl_.pos_->Clear();
  }
  _impl_.age_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EgmPathCorr::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> EgmPathCorr::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EgmPathCorr, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_EgmPathCorr_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // required uint32 age = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EgmPathCorr, _impl_.age_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(EgmPathCorr, _impl_.age_)}},
    // required .abb.egm.EgmCartesian pos = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(EgmPathCorr, _impl_.pos_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .abb.egm.EgmCartesian pos = 1;
    {PROTOBUF_FIELD_OFFSET(EgmPathCorr, _impl_.pos_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // required uint32 age = 2;
    {PROTOBUF_FIELD_OFFSET(EgmPathCorr, _impl_.age_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::egm::EgmCartesian>()},
  }}, {{
  }},
};

::uint8_t* EgmPathCorr::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmPathCorr)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .abb.egm.EgmCartesian pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // required uint32 age = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_age(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmPathCorr)
  return target;
}

::size_t EgmPathCorr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmPathCorr)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // required .abb.egm.EgmCartesian pos = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.pos_);
    }

    // required uint32 age = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_age());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EgmPathCorr::_class_data_ = {
    EgmPathCorr::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EgmPathCorr::GetClassData() const {
  return &_class_data_;
}

void EgmPathCorr::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EgmPathCorr*>(&to_msg);
  auto& from = static_cast<const EgmPathCorr&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmPathCorr)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_pos()->::abb::egm::EgmCartesian::MergeFrom(
          from._internal_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.age_ = from._impl_.age_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EgmPathCorr::CopyFrom(const EgmPathCorr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmPathCorr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EgmPathCorr::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) {
    return false;
  }
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!_impl_.pos_->IsInitialized()) return false;
  }
  return true;
}

::_pbi::CachedSize* EgmPathCorr::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EgmPathCorr::InternalSwap(EgmPathCorr* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EgmPathCorr, _impl_.age_)
      + sizeof(EgmPathCorr::_impl_.age_)
      - PROTOBUF_FIELD_OFFSET(EgmPathCorr, _impl_.pos_)>(
          reinterpret_cast<char*>(&_impl_.pos_),
          reinterpret_cast<char*>(&other->_impl_.pos_));
}

::google::protobuf::Metadata EgmPathCorr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_2eproto_getter, &descriptor_table_egm_2eproto_once,
      file_level_metadata_egm_2eproto[11]);
}
// ===================================================================

class EgmFeedBack::_Internal {
 public:
  using HasBits = decltype(std::declval<EgmFeedBack>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EgmFeedBack, _impl_._has_bits_);
  static const ::abb::egm::EgmJoints& joints(const EgmFeedBack* msg);
  static void set_has_joints(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::egm::EgmPose& cartesian(const EgmFeedBack* msg);
  static void set_has_cartesian(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::abb::egm::EgmJoints& externaljoints(const EgmFeedBack* msg);
  static void set_has_externaljoints(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::abb::egm::EgmClock& time(const EgmFeedBack* msg);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::abb::egm::EgmJoints& EgmFeedBack::_Internal::joints(const EgmFeedBack* msg) {
  return *msg->_impl_.joints_;
}
const ::abb::egm::EgmPose& EgmFeedBack::_Internal::cartesian(const EgmFeedBack* msg) {
  return *msg->_impl_.cartesian_;
}
const ::abb::egm::EgmJoints& EgmFeedBack::_Internal::externaljoints(const EgmFeedBack* msg) {
  return *msg->_impl_.externaljoints_;
}
const ::abb::egm::EgmClock& EgmFeedBack::_Internal::time(const EgmFeedBack* msg) {
  return *msg->_impl_.time_;
}
EgmFeedBack::EgmFeedBack(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.EgmFeedBack)
}
inline PROTOBUF_NDEBUG_INLINE EgmFeedBack::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

EgmFeedBack::EgmFeedBack(
    ::google::protobuf::Arena* arena,
    const EgmFeedBack& from)
    : ::google::protobuf::Message(arena) {
  EgmFeedBack* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.joints_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::abb::egm::EgmJoints>(arena, *from._impl_.joints_)
                : nullptr;
  _impl_.cartesian_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::abb::egm::EgmPose>(arena, *from._impl_.cartesian_)
                : nullptr;
  _impl_.externaljoints_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::abb::egm::EgmJoints>(arena, *from._impl_.externaljoints_)
                : nullptr;
  _impl_.time_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::abb::egm::EgmClock>(arena, *from._impl_.time_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:abb.egm.EgmFeedBack)
}
inline PROTOBUF_NDEBUG_INLINE EgmFeedBack::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void EgmFeedBack::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, joints_),
           0,
           offsetof(Impl_, time_) -
               offsetof(Impl_, joints_) +
               sizeof(Impl_::time_));
}
EgmFeedBack::~EgmFeedBack() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmFeedBack)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EgmFeedBack::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.joints_;
  delete _impl_.cartesian_;
  delete _impl_.externaljoints_;
  delete _impl_.time_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EgmFeedBack::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmFeedBack)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.joints_ != nullptr);
      _impl_.joints_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.cartesian_ != nullptr);
      _impl_.cartesian_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.externaljoints_ != nullptr);
      _impl_.externaljoints_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.time_ != nullptr);
      _impl_.time_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EgmFeedBack::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2> EgmFeedBack::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EgmFeedBack, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_EgmFeedBack_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional .abb.egm.EgmClock time = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(EgmFeedBack, _impl_.time_)}},
    // optional .abb.egm.EgmJoints joints = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(EgmFeedBack, _impl_.joints_)}},
    // optional .abb.egm.EgmPose cartesian = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(EgmFeedBack, _impl_.cartesian_)}},
    // optional .abb.egm.EgmJoints externalJoints = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(EgmFeedBack, _impl_.externaljoints_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .abb.egm.EgmJoints joints = 1;
    {PROTOBUF_FIELD_OFFSET(EgmFeedBack, _impl_.joints_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.EgmPose cartesian = 2;
    {PROTOBUF_FIELD_OFFSET(EgmFeedBack, _impl_.cartesian_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.EgmJoints externalJoints = 3;
    {PROTOBUF_FIELD_OFFSET(EgmFeedBack, _impl_.externaljoints_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.EgmClock time = 4;
    {PROTOBUF_FIELD_OFFSET(EgmFeedBack, _impl_.time_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::egm::EgmJoints>()},
    {::_pbi::TcParser::GetTable<::abb::egm::EgmPose>()},
    {::_pbi::TcParser::GetTable<::abb::egm::EgmJoints>()},
    {::_pbi::TcParser::GetTable<::abb::egm::EgmClock>()},
  }}, {{
  }},
};

::uint8_t* EgmFeedBack::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmFeedBack)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .abb.egm.EgmJoints joints = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::joints(this),
        _Internal::joints(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.EgmPose cartesian = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::cartesian(this),
        _Internal::cartesian(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.EgmJoints externalJoints = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::externaljoints(this),
        _Internal::externaljoints(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.EgmClock time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmFeedBack)
  return target;
}

::size_t EgmFeedBack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmFeedBack)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .abb.egm.EgmJoints joints = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.joints_);
    }

    // optional .abb.egm.EgmPose cartesian = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.cartesian_);
    }

    // optional .abb.egm.EgmJoints externalJoints = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.externaljoints_);
    }

    // optional .abb.egm.EgmClock time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.time_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EgmFeedBack::_class_data_ = {
    EgmFeedBack::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EgmFeedBack::GetClassData() const {
  return &_class_data_;
}

void EgmFeedBack::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EgmFeedBack*>(&to_msg);
  auto& from = static_cast<const EgmFeedBack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmFeedBack)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_joints()->::abb::egm::EgmJoints::MergeFrom(
          from._internal_joints());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cartesian()->::abb::egm::EgmPose::MergeFrom(
          from._internal_cartesian());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_externaljoints()->::abb::egm::EgmJoints::MergeFrom(
          from._internal_externaljoints());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_time()->::abb::egm::EgmClock::MergeFrom(
          from._internal_time());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EgmFeedBack::CopyFrom(const EgmFeedBack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmFeedBack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EgmFeedBack::IsInitialized() const {
  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!_impl_.cartesian_->IsInitialized()) return false;
  }
  if ((_impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (!_impl_.time_->IsInitialized()) return false;
  }
  return true;
}

::_pbi::CachedSize* EgmFeedBack::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EgmFeedBack::InternalSwap(EgmFeedBack* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EgmFeedBack, _impl_.time_)
      + sizeof(EgmFeedBack::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(EgmFeedBack, _impl_.joints_)>(
          reinterpret_cast<char*>(&_impl_.joints_),
          reinterpret_cast<char*>(&other->_impl_.joints_));
}

::google::protobuf::Metadata EgmFeedBack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_2eproto_getter, &descriptor_table_egm_2eproto_once,
      file_level_metadata_egm_2eproto[12]);
}
// ===================================================================

class EgmMotorState::_Internal {
 public:
  using HasBits = decltype(std::declval<EgmMotorState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EgmMotorState, _impl_._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

EgmMotorState::EgmMotorState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.EgmMotorState)
}
EgmMotorState::EgmMotorState(
    ::google::protobuf::Arena* arena, const EgmMotorState& from)
    : EgmMotorState(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE EgmMotorState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void EgmMotorState::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.state_ = {};
}
EgmMotorState::~EgmMotorState() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmMotorState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EgmMotorState::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EgmMotorState::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmMotorState)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.state_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EgmMotorState::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> EgmMotorState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EgmMotorState, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_EgmMotorState_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // required .abb.egm.EgmMotorState.MotorStateType state = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 0, 2, PROTOBUF_FIELD_OFFSET(EgmMotorState, _impl_.state_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .abb.egm.EgmMotorState.MotorStateType state = 1;
    {PROTOBUF_FIELD_OFFSET(EgmMotorState, _impl_.state_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
  }}, {{
    {0, 3},
  }}, {{
  }},
};

::uint8_t* EgmMotorState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmMotorState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .abb.egm.EgmMotorState.MotorStateType state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmMotorState)
  return target;
}

::size_t EgmMotorState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmMotorState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // required .abb.egm.EgmMotorState.MotorStateType state = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EgmMotorState::_class_data_ = {
    EgmMotorState::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EgmMotorState::GetClassData() const {
  return &_class_data_;
}

void EgmMotorState::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EgmMotorState*>(&to_msg);
  auto& from = static_cast<const EgmMotorState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmMotorState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EgmMotorState::CopyFrom(const EgmMotorState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmMotorState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EgmMotorState::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) {
    return false;
  }
  return true;
}

::_pbi::CachedSize* EgmMotorState::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EgmMotorState::InternalSwap(EgmMotorState* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.state_, other->_impl_.state_);
}

::google::protobuf::Metadata EgmMotorState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_2eproto_getter, &descriptor_table_egm_2eproto_once,
      file_level_metadata_egm_2eproto[13]);
}
// ===================================================================

class EgmMCIState::_Internal {
 public:
  using HasBits = decltype(std::declval<EgmMCIState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EgmMCIState, _impl_._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

EgmMCIState::EgmMCIState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.EgmMCIState)
}
EgmMCIState::EgmMCIState(
    ::google::protobuf::Arena* arena, const EgmMCIState& from)
    : EgmMCIState(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE EgmMCIState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void EgmMCIState::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.state_ = {};
}
EgmMCIState::~EgmMCIState() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmMCIState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EgmMCIState::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EgmMCIState::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmMCIState)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.state_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EgmMCIState::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> EgmMCIState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EgmMCIState, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_EgmMCIState_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // required .abb.egm.EgmMCIState.MCIStateType state = 1 [default = MCI_UNDEFINED];
    {::_pbi::TcParser::FastEr0S1,
     {8, 0, 3, PROTOBUF_FIELD_OFFSET(EgmMCIState, _impl_.state_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .abb.egm.EgmMCIState.MCIStateType state = 1 [default = MCI_UNDEFINED];
    {PROTOBUF_FIELD_OFFSET(EgmMCIState, _impl_.state_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
  }}, {{
    {0, 4},
  }}, {{
  }},
};

::uint8_t* EgmMCIState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmMCIState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .abb.egm.EgmMCIState.MCIStateType state = 1 [default = MCI_UNDEFINED];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmMCIState)
  return target;
}

::size_t EgmMCIState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmMCIState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // required .abb.egm.EgmMCIState.MCIStateType state = 1 [default = MCI_UNDEFINED];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EgmMCIState::_class_data_ = {
    EgmMCIState::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EgmMCIState::GetClassData() const {
  return &_class_data_;
}

void EgmMCIState::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EgmMCIState*>(&to_msg);
  auto& from = static_cast<const EgmMCIState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmMCIState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EgmMCIState::CopyFrom(const EgmMCIState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmMCIState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EgmMCIState::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) {
    return false;
  }
  return true;
}

::_pbi::CachedSize* EgmMCIState::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EgmMCIState::InternalSwap(EgmMCIState* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.state_, other->_impl_.state_);
}

::google::protobuf::Metadata EgmMCIState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_2eproto_getter, &descriptor_table_egm_2eproto_once,
      file_level_metadata_egm_2eproto[14]);
}
// ===================================================================

class EgmRapidCtrlExecState::_Internal {
 public:
  using HasBits = decltype(std::declval<EgmRapidCtrlExecState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EgmRapidCtrlExecState, _impl_._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

EgmRapidCtrlExecState::EgmRapidCtrlExecState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.EgmRapidCtrlExecState)
}
EgmRapidCtrlExecState::EgmRapidCtrlExecState(
    ::google::protobuf::Arena* arena, const EgmRapidCtrlExecState& from)
    : EgmRapidCtrlExecState(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE EgmRapidCtrlExecState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void EgmRapidCtrlExecState::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.state_ = {};
}
EgmRapidCtrlExecState::~EgmRapidCtrlExecState() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmRapidCtrlExecState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EgmRapidCtrlExecState::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EgmRapidCtrlExecState::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmRapidCtrlExecState)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.state_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EgmRapidCtrlExecState::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> EgmRapidCtrlExecState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EgmRapidCtrlExecState, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_EgmRapidCtrlExecState_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // required .abb.egm.EgmRapidCtrlExecState.RapidCtrlExecStateType state = 1 [default = RAPID_UNDEFINED];
    {::_pbi::TcParser::FastEr0S1,
     {8, 0, 2, PROTOBUF_FIELD_OFFSET(EgmRapidCtrlExecState, _impl_.state_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .abb.egm.EgmRapidCtrlExecState.RapidCtrlExecStateType state = 1 [default = RAPID_UNDEFINED];
    {PROTOBUF_FIELD_OFFSET(EgmRapidCtrlExecState, _impl_.state_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
  }}, {{
    {0, 3},
  }}, {{
  }},
};

::uint8_t* EgmRapidCtrlExecState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmRapidCtrlExecState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .abb.egm.EgmRapidCtrlExecState.RapidCtrlExecStateType state = 1 [default = RAPID_UNDEFINED];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmRapidCtrlExecState)
  return target;
}

::size_t EgmRapidCtrlExecState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmRapidCtrlExecState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // required .abb.egm.EgmRapidCtrlExecState.RapidCtrlExecStateType state = 1 [default = RAPID_UNDEFINED];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EgmRapidCtrlExecState::_class_data_ = {
    EgmRapidCtrlExecState::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EgmRapidCtrlExecState::GetClassData() const {
  return &_class_data_;
}

void EgmRapidCtrlExecState::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EgmRapidCtrlExecState*>(&to_msg);
  auto& from = static_cast<const EgmRapidCtrlExecState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmRapidCtrlExecState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EgmRapidCtrlExecState::CopyFrom(const EgmRapidCtrlExecState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmRapidCtrlExecState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EgmRapidCtrlExecState::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) {
    return false;
  }
  return true;
}

::_pbi::CachedSize* EgmRapidCtrlExecState::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EgmRapidCtrlExecState::InternalSwap(EgmRapidCtrlExecState* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.state_, other->_impl_.state_);
}

::google::protobuf::Metadata EgmRapidCtrlExecState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_2eproto_getter, &descriptor_table_egm_2eproto_once,
      file_level_metadata_egm_2eproto[15]);
}
// ===================================================================

class EgmTestSignals::_Internal {
 public:
};

EgmTestSignals::EgmTestSignals(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.EgmTestSignals)
}
inline PROTOBUF_NDEBUG_INLINE EgmTestSignals::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : signals_{visibility, arena, from.signals_},
        _cached_size_{0} {}

EgmTestSignals::EgmTestSignals(
    ::google::protobuf::Arena* arena,
    const EgmTestSignals& from)
    : ::google::protobuf::Message(arena) {
  EgmTestSignals* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:abb.egm.EgmTestSignals)
}
inline PROTOBUF_NDEBUG_INLINE EgmTestSignals::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : signals_{visibility, arena},
        _cached_size_{0} {}

inline void EgmTestSignals::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
EgmTestSignals::~EgmTestSignals() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmTestSignals)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EgmTestSignals::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EgmTestSignals::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmTestSignals)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signals_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EgmTestSignals::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> EgmTestSignals::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_EgmTestSignals_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated double signals = 1;
    {::_pbi::TcParser::FastF64R1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(EgmTestSignals, _impl_.signals_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated double signals = 1;
    {PROTOBUF_FIELD_OFFSET(EgmTestSignals, _impl_.signals_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* EgmTestSignals::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmTestSignals)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated double signals = 1;
  for (int i = 0, n = this->_internal_signals_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_signals().Get(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmTestSignals)
  return target;
}

::size_t EgmTestSignals::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmTestSignals)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double signals = 1;
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_signals_size())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_signals_size());
    ;
    total_size += tag_size + data_size;
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EgmTestSignals::_class_data_ = {
    EgmTestSignals::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EgmTestSignals::GetClassData() const {
  return &_class_data_;
}

void EgmTestSignals::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EgmTestSignals*>(&to_msg);
  auto& from = static_cast<const EgmTestSignals&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmTestSignals)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_signals()->MergeFrom(from._internal_signals());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EgmTestSignals::CopyFrom(const EgmTestSignals& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmTestSignals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EgmTestSignals::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* EgmTestSignals::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EgmTestSignals::InternalSwap(EgmTestSignals* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.signals_.InternalSwap(&other->_impl_.signals_);
}

::google::protobuf::Metadata EgmTestSignals::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_2eproto_getter, &descriptor_table_egm_2eproto_once,
      file_level_metadata_egm_2eproto[16]);
}
// ===================================================================

class EgmMeasuredForce::_Internal {
 public:
};

EgmMeasuredForce::EgmMeasuredForce(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.EgmMeasuredForce)
}
inline PROTOBUF_NDEBUG_INLINE EgmMeasuredForce::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : force_{visibility, arena, from.force_},
        _cached_size_{0} {}

EgmMeasuredForce::EgmMeasuredForce(
    ::google::protobuf::Arena* arena,
    const EgmMeasuredForce& from)
    : ::google::protobuf::Message(arena) {
  EgmMeasuredForce* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:abb.egm.EgmMeasuredForce)
}
inline PROTOBUF_NDEBUG_INLINE EgmMeasuredForce::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : force_{visibility, arena},
        _cached_size_{0} {}

inline void EgmMeasuredForce::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
EgmMeasuredForce::~EgmMeasuredForce() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmMeasuredForce)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EgmMeasuredForce::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EgmMeasuredForce::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmMeasuredForce)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.force_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EgmMeasuredForce::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> EgmMeasuredForce::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_EgmMeasuredForce_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated double force = 1;
    {::_pbi::TcParser::FastF64R1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(EgmMeasuredForce, _impl_.force_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated double force = 1;
    {PROTOBUF_FIELD_OFFSET(EgmMeasuredForce, _impl_.force_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* EgmMeasuredForce::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmMeasuredForce)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated double force = 1;
  for (int i = 0, n = this->_internal_force_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_force().Get(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmMeasuredForce)
  return target;
}

::size_t EgmMeasuredForce::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmMeasuredForce)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double force = 1;
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_force_size())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_force_size());
    ;
    total_size += tag_size + data_size;
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EgmMeasuredForce::_class_data_ = {
    EgmMeasuredForce::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EgmMeasuredForce::GetClassData() const {
  return &_class_data_;
}

void EgmMeasuredForce::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EgmMeasuredForce*>(&to_msg);
  auto& from = static_cast<const EgmMeasuredForce&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmMeasuredForce)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_force()->MergeFrom(from._internal_force());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EgmMeasuredForce::CopyFrom(const EgmMeasuredForce& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmMeasuredForce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EgmMeasuredForce::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* EgmMeasuredForce::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EgmMeasuredForce::InternalSwap(EgmMeasuredForce* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.force_.InternalSwap(&other->_impl_.force_);
}

::google::protobuf::Metadata EgmMeasuredForce::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_2eproto_getter, &descriptor_table_egm_2eproto_once,
      file_level_metadata_egm_2eproto[17]);
}
// ===================================================================

class EgmRobot::_Internal {
 public:
  using HasBits = decltype(std::declval<EgmRobot>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EgmRobot, _impl_._has_bits_);
  static const ::abb::egm::EgmHeader& header(const EgmRobot* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::egm::EgmFeedBack& feedback(const EgmRobot* msg);
  static void set_has_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::abb::egm::EgmPlanned& planned(const EgmRobot* msg);
  static void set_has_planned(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::abb::egm::EgmMotorState& motorstate(const EgmRobot* msg);
  static void set_has_motorstate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::abb::egm::EgmMCIState& mcistate(const EgmRobot* msg);
  static void set_has_mcistate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mciconvergencemet(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::abb::egm::EgmTestSignals& testsignals(const EgmRobot* msg);
  static void set_has_testsignals(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::abb::egm::EgmRapidCtrlExecState& rapidexecstate(const EgmRobot* msg);
  static void set_has_rapidexecstate(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::abb::egm::EgmMeasuredForce& measuredforce(const EgmRobot* msg);
  static void set_has_measuredforce(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_utilizationrate(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::abb::egm::EgmHeader& EgmRobot::_Internal::header(const EgmRobot* msg) {
  return *msg->_impl_.header_;
}
const ::abb::egm::EgmFeedBack& EgmRobot::_Internal::feedback(const EgmRobot* msg) {
  return *msg->_impl_.feedback_;
}
const ::abb::egm::EgmPlanned& EgmRobot::_Internal::planned(const EgmRobot* msg) {
  return *msg->_impl_.planned_;
}
const ::abb::egm::EgmMotorState& EgmRobot::_Internal::motorstate(const EgmRobot* msg) {
  return *msg->_impl_.motorstate_;
}
const ::abb::egm::EgmMCIState& EgmRobot::_Internal::mcistate(const EgmRobot* msg) {
  return *msg->_impl_.mcistate_;
}
const ::abb::egm::EgmTestSignals& EgmRobot::_Internal::testsignals(const EgmRobot* msg) {
  return *msg->_impl_.testsignals_;
}
const ::abb::egm::EgmRapidCtrlExecState& EgmRobot::_Internal::rapidexecstate(const EgmRobot* msg) {
  return *msg->_impl_.rapidexecstate_;
}
const ::abb::egm::EgmMeasuredForce& EgmRobot::_Internal::measuredforce(const EgmRobot* msg) {
  return *msg->_impl_.measuredforce_;
}
EgmRobot::EgmRobot(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.EgmRobot)
}
inline PROTOBUF_NDEBUG_INLINE EgmRobot::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

EgmRobot::EgmRobot(
    ::google::protobuf::Arena* arena,
    const EgmRobot& from)
    : ::google::protobuf::Message(arena) {
  EgmRobot* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::abb::egm::EgmHeader>(arena, *from._impl_.header_)
                : nullptr;
  _impl_.feedback_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::abb::egm::EgmFeedBack>(arena, *from._impl_.feedback_)
                : nullptr;
  _impl_.planned_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::abb::egm::EgmPlanned>(arena, *from._impl_.planned_)
                : nullptr;
  _impl_.motorstate_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::abb::egm::EgmMotorState>(arena, *from._impl_.motorstate_)
                : nullptr;
  _impl_.mcistate_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::abb::egm::EgmMCIState>(arena, *from._impl_.mcistate_)
                : nullptr;
  _impl_.testsignals_ = (cached_has_bits & 0x00000020u)
                ? CreateMaybeMessage<::abb::egm::EgmTestSignals>(arena, *from._impl_.testsignals_)
                : nullptr;
  _impl_.rapidexecstate_ = (cached_has_bits & 0x00000040u)
                ? CreateMaybeMessage<::abb::egm::EgmRapidCtrlExecState>(arena, *from._impl_.rapidexecstate_)
                : nullptr;
  _impl_.measuredforce_ = (cached_has_bits & 0x00000080u)
                ? CreateMaybeMessage<::abb::egm::EgmMeasuredForce>(arena, *from._impl_.measuredforce_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, utilizationrate_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, utilizationrate_),
           offsetof(Impl_, mciconvergencemet_) -
               offsetof(Impl_, utilizationrate_) +
               sizeof(Impl_::mciconvergencemet_));

  // @@protoc_insertion_point(copy_constructor:abb.egm.EgmRobot)
}
inline PROTOBUF_NDEBUG_INLINE EgmRobot::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void EgmRobot::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, mciconvergencemet_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::mciconvergencemet_));
}
EgmRobot::~EgmRobot() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmRobot)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EgmRobot::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.header_;
  delete _impl_.feedback_;
  delete _impl_.planned_;
  delete _impl_.motorstate_;
  delete _impl_.mcistate_;
  delete _impl_.testsignals_;
  delete _impl_.rapidexecstate_;
  delete _impl_.measuredforce_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EgmRobot::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmRobot)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.feedback_ != nullptr);
      _impl_.feedback_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.planned_ != nullptr);
      _impl_.planned_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.motorstate_ != nullptr);
      _impl_.motorstate_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.mcistate_ != nullptr);
      _impl_.mcistate_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.testsignals_ != nullptr);
      _impl_.testsignals_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.rapidexecstate_ != nullptr);
      _impl_.rapidexecstate_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.measuredforce_ != nullptr);
      _impl_.measuredforce_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.utilizationrate_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.mciconvergencemet_) -
        reinterpret_cast<char*>(&_impl_.utilizationrate_)) + sizeof(_impl_.mciconvergencemet_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EgmRobot::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 8, 0, 2> EgmRobot::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EgmRobot, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    8,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_EgmRobot_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .abb.egm.EgmHeader header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(EgmRobot, _impl_.header_)}},
    // optional .abb.egm.EgmFeedBack feedBack = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(EgmRobot, _impl_.feedback_)}},
    // optional .abb.egm.EgmPlanned planned = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(EgmRobot, _impl_.planned_)}},
    // optional .abb.egm.EgmMotorState motorState = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(EgmRobot, _impl_.motorstate_)}},
    // optional .abb.egm.EgmMCIState mciState = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 4, 4, PROTOBUF_FIELD_OFFSET(EgmRobot, _impl_.mcistate_)}},
    // optional bool mciConvergenceMet = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(EgmRobot, _impl_.mciconvergencemet_), 9>(),
     {48, 9, 0, PROTOBUF_FIELD_OFFSET(EgmRobot, _impl_.mciconvergencemet_)}},
    // optional .abb.egm.EgmTestSignals testSignals = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 5, 5, PROTOBUF_FIELD_OFFSET(EgmRobot, _impl_.testsignals_)}},
    // optional .abb.egm.EgmRapidCtrlExecState rapidExecState = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 6, 6, PROTOBUF_FIELD_OFFSET(EgmRobot, _impl_.rapidexecstate_)}},
    // optional .abb.egm.EgmMeasuredForce measuredForce = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 7, 7, PROTOBUF_FIELD_OFFSET(EgmRobot, _impl_.measuredforce_)}},
    // optional double utilizationRate = 10;
    {::_pbi::TcParser::FastF64S1,
     {81, 8, 0, PROTOBUF_FIELD_OFFSET(EgmRobot, _impl_.utilizationrate_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .abb.egm.EgmHeader header = 1;
    {PROTOBUF_FIELD_OFFSET(EgmRobot, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.EgmFeedBack feedBack = 2;
    {PROTOBUF_FIELD_OFFSET(EgmRobot, _impl_.feedback_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.EgmPlanned planned = 3;
    {PROTOBUF_FIELD_OFFSET(EgmRobot, _impl_.planned_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.EgmMotorState motorState = 4;
    {PROTOBUF_FIELD_OFFSET(EgmRobot, _impl_.motorstate_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.EgmMCIState mciState = 5;
    {PROTOBUF_FIELD_OFFSET(EgmRobot, _impl_.mcistate_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bool mciConvergenceMet = 6;
    {PROTOBUF_FIELD_OFFSET(EgmRobot, _impl_.mciconvergencemet_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional .abb.egm.EgmTestSignals testSignals = 7;
    {PROTOBUF_FIELD_OFFSET(EgmRobot, _impl_.testsignals_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.EgmRapidCtrlExecState rapidExecState = 8;
    {PROTOBUF_FIELD_OFFSET(EgmRobot, _impl_.rapidexecstate_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.EgmMeasuredForce measuredForce = 9;
    {PROTOBUF_FIELD_OFFSET(EgmRobot, _impl_.measuredforce_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional double utilizationRate = 10;
    {PROTOBUF_FIELD_OFFSET(EgmRobot, _impl_.utilizationrate_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::egm::EgmHeader>()},
    {::_pbi::TcParser::GetTable<::abb::egm::EgmFeedBack>()},
    {::_pbi::TcParser::GetTable<::abb::egm::EgmPlanned>()},
    {::_pbi::TcParser::GetTable<::abb::egm::EgmMotorState>()},
    {::_pbi::TcParser::GetTable<::abb::egm::EgmMCIState>()},
    {::_pbi::TcParser::GetTable<::abb::egm::EgmTestSignals>()},
    {::_pbi::TcParser::GetTable<::abb::egm::EgmRapidCtrlExecState>()},
    {::_pbi::TcParser::GetTable<::abb::egm::EgmMeasuredForce>()},
  }}, {{
  }},
};

::uint8_t* EgmRobot::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmRobot)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .abb.egm.EgmHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.EgmFeedBack feedBack = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::feedback(this),
        _Internal::feedback(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.EgmPlanned planned = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::planned(this),
        _Internal::planned(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.EgmMotorState motorState = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::motorstate(this),
        _Internal::motorstate(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.EgmMCIState mciState = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::mcistate(this),
        _Internal::mcistate(this).GetCachedSize(), target, stream);
  }

  // optional bool mciConvergenceMet = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_mciconvergencemet(), target);
  }

  // optional .abb.egm.EgmTestSignals testSignals = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::testsignals(this),
        _Internal::testsignals(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.EgmRapidCtrlExecState rapidExecState = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::rapidexecstate(this),
        _Internal::rapidexecstate(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.EgmMeasuredForce measuredForce = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, _Internal::measuredforce(this),
        _Internal::measuredforce(this).GetCachedSize(), target, stream);
  }

  // optional double utilizationRate = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        10, this->_internal_utilizationrate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmRobot)
  return target;
}

::size_t EgmRobot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmRobot)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .abb.egm.EgmHeader header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.header_);
    }

    // optional .abb.egm.EgmFeedBack feedBack = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.feedback_);
    }

    // optional .abb.egm.EgmPlanned planned = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.planned_);
    }

    // optional .abb.egm.EgmMotorState motorState = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.motorstate_);
    }

    // optional .abb.egm.EgmMCIState mciState = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.mcistate_);
    }

    // optional .abb.egm.EgmTestSignals testSignals = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.testsignals_);
    }

    // optional .abb.egm.EgmRapidCtrlExecState rapidExecState = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.rapidexecstate_);
    }

    // optional .abb.egm.EgmMeasuredForce measuredForce = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.measuredforce_);
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional double utilizationRate = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 9;
    }

    // optional bool mciConvergenceMet = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EgmRobot::_class_data_ = {
    EgmRobot::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EgmRobot::GetClassData() const {
  return &_class_data_;
}

void EgmRobot::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EgmRobot*>(&to_msg);
  auto& from = static_cast<const EgmRobot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmRobot)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::abb::egm::EgmHeader::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_feedback()->::abb::egm::EgmFeedBack::MergeFrom(
          from._internal_feedback());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_planned()->::abb::egm::EgmPlanned::MergeFrom(
          from._internal_planned());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_motorstate()->::abb::egm::EgmMotorState::MergeFrom(
          from._internal_motorstate());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_mcistate()->::abb::egm::EgmMCIState::MergeFrom(
          from._internal_mcistate());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_testsignals()->::abb::egm::EgmTestSignals::MergeFrom(
          from._internal_testsignals());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_rapidexecstate()->::abb::egm::EgmRapidCtrlExecState::MergeFrom(
          from._internal_rapidexecstate());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_measuredforce()->::abb::egm::EgmMeasuredForce::MergeFrom(
          from._internal_measuredforce());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.utilizationrate_ = from._impl_.utilizationrate_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.mciconvergencemet_ = from._impl_.mciconvergencemet_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EgmRobot::CopyFrom(const EgmRobot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EgmRobot::IsInitialized() const {
  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!_impl_.feedback_->IsInitialized()) return false;
  }
  if ((_impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!_impl_.planned_->IsInitialized()) return false;
  }
  if ((_impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (!_impl_.motorstate_->IsInitialized()) return false;
  }
  if ((_impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (!_impl_.mcistate_->IsInitialized()) return false;
  }
  if ((_impl_._has_bits_[0] & 0x00000040u) != 0) {
    if (!_impl_.rapidexecstate_->IsInitialized()) return false;
  }
  return true;
}

::_pbi::CachedSize* EgmRobot::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EgmRobot::InternalSwap(EgmRobot* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EgmRobot, _impl_.mciconvergencemet_)
      + sizeof(EgmRobot::_impl_.mciconvergencemet_)
      - PROTOBUF_FIELD_OFFSET(EgmRobot, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata EgmRobot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_2eproto_getter, &descriptor_table_egm_2eproto_once,
      file_level_metadata_egm_2eproto[18]);
}
// ===================================================================

class EgmSensor::_Internal {
 public:
  using HasBits = decltype(std::declval<EgmSensor>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EgmSensor, _impl_._has_bits_);
  static const ::abb::egm::EgmHeader& header(const EgmSensor* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::egm::EgmPlanned& planned(const EgmSensor* msg);
  static void set_has_planned(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::abb::egm::EgmSpeedRef& speedref(const EgmSensor* msg);
  static void set_has_speedref(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::abb::egm::EgmHeader& EgmSensor::_Internal::header(const EgmSensor* msg) {
  return *msg->_impl_.header_;
}
const ::abb::egm::EgmPlanned& EgmSensor::_Internal::planned(const EgmSensor* msg) {
  return *msg->_impl_.planned_;
}
const ::abb::egm::EgmSpeedRef& EgmSensor::_Internal::speedref(const EgmSensor* msg) {
  return *msg->_impl_.speedref_;
}
EgmSensor::EgmSensor(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.EgmSensor)
}
inline PROTOBUF_NDEBUG_INLINE EgmSensor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

EgmSensor::EgmSensor(
    ::google::protobuf::Arena* arena,
    const EgmSensor& from)
    : ::google::protobuf::Message(arena) {
  EgmSensor* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::abb::egm::EgmHeader>(arena, *from._impl_.header_)
                : nullptr;
  _impl_.planned_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::abb::egm::EgmPlanned>(arena, *from._impl_.planned_)
                : nullptr;
  _impl_.speedref_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::abb::egm::EgmSpeedRef>(arena, *from._impl_.speedref_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:abb.egm.EgmSensor)
}
inline PROTOBUF_NDEBUG_INLINE EgmSensor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void EgmSensor::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, speedref_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::speedref_));
}
EgmSensor::~EgmSensor() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmSensor)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EgmSensor::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.header_;
  delete _impl_.planned_;
  delete _impl_.speedref_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EgmSensor::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmSensor)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.planned_ != nullptr);
      _impl_.planned_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.speedref_ != nullptr);
      _impl_.speedref_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EgmSensor::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> EgmSensor::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EgmSensor, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_EgmSensor_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .abb.egm.EgmHeader header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(EgmSensor, _impl_.header_)}},
    // optional .abb.egm.EgmPlanned planned = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(EgmSensor, _impl_.planned_)}},
    // optional .abb.egm.EgmSpeedRef speedRef = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(EgmSensor, _impl_.speedref_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .abb.egm.EgmHeader header = 1;
    {PROTOBUF_FIELD_OFFSET(EgmSensor, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.EgmPlanned planned = 2;
    {PROTOBUF_FIELD_OFFSET(EgmSensor, _impl_.planned_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.EgmSpeedRef speedRef = 3;
    {PROTOBUF_FIELD_OFFSET(EgmSensor, _impl_.speedref_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::egm::EgmHeader>()},
    {::_pbi::TcParser::GetTable<::abb::egm::EgmPlanned>()},
    {::_pbi::TcParser::GetTable<::abb::egm::EgmSpeedRef>()},
  }}, {{
  }},
};

::uint8_t* EgmSensor::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmSensor)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .abb.egm.EgmHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.EgmPlanned planned = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::planned(this),
        _Internal::planned(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.EgmSpeedRef speedRef = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::speedref(this),
        _Internal::speedref(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmSensor)
  return target;
}

::size_t EgmSensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmSensor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .abb.egm.EgmHeader header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.header_);
    }

    // optional .abb.egm.EgmPlanned planned = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.planned_);
    }

    // optional .abb.egm.EgmSpeedRef speedRef = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.speedref_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EgmSensor::_class_data_ = {
    EgmSensor::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EgmSensor::GetClassData() const {
  return &_class_data_;
}

void EgmSensor::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EgmSensor*>(&to_msg);
  auto& from = static_cast<const EgmSensor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmSensor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::abb::egm::EgmHeader::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_planned()->::abb::egm::EgmPlanned::MergeFrom(
          from._internal_planned());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_speedref()->::abb::egm::EgmSpeedRef::MergeFrom(
          from._internal_speedref());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EgmSensor::CopyFrom(const EgmSensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EgmSensor::IsInitialized() const {
  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!_impl_.planned_->IsInitialized()) return false;
  }
  return true;
}

::_pbi::CachedSize* EgmSensor::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EgmSensor::InternalSwap(EgmSensor* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EgmSensor, _impl_.speedref_)
      + sizeof(EgmSensor::_impl_.speedref_)
      - PROTOBUF_FIELD_OFFSET(EgmSensor, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata EgmSensor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_2eproto_getter, &descriptor_table_egm_2eproto_once,
      file_level_metadata_egm_2eproto[19]);
}
// ===================================================================

class EgmSensorPathCorr::_Internal {
 public:
  using HasBits = decltype(std::declval<EgmSensorPathCorr>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EgmSensorPathCorr, _impl_._has_bits_);
  static const ::abb::egm::EgmHeader& header(const EgmSensorPathCorr* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::egm::EgmPathCorr& pathcorr(const EgmSensorPathCorr* msg);
  static void set_has_pathcorr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::abb::egm::EgmHeader& EgmSensorPathCorr::_Internal::header(const EgmSensorPathCorr* msg) {
  return *msg->_impl_.header_;
}
const ::abb::egm::EgmPathCorr& EgmSensorPathCorr::_Internal::pathcorr(const EgmSensorPathCorr* msg) {
  return *msg->_impl_.pathcorr_;
}
EgmSensorPathCorr::EgmSensorPathCorr(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.EgmSensorPathCorr)
}
inline PROTOBUF_NDEBUG_INLINE EgmSensorPathCorr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

EgmSensorPathCorr::EgmSensorPathCorr(
    ::google::protobuf::Arena* arena,
    const EgmSensorPathCorr& from)
    : ::google::protobuf::Message(arena) {
  EgmSensorPathCorr* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::abb::egm::EgmHeader>(arena, *from._impl_.header_)
                : nullptr;
  _impl_.pathcorr_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::abb::egm::EgmPathCorr>(arena, *from._impl_.pathcorr_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:abb.egm.EgmSensorPathCorr)
}
inline PROTOBUF_NDEBUG_INLINE EgmSensorPathCorr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void EgmSensorPathCorr::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, pathcorr_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::pathcorr_));
}
EgmSensorPathCorr::~EgmSensorPathCorr() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmSensorPathCorr)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EgmSensorPathCorr::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.header_;
  delete _impl_.pathcorr_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EgmSensorPathCorr::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmSensorPathCorr)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.pathcorr_ != nullptr);
      _impl_.pathcorr_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EgmSensorPathCorr::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> EgmSensorPathCorr::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EgmSensorPathCorr, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_EgmSensorPathCorr_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional .abb.egm.EgmPathCorr pathCorr = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(EgmSensorPathCorr, _impl_.pathcorr_)}},
    // optional .abb.egm.EgmHeader header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(EgmSensorPathCorr, _impl_.header_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .abb.egm.EgmHeader header = 1;
    {PROTOBUF_FIELD_OFFSET(EgmSensorPathCorr, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.EgmPathCorr pathCorr = 2;
    {PROTOBUF_FIELD_OFFSET(EgmSensorPathCorr, _impl_.pathcorr_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::egm::EgmHeader>()},
    {::_pbi::TcParser::GetTable<::abb::egm::EgmPathCorr>()},
  }}, {{
  }},
};

::uint8_t* EgmSensorPathCorr::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmSensorPathCorr)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .abb.egm.EgmHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.EgmPathCorr pathCorr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::pathcorr(this),
        _Internal::pathcorr(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmSensorPathCorr)
  return target;
}

::size_t EgmSensorPathCorr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmSensorPathCorr)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .abb.egm.EgmHeader header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.header_);
    }

    // optional .abb.egm.EgmPathCorr pathCorr = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.pathcorr_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EgmSensorPathCorr::_class_data_ = {
    EgmSensorPathCorr::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EgmSensorPathCorr::GetClassData() const {
  return &_class_data_;
}

void EgmSensorPathCorr::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EgmSensorPathCorr*>(&to_msg);
  auto& from = static_cast<const EgmSensorPathCorr&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmSensorPathCorr)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::abb::egm::EgmHeader::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_pathcorr()->::abb::egm::EgmPathCorr::MergeFrom(
          from._internal_pathcorr());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EgmSensorPathCorr::CopyFrom(const EgmSensorPathCorr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmSensorPathCorr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EgmSensorPathCorr::IsInitialized() const {
  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!_impl_.pathcorr_->IsInitialized()) return false;
  }
  return true;
}

::_pbi::CachedSize* EgmSensorPathCorr::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EgmSensorPathCorr::InternalSwap(EgmSensorPathCorr* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EgmSensorPathCorr, _impl_.pathcorr_)
      + sizeof(EgmSensorPathCorr::_impl_.pathcorr_)
      - PROTOBUF_FIELD_OFFSET(EgmSensorPathCorr, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata EgmSensorPathCorr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_2eproto_getter, &descriptor_table_egm_2eproto_once,
      file_level_metadata_egm_2eproto[20]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace egm
}  // namespace abb
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
