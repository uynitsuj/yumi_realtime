// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: egm_wrapper.proto

#include "egm_wrapper.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace abb {
namespace egm {
namespace wrapper {

inline constexpr Status::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        egm_convergence_met_{false},
        egm_state_{static_cast< ::abb::egm::wrapper::Status_EGMState >(0)},
        motor_state_{static_cast< ::abb::egm::wrapper::Status_MotorState >(0)},
        rapid_execution_state_{static_cast< ::abb::egm::wrapper::Status_RAPIDExecutionState >(0)},
        utilization_rate_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Status::Status(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct StatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusDefaultTypeInternal() {}
  union {
    Status _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusDefaultTypeInternal _Status_default_instance_;

inline constexpr Quaternion::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        u0_{0},
        u1_{0},
        u2_{0},
        u3_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Quaternion::Quaternion(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct QuaternionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuaternionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuaternionDefaultTypeInternal() {}
  union {
    Quaternion _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuaternionDefaultTypeInternal _Quaternion_default_instance_;

inline constexpr Joints::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : values_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Joints::Joints(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct JointsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JointsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~JointsDefaultTypeInternal() {}
  union {
    Joints _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JointsDefaultTypeInternal _Joints_default_instance_;

inline constexpr Header::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        sequence_number_{0u},
        time_stamp_{0u},
        message_type_{static_cast< ::abb::egm::wrapper::Header_MessageType >(0)},
        rw_version_{static_cast< ::abb::egm::wrapper::Header_RWVersion >(0)},
        egm_version_{static_cast< ::abb::egm::wrapper::Header_EGMVersion >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Header::Header(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderDefaultTypeInternal _Header_default_instance_;

inline constexpr Euler::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        x_{0},
        y_{0},
        z_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Euler::Euler(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EulerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EulerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EulerDefaultTypeInternal() {}
  union {
    Euler _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EulerDefaultTypeInternal _Euler_default_instance_;

inline constexpr Clock::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        sec_{::uint64_t{0u}},
        usec_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR Clock::Clock(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ClockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClockDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClockDefaultTypeInternal() {}
  union {
    Clock _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClockDefaultTypeInternal _Clock_default_instance_;

inline constexpr Cartesian::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        x_{0},
        y_{0},
        z_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Cartesian::Cartesian(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CartesianDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CartesianDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CartesianDefaultTypeInternal() {}
  union {
    Cartesian _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CartesianDefaultTypeInternal _Cartesian_default_instance_;

inline constexpr JointSpace::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        position_{nullptr},
        velocity_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR JointSpace::JointSpace(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct JointSpaceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JointSpaceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~JointSpaceDefaultTypeInternal() {}
  union {
    JointSpace _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JointSpaceDefaultTypeInternal _JointSpace_default_instance_;

inline constexpr CartesianVelocity::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        linear_{nullptr},
        angular_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR CartesianVelocity::CartesianVelocity(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CartesianVelocityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CartesianVelocityDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CartesianVelocityDefaultTypeInternal() {}
  union {
    CartesianVelocity _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CartesianVelocityDefaultTypeInternal _CartesianVelocity_default_instance_;

inline constexpr CartesianPose::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        position_{nullptr},
        euler_{nullptr},
        quaternion_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR CartesianPose::CartesianPose(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CartesianPoseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CartesianPoseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CartesianPoseDefaultTypeInternal() {}
  union {
    CartesianPose _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CartesianPoseDefaultTypeInternal _CartesianPose_default_instance_;

inline constexpr External::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        joints_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR External::External(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ExternalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExternalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExternalDefaultTypeInternal() {}
  union {
    External _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExternalDefaultTypeInternal _External_default_instance_;

inline constexpr CartesianSpace::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        pose_{nullptr},
        velocity_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR CartesianSpace::CartesianSpace(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CartesianSpaceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CartesianSpaceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CartesianSpaceDefaultTypeInternal() {}
  union {
    CartesianSpace _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CartesianSpaceDefaultTypeInternal _CartesianSpace_default_instance_;

inline constexpr Robot::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        joints_{nullptr},
        cartesian_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Robot::Robot(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RobotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RobotDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RobotDefaultTypeInternal() {}
  union {
    Robot _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RobotDefaultTypeInternal _Robot_default_instance_;

inline constexpr Planned::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        robot_{nullptr},
        external_{nullptr},
        time_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Planned::Planned(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PlannedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlannedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlannedDefaultTypeInternal() {}
  union {
    Planned _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlannedDefaultTypeInternal _Planned_default_instance_;

inline constexpr Output::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        robot_{nullptr},
        external_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Output::Output(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct OutputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutputDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutputDefaultTypeInternal() {}
  union {
    Output _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutputDefaultTypeInternal _Output_default_instance_;

inline constexpr Feedback::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        robot_{nullptr},
        external_{nullptr},
        time_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Feedback::Feedback(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FeedbackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeedbackDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeedbackDefaultTypeInternal() {}
  union {
    Feedback _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeedbackDefaultTypeInternal _Feedback_default_instance_;

inline constexpr Input::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        feedback_{nullptr},
        planned_{nullptr},
        status_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Input::Input(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct InputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InputDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InputDefaultTypeInternal() {}
  union {
    Input _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InputDefaultTypeInternal _Input_default_instance_;
}  // namespace wrapper
}  // namespace egm
}  // namespace abb
static ::_pb::Metadata file_level_metadata_egm_5fwrapper_2eproto[17];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_egm_5fwrapper_2eproto[6];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_egm_5fwrapper_2eproto = nullptr;
const ::uint32_t TableStruct_egm_5fwrapper_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Header, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Header, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Header, _impl_.sequence_number_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Header, _impl_.time_stamp_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Header, _impl_.message_type_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Header, _impl_.rw_version_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Header, _impl_.egm_version_),
    0,
    1,
    2,
    3,
    4,
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Status, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Status, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Status, _impl_.egm_convergence_met_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Status, _impl_.egm_state_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Status, _impl_.motor_state_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Status, _impl_.rapid_execution_state_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Status, _impl_.utilization_rate_),
    0,
    1,
    2,
    3,
    4,
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Clock, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Clock, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Clock, _impl_.sec_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Clock, _impl_.usec_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Joints, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Joints, _impl_.values_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::JointSpace, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::JointSpace, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::JointSpace, _impl_.position_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::JointSpace, _impl_.velocity_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Cartesian, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Cartesian, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Cartesian, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Cartesian, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Cartesian, _impl_.z_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Euler, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Euler, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Euler, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Euler, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Euler, _impl_.z_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Quaternion, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Quaternion, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Quaternion, _impl_.u0_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Quaternion, _impl_.u1_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Quaternion, _impl_.u2_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Quaternion, _impl_.u3_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::CartesianPose, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::CartesianPose, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::CartesianPose, _impl_.position_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::CartesianPose, _impl_.euler_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::CartesianPose, _impl_.quaternion_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::CartesianVelocity, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::CartesianVelocity, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::CartesianVelocity, _impl_.linear_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::CartesianVelocity, _impl_.angular_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::CartesianSpace, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::CartesianSpace, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::CartesianSpace, _impl_.pose_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::CartesianSpace, _impl_.velocity_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Robot, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Robot, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Robot, _impl_.joints_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Robot, _impl_.cartesian_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::External, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::External, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::External, _impl_.joints_),
    0,
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Feedback, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Feedback, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Feedback, _impl_.robot_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Feedback, _impl_.external_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Feedback, _impl_.time_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Planned, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Planned, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Planned, _impl_.robot_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Planned, _impl_.external_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Planned, _impl_.time_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Input, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Input, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Input, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Input, _impl_.feedback_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Input, _impl_.planned_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Input, _impl_.status_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Output, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Output, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Output, _impl_.robot_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::Output, _impl_.external_),
    0,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 13, -1, sizeof(::abb::egm::wrapper::Header)},
        {18, 31, -1, sizeof(::abb::egm::wrapper::Status)},
        {36, 46, -1, sizeof(::abb::egm::wrapper::Clock)},
        {48, -1, -1, sizeof(::abb::egm::wrapper::Joints)},
        {57, 67, -1, sizeof(::abb::egm::wrapper::JointSpace)},
        {69, 80, -1, sizeof(::abb::egm::wrapper::Cartesian)},
        {83, 94, -1, sizeof(::abb::egm::wrapper::Euler)},
        {97, 109, -1, sizeof(::abb::egm::wrapper::Quaternion)},
        {113, 124, -1, sizeof(::abb::egm::wrapper::CartesianPose)},
        {127, 137, -1, sizeof(::abb::egm::wrapper::CartesianVelocity)},
        {139, 149, -1, sizeof(::abb::egm::wrapper::CartesianSpace)},
        {151, 161, -1, sizeof(::abb::egm::wrapper::Robot)},
        {163, 172, -1, sizeof(::abb::egm::wrapper::External)},
        {173, 184, -1, sizeof(::abb::egm::wrapper::Feedback)},
        {187, 198, -1, sizeof(::abb::egm::wrapper::Planned)},
        {201, 213, -1, sizeof(::abb::egm::wrapper::Input)},
        {217, 227, -1, sizeof(::abb::egm::wrapper::Output)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::abb::egm::wrapper::_Header_default_instance_._instance,
    &::abb::egm::wrapper::_Status_default_instance_._instance,
    &::abb::egm::wrapper::_Clock_default_instance_._instance,
    &::abb::egm::wrapper::_Joints_default_instance_._instance,
    &::abb::egm::wrapper::_JointSpace_default_instance_._instance,
    &::abb::egm::wrapper::_Cartesian_default_instance_._instance,
    &::abb::egm::wrapper::_Euler_default_instance_._instance,
    &::abb::egm::wrapper::_Quaternion_default_instance_._instance,
    &::abb::egm::wrapper::_CartesianPose_default_instance_._instance,
    &::abb::egm::wrapper::_CartesianVelocity_default_instance_._instance,
    &::abb::egm::wrapper::_CartesianSpace_default_instance_._instance,
    &::abb::egm::wrapper::_Robot_default_instance_._instance,
    &::abb::egm::wrapper::_External_default_instance_._instance,
    &::abb::egm::wrapper::_Feedback_default_instance_._instance,
    &::abb::egm::wrapper::_Planned_default_instance_._instance,
    &::abb::egm::wrapper::_Input_default_instance_._instance,
    &::abb::egm::wrapper::_Output_default_instance_._instance,
};
const char descriptor_table_protodef_egm_5fwrapper_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\021egm_wrapper.proto\022\017abb.egm.wrapper\"\330\003\n"
    "\006Header\022\027\n\017sequence_number\030\001 \001(\r\022\022\n\ntime"
    "_stamp\030\002 \001(\r\022D\n\014message_type\030\003 \001(\0162#.abb"
    ".egm.wrapper.Header.MessageType:\tUNDEFIN"
    "ED\022A\n\nrw_version\030\004 \001(\0162!.abb.egm.wrapper"
    ".Header.RWVersion:\nRW_UNKNOWN\022D\n\013egm_ver"
    "sion\030\005 \001(\0162\".abb.egm.wrapper.Header.EGMV"
    "ersion:\013EGM_UNKNOWN\"&\n\013MessageType\022\r\n\tUN"
    "DEFINED\020\000\022\010\n\004DATA\020\001\"q\n\tRWVersion\022\016\n\nRW_U"
    "NKNOWN\020\000\022\025\n\021RW_6_10_AND_NEWER\020\001\022\034\n\030RW_BE"
    "TWEEN_6_AND_6_06_03\020\002\022\037\n\033RW_BETWEEN_6_07"
    "_AND_6_09_02\020\003\"7\n\nEGMVersion\022\017\n\013EGM_UNKN"
    "OWN\020\000\022\013\n\007EGM_1_0\020\001\022\013\n\007EGM_1_1\020\002\"\220\004\n\006Stat"
    "us\022\033\n\023egm_convergence_met\030\001 \001(\010\022B\n\tegm_s"
    "tate\030\002 \001(\0162 .abb.egm.wrapper.Status.EGMS"
    "tate:\rEGM_UNDEFINED\022I\n\013motor_state\030\003 \001(\016"
    "2\".abb.egm.wrapper.Status.MotorState:\020MO"
    "TORS_UNDEFINED\022[\n\025rapid_execution_state\030"
    "\004 \001(\0162+.abb.egm.wrapper.Status.RAPIDExec"
    "utionState:\017RAPID_UNDEFINED\022\030\n\020utilizati"
    "on_rate\030\005 \001(\001\"N\n\010EGMState\022\021\n\rEGM_UNDEFIN"
    "ED\020\000\022\r\n\tEGM_ERROR\020\001\022\017\n\013EGM_STOPPED\020\002\022\017\n\013"
    "EGM_RUNNING\020\003\"A\n\nMotorState\022\024\n\020MOTORS_UN"
    "DEFINED\020\000\022\r\n\tMOTORS_ON\020\001\022\016\n\nMOTORS_OFF\020\002"
    "\"P\n\023RAPIDExecutionState\022\023\n\017RAPID_UNDEFIN"
    "ED\020\000\022\021\n\rRAPID_STOPPED\020\001\022\021\n\rRAPID_RUNNING"
    "\020\002\"\"\n\005Clock\022\013\n\003sec\030\001 \001(\004\022\014\n\004usec\030\002 \001(\004\"\030"
    "\n\006Joints\022\016\n\006values\030\001 \003(\001\"b\n\nJointSpace\022)"
    "\n\010position\030\001 \001(\0132\027.abb.egm.wrapper.Joint"
    "s\022)\n\010velocity\030\002 \001(\0132\027.abb.egm.wrapper.Jo"
    "ints\",\n\tCartesian\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022"
    "\t\n\001z\030\003 \001(\001\"(\n\005Euler\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001("
    "\001\022\t\n\001z\030\003 \001(\001\"<\n\nQuaternion\022\n\n\002u0\030\001 \001(\001\022\n"
    "\n\002u1\030\002 \001(\001\022\n\n\002u2\030\003 \001(\001\022\n\n\002u3\030\004 \001(\001\"\225\001\n\rC"
    "artesianPose\022,\n\010position\030\001 \001(\0132\032.abb.egm"
    ".wrapper.Cartesian\022%\n\005euler\030\002 \001(\0132\026.abb."
    "egm.wrapper.Euler\022/\n\nquaternion\030\003 \001(\0132\033."
    "abb.egm.wrapper.Quaternion\"h\n\021CartesianV"
    "elocity\022*\n\006linear\030\001 \001(\0132\032.abb.egm.wrappe"
    "r.Cartesian\022\'\n\007angular\030\002 \001(\0132\026.abb.egm.w"
    "rapper.Euler\"t\n\016CartesianSpace\022,\n\004pose\030\001"
    " \001(\0132\036.abb.egm.wrapper.CartesianPose\0224\n\010"
    "velocity\030\002 \001(\0132\".abb.egm.wrapper.Cartesi"
    "anVelocity\"h\n\005Robot\022+\n\006joints\030\001 \001(\0132\033.ab"
    "b.egm.wrapper.JointSpace\0222\n\tcartesian\030\002 "
    "\001(\0132\037.abb.egm.wrapper.CartesianSpace\"7\n\010"
    "External\022+\n\006joints\030\001 \001(\0132\033.abb.egm.wrapp"
    "er.JointSpace\"\204\001\n\010Feedback\022%\n\005robot\030\001 \001("
    "\0132\026.abb.egm.wrapper.Robot\022+\n\010external\030\002 "
    "\001(\0132\031.abb.egm.wrapper.External\022$\n\004time\030\003"
    " \001(\0132\026.abb.egm.wrapper.Clock\"\203\001\n\007Planned"
    "\022%\n\005robot\030\001 \001(\0132\026.abb.egm.wrapper.Robot\022"
    "+\n\010external\030\002 \001(\0132\031.abb.egm.wrapper.Exte"
    "rnal\022$\n\004time\030\003 \001(\0132\026.abb.egm.wrapper.Clo"
    "ck\"\261\001\n\005Input\022\'\n\006header\030\001 \001(\0132\027.abb.egm.w"
    "rapper.Header\022+\n\010feedback\030\002 \001(\0132\031.abb.eg"
    "m.wrapper.Feedback\022)\n\007planned\030\003 \001(\0132\030.ab"
    "b.egm.wrapper.Planned\022\'\n\006status\030\004 \001(\0132\027."
    "abb.egm.wrapper.Status\"\\\n\006Output\022%\n\005robo"
    "t\030\001 \001(\0132\026.abb.egm.wrapper.Robot\022+\n\010exter"
    "nal\030\002 \001(\0132\031.abb.egm.wrapper.External"
};
static ::absl::once_flag descriptor_table_egm_5fwrapper_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_egm_5fwrapper_2eproto = {
    false,
    false,
    2436,
    descriptor_table_protodef_egm_5fwrapper_2eproto,
    "egm_wrapper.proto",
    &descriptor_table_egm_5fwrapper_2eproto_once,
    nullptr,
    0,
    17,
    schemas,
    file_default_instances,
    TableStruct_egm_5fwrapper_2eproto::offsets,
    file_level_metadata_egm_5fwrapper_2eproto,
    file_level_enum_descriptors_egm_5fwrapper_2eproto,
    file_level_service_descriptors_egm_5fwrapper_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_egm_5fwrapper_2eproto_getter() {
  return &descriptor_table_egm_5fwrapper_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_egm_5fwrapper_2eproto(&descriptor_table_egm_5fwrapper_2eproto);
namespace abb {
namespace egm {
namespace wrapper {
const ::google::protobuf::EnumDescriptor* Header_MessageType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_egm_5fwrapper_2eproto);
  return file_level_enum_descriptors_egm_5fwrapper_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t Header_MessageType_internal_data_[] = {
    131072u, 0u, };
bool Header_MessageType_IsValid(int value) {
  return 0 <= value && value <= 1;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Header_MessageType Header::UNDEFINED;
constexpr Header_MessageType Header::DATA;
constexpr Header_MessageType Header::MessageType_MIN;
constexpr Header_MessageType Header::MessageType_MAX;
constexpr int Header::MessageType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* Header_RWVersion_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_egm_5fwrapper_2eproto);
  return file_level_enum_descriptors_egm_5fwrapper_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t Header_RWVersion_internal_data_[] = {
    262144u, 0u, };
bool Header_RWVersion_IsValid(int value) {
  return 0 <= value && value <= 3;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Header_RWVersion Header::RW_UNKNOWN;
constexpr Header_RWVersion Header::RW_6_10_AND_NEWER;
constexpr Header_RWVersion Header::RW_BETWEEN_6_AND_6_06_03;
constexpr Header_RWVersion Header::RW_BETWEEN_6_07_AND_6_09_02;
constexpr Header_RWVersion Header::RWVersion_MIN;
constexpr Header_RWVersion Header::RWVersion_MAX;
constexpr int Header::RWVersion_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* Header_EGMVersion_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_egm_5fwrapper_2eproto);
  return file_level_enum_descriptors_egm_5fwrapper_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t Header_EGMVersion_internal_data_[] = {
    196608u, 0u, };
bool Header_EGMVersion_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Header_EGMVersion Header::EGM_UNKNOWN;
constexpr Header_EGMVersion Header::EGM_1_0;
constexpr Header_EGMVersion Header::EGM_1_1;
constexpr Header_EGMVersion Header::EGMVersion_MIN;
constexpr Header_EGMVersion Header::EGMVersion_MAX;
constexpr int Header::EGMVersion_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* Status_EGMState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_egm_5fwrapper_2eproto);
  return file_level_enum_descriptors_egm_5fwrapper_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t Status_EGMState_internal_data_[] = {
    262144u, 0u, };
bool Status_EGMState_IsValid(int value) {
  return 0 <= value && value <= 3;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Status_EGMState Status::EGM_UNDEFINED;
constexpr Status_EGMState Status::EGM_ERROR;
constexpr Status_EGMState Status::EGM_STOPPED;
constexpr Status_EGMState Status::EGM_RUNNING;
constexpr Status_EGMState Status::EGMState_MIN;
constexpr Status_EGMState Status::EGMState_MAX;
constexpr int Status::EGMState_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* Status_MotorState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_egm_5fwrapper_2eproto);
  return file_level_enum_descriptors_egm_5fwrapper_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t Status_MotorState_internal_data_[] = {
    196608u, 0u, };
bool Status_MotorState_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Status_MotorState Status::MOTORS_UNDEFINED;
constexpr Status_MotorState Status::MOTORS_ON;
constexpr Status_MotorState Status::MOTORS_OFF;
constexpr Status_MotorState Status::MotorState_MIN;
constexpr Status_MotorState Status::MotorState_MAX;
constexpr int Status::MotorState_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* Status_RAPIDExecutionState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_egm_5fwrapper_2eproto);
  return file_level_enum_descriptors_egm_5fwrapper_2eproto[5];
}
PROTOBUF_CONSTINIT const uint32_t Status_RAPIDExecutionState_internal_data_[] = {
    196608u, 0u, };
bool Status_RAPIDExecutionState_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Status_RAPIDExecutionState Status::RAPID_UNDEFINED;
constexpr Status_RAPIDExecutionState Status::RAPID_STOPPED;
constexpr Status_RAPIDExecutionState Status::RAPID_RUNNING;
constexpr Status_RAPIDExecutionState Status::RAPIDExecutionState_MIN;
constexpr Status_RAPIDExecutionState Status::RAPIDExecutionState_MAX;
constexpr int Status::RAPIDExecutionState_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class Header::_Internal {
 public:
  using HasBits = decltype(std::declval<Header>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Header, _impl_._has_bits_);
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_stamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rw_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_egm_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Header::Header(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.Header)
}
Header::Header(
    ::google::protobuf::Arena* arena, const Header& from)
    : Header(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Header::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Header::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, sequence_number_),
           0,
           offsetof(Impl_, egm_version_) -
               offsetof(Impl_, sequence_number_) +
               sizeof(Impl_::egm_version_));
}
Header::~Header() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.Header)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Header::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.Header)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.sequence_number_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.egm_version_) -
        reinterpret_cast<char*>(&_impl_.sequence_number_)) + sizeof(_impl_.egm_version_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Header::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 0, 2> Header::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Header, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Header_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 sequence_number = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Header, _impl_.sequence_number_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.sequence_number_)}},
    // optional uint32 time_stamp = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Header, _impl_.time_stamp_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.time_stamp_)}},
    // optional .abb.egm.wrapper.Header.MessageType message_type = 3 [default = UNDEFINED];
    {::_pbi::TcParser::FastEr0S1,
     {24, 2, 1, PROTOBUF_FIELD_OFFSET(Header, _impl_.message_type_)}},
    // optional .abb.egm.wrapper.Header.RWVersion rw_version = 4 [default = RW_UNKNOWN];
    {::_pbi::TcParser::FastEr0S1,
     {32, 3, 3, PROTOBUF_FIELD_OFFSET(Header, _impl_.rw_version_)}},
    // optional .abb.egm.wrapper.Header.EGMVersion egm_version = 5 [default = EGM_UNKNOWN];
    {::_pbi::TcParser::FastEr0S1,
     {40, 4, 2, PROTOBUF_FIELD_OFFSET(Header, _impl_.egm_version_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 sequence_number = 1;
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.sequence_number_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 time_stamp = 2;
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.time_stamp_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .abb.egm.wrapper.Header.MessageType message_type = 3 [default = UNDEFINED];
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.message_type_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional .abb.egm.wrapper.Header.RWVersion rw_version = 4 [default = RW_UNKNOWN];
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.rw_version_), _Internal::kHasBitsOffset + 3, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional .abb.egm.wrapper.Header.EGMVersion egm_version = 5 [default = EGM_UNKNOWN];
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.egm_version_), _Internal::kHasBitsOffset + 4, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
  }}, {{
    {0, 2},
    {0, 4},
    {0, 3},
  }}, {{
  }},
};

::uint8_t* Header::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.Header)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 sequence_number = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_sequence_number(), target);
  }

  // optional uint32 time_stamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_time_stamp(), target);
  }

  // optional .abb.egm.wrapper.Header.MessageType message_type = 3 [default = UNDEFINED];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_message_type(), target);
  }

  // optional .abb.egm.wrapper.Header.RWVersion rw_version = 4 [default = RW_UNKNOWN];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_rw_version(), target);
  }

  // optional .abb.egm.wrapper.Header.EGMVersion egm_version = 5 [default = EGM_UNKNOWN];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_egm_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.Header)
  return target;
}

::size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.Header)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 sequence_number = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_sequence_number());
    }

    // optional uint32 time_stamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_time_stamp());
    }

    // optional .abb.egm.wrapper.Header.MessageType message_type = 3 [default = UNDEFINED];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_message_type());
    }

    // optional .abb.egm.wrapper.Header.RWVersion rw_version = 4 [default = RW_UNKNOWN];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_rw_version());
    }

    // optional .abb.egm.wrapper.Header.EGMVersion egm_version = 5 [default = EGM_UNKNOWN];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_egm_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Header::_class_data_ = {
    Header::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Header::GetClassData() const {
  return &_class_data_;
}

void Header::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Header*>(&to_msg);
  auto& from = static_cast<const Header&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.Header)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.sequence_number_ = from._impl_.sequence_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.time_stamp_ = from._impl_.time_stamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.message_type_ = from._impl_.message_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.rw_version_ = from._impl_.rw_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.egm_version_ = from._impl_.egm_version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Header::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Header::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Header::InternalSwap(Header* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, _impl_.egm_version_)
      + sizeof(Header::_impl_.egm_version_)
      - PROTOBUF_FIELD_OFFSET(Header, _impl_.sequence_number_)>(
          reinterpret_cast<char*>(&_impl_.sequence_number_),
          reinterpret_cast<char*>(&other->_impl_.sequence_number_));
}

::google::protobuf::Metadata Header::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_2eproto_getter, &descriptor_table_egm_5fwrapper_2eproto_once,
      file_level_metadata_egm_5fwrapper_2eproto[0]);
}
// ===================================================================

class Status::_Internal {
 public:
  using HasBits = decltype(std::declval<Status>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Status, _impl_._has_bits_);
  static void set_has_egm_convergence_met(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_egm_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_motor_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rapid_execution_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_utilization_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Status::Status(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.Status)
}
Status::Status(
    ::google::protobuf::Arena* arena, const Status& from)
    : Status(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Status::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Status::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, egm_convergence_met_),
           0,
           offsetof(Impl_, utilization_rate_) -
               offsetof(Impl_, egm_convergence_met_) +
               sizeof(Impl_::utilization_rate_));
}
Status::~Status() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.Status)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Status::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.Status)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.egm_convergence_met_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.utilization_rate_) -
        reinterpret_cast<char*>(&_impl_.egm_convergence_met_)) + sizeof(_impl_.utilization_rate_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Status::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 0, 2> Status::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Status, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Status_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional bool egm_convergence_met = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Status, _impl_.egm_convergence_met_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(Status, _impl_.egm_convergence_met_)}},
    // optional .abb.egm.wrapper.Status.EGMState egm_state = 2 [default = EGM_UNDEFINED];
    {::_pbi::TcParser::FastEr0S1,
     {16, 1, 3, PROTOBUF_FIELD_OFFSET(Status, _impl_.egm_state_)}},
    // optional .abb.egm.wrapper.Status.MotorState motor_state = 3 [default = MOTORS_UNDEFINED];
    {::_pbi::TcParser::FastEr0S1,
     {24, 2, 2, PROTOBUF_FIELD_OFFSET(Status, _impl_.motor_state_)}},
    // optional .abb.egm.wrapper.Status.RAPIDExecutionState rapid_execution_state = 4 [default = RAPID_UNDEFINED];
    {::_pbi::TcParser::FastEr0S1,
     {32, 3, 2, PROTOBUF_FIELD_OFFSET(Status, _impl_.rapid_execution_state_)}},
    // optional double utilization_rate = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 4, 0, PROTOBUF_FIELD_OFFSET(Status, _impl_.utilization_rate_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bool egm_convergence_met = 1;
    {PROTOBUF_FIELD_OFFSET(Status, _impl_.egm_convergence_met_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional .abb.egm.wrapper.Status.EGMState egm_state = 2 [default = EGM_UNDEFINED];
    {PROTOBUF_FIELD_OFFSET(Status, _impl_.egm_state_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional .abb.egm.wrapper.Status.MotorState motor_state = 3 [default = MOTORS_UNDEFINED];
    {PROTOBUF_FIELD_OFFSET(Status, _impl_.motor_state_), _Internal::kHasBitsOffset + 2, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional .abb.egm.wrapper.Status.RAPIDExecutionState rapid_execution_state = 4 [default = RAPID_UNDEFINED];
    {PROTOBUF_FIELD_OFFSET(Status, _impl_.rapid_execution_state_), _Internal::kHasBitsOffset + 3, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional double utilization_rate = 5;
    {PROTOBUF_FIELD_OFFSET(Status, _impl_.utilization_rate_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }}, {{
    {0, 4},
    {0, 3},
    {0, 3},
  }}, {{
  }},
};

::uint8_t* Status::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.Status)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool egm_convergence_met = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_egm_convergence_met(), target);
  }

  // optional .abb.egm.wrapper.Status.EGMState egm_state = 2 [default = EGM_UNDEFINED];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_egm_state(), target);
  }

  // optional .abb.egm.wrapper.Status.MotorState motor_state = 3 [default = MOTORS_UNDEFINED];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_motor_state(), target);
  }

  // optional .abb.egm.wrapper.Status.RAPIDExecutionState rapid_execution_state = 4 [default = RAPID_UNDEFINED];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_rapid_execution_state(), target);
  }

  // optional double utilization_rate = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_utilization_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.Status)
  return target;
}

::size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.Status)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool egm_convergence_met = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2;
    }

    // optional .abb.egm.wrapper.Status.EGMState egm_state = 2 [default = EGM_UNDEFINED];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_egm_state());
    }

    // optional .abb.egm.wrapper.Status.MotorState motor_state = 3 [default = MOTORS_UNDEFINED];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_motor_state());
    }

    // optional .abb.egm.wrapper.Status.RAPIDExecutionState rapid_execution_state = 4 [default = RAPID_UNDEFINED];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_rapid_execution_state());
    }

    // optional double utilization_rate = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Status::_class_data_ = {
    Status::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Status::GetClassData() const {
  return &_class_data_;
}

void Status::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Status*>(&to_msg);
  auto& from = static_cast<const Status&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.Status)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.egm_convergence_met_ = from._impl_.egm_convergence_met_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.egm_state_ = from._impl_.egm_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.motor_state_ = from._impl_.motor_state_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.rapid_execution_state_ = from._impl_.rapid_execution_state_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.utilization_rate_ = from._impl_.utilization_rate_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Status::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Status::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Status::InternalSwap(Status* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Status, _impl_.utilization_rate_)
      + sizeof(Status::_impl_.utilization_rate_)
      - PROTOBUF_FIELD_OFFSET(Status, _impl_.egm_convergence_met_)>(
          reinterpret_cast<char*>(&_impl_.egm_convergence_met_),
          reinterpret_cast<char*>(&other->_impl_.egm_convergence_met_));
}

::google::protobuf::Metadata Status::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_2eproto_getter, &descriptor_table_egm_5fwrapper_2eproto_once,
      file_level_metadata_egm_5fwrapper_2eproto[1]);
}
// ===================================================================

class Clock::_Internal {
 public:
  using HasBits = decltype(std::declval<Clock>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Clock, _impl_._has_bits_);
  static void set_has_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Clock::Clock(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.Clock)
}
Clock::Clock(
    ::google::protobuf::Arena* arena, const Clock& from)
    : Clock(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Clock::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Clock::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, sec_),
           0,
           offsetof(Impl_, usec_) -
               offsetof(Impl_, sec_) +
               sizeof(Impl_::usec_));
}
Clock::~Clock() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.Clock)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Clock::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Clock::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.Clock)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.sec_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.usec_) -
        reinterpret_cast<char*>(&_impl_.sec_)) + sizeof(_impl_.usec_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Clock::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Clock::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Clock, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Clock_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional uint64 usec = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Clock, _impl_.usec_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(Clock, _impl_.usec_)}},
    // optional uint64 sec = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Clock, _impl_.sec_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(Clock, _impl_.sec_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint64 sec = 1;
    {PROTOBUF_FIELD_OFFSET(Clock, _impl_.sec_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint64 usec = 2;
    {PROTOBUF_FIELD_OFFSET(Clock, _impl_.usec_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Clock::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.Clock)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 sec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_sec(), target);
  }

  // optional uint64 usec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_usec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.Clock)
  return target;
}

::size_t Clock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.Clock)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 sec = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_sec());
    }

    // optional uint64 usec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_usec());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Clock::_class_data_ = {
    Clock::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Clock::GetClassData() const {
  return &_class_data_;
}

void Clock::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Clock*>(&to_msg);
  auto& from = static_cast<const Clock&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.Clock)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.sec_ = from._impl_.sec_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.usec_ = from._impl_.usec_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Clock::CopyFrom(const Clock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.Clock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Clock::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Clock::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Clock::InternalSwap(Clock* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Clock, _impl_.usec_)
      + sizeof(Clock::_impl_.usec_)
      - PROTOBUF_FIELD_OFFSET(Clock, _impl_.sec_)>(
          reinterpret_cast<char*>(&_impl_.sec_),
          reinterpret_cast<char*>(&other->_impl_.sec_));
}

::google::protobuf::Metadata Clock::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_2eproto_getter, &descriptor_table_egm_5fwrapper_2eproto_once,
      file_level_metadata_egm_5fwrapper_2eproto[2]);
}
// ===================================================================

class Joints::_Internal {
 public:
};

Joints::Joints(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.Joints)
}
inline PROTOBUF_NDEBUG_INLINE Joints::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : values_{visibility, arena, from.values_},
        _cached_size_{0} {}

Joints::Joints(
    ::google::protobuf::Arena* arena,
    const Joints& from)
    : ::google::protobuf::Message(arena) {
  Joints* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.Joints)
}
inline PROTOBUF_NDEBUG_INLINE Joints::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : values_{visibility, arena},
        _cached_size_{0} {}

inline void Joints::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Joints::~Joints() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.Joints)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Joints::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Joints::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.Joints)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Joints::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> Joints::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Joints_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated double values = 1;
    {::_pbi::TcParser::FastF64R1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(Joints, _impl_.values_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated double values = 1;
    {PROTOBUF_FIELD_OFFSET(Joints, _impl_.values_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Joints::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.Joints)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated double values = 1;
  for (int i = 0, n = this->_internal_values_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_values().Get(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.Joints)
  return target;
}

::size_t Joints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.Joints)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double values = 1;
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_values_size())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_values_size());
    ;
    total_size += tag_size + data_size;
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Joints::_class_data_ = {
    Joints::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Joints::GetClassData() const {
  return &_class_data_;
}

void Joints::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Joints*>(&to_msg);
  auto& from = static_cast<const Joints&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.Joints)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_values()->MergeFrom(from._internal_values());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Joints::CopyFrom(const Joints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.Joints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Joints::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Joints::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Joints::InternalSwap(Joints* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::google::protobuf::Metadata Joints::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_2eproto_getter, &descriptor_table_egm_5fwrapper_2eproto_once,
      file_level_metadata_egm_5fwrapper_2eproto[3]);
}
// ===================================================================

class JointSpace::_Internal {
 public:
  using HasBits = decltype(std::declval<JointSpace>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(JointSpace, _impl_._has_bits_);
  static const ::abb::egm::wrapper::Joints& position(const JointSpace* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::egm::wrapper::Joints& velocity(const JointSpace* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::abb::egm::wrapper::Joints& JointSpace::_Internal::position(const JointSpace* msg) {
  return *msg->_impl_.position_;
}
const ::abb::egm::wrapper::Joints& JointSpace::_Internal::velocity(const JointSpace* msg) {
  return *msg->_impl_.velocity_;
}
JointSpace::JointSpace(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.JointSpace)
}
inline PROTOBUF_NDEBUG_INLINE JointSpace::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

JointSpace::JointSpace(
    ::google::protobuf::Arena* arena,
    const JointSpace& from)
    : ::google::protobuf::Message(arena) {
  JointSpace* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::abb::egm::wrapper::Joints>(arena, *from._impl_.position_)
                : nullptr;
  _impl_.velocity_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::abb::egm::wrapper::Joints>(arena, *from._impl_.velocity_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.JointSpace)
}
inline PROTOBUF_NDEBUG_INLINE JointSpace::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void JointSpace::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_),
           0,
           offsetof(Impl_, velocity_) -
               offsetof(Impl_, position_) +
               sizeof(Impl_::velocity_));
}
JointSpace::~JointSpace() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.JointSpace)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void JointSpace::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.position_;
  delete _impl_.velocity_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void JointSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.JointSpace)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.velocity_ != nullptr);
      _impl_.velocity_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* JointSpace::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> JointSpace::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(JointSpace, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_JointSpace_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional .abb.egm.wrapper.Joints velocity = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(JointSpace, _impl_.velocity_)}},
    // optional .abb.egm.wrapper.Joints position = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(JointSpace, _impl_.position_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .abb.egm.wrapper.Joints position = 1;
    {PROTOBUF_FIELD_OFFSET(JointSpace, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.wrapper.Joints velocity = 2;
    {PROTOBUF_FIELD_OFFSET(JointSpace, _impl_.velocity_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::Joints>()},
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::Joints>()},
  }}, {{
  }},
};

::uint8_t* JointSpace::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.JointSpace)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .abb.egm.wrapper.Joints position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.wrapper.Joints velocity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::velocity(this),
        _Internal::velocity(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.JointSpace)
  return target;
}

::size_t JointSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.JointSpace)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .abb.egm.wrapper.Joints position = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.position_);
    }

    // optional .abb.egm.wrapper.Joints velocity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.velocity_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData JointSpace::_class_data_ = {
    JointSpace::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* JointSpace::GetClassData() const {
  return &_class_data_;
}

void JointSpace::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<JointSpace*>(&to_msg);
  auto& from = static_cast<const JointSpace&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.JointSpace)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_position()->::abb::egm::wrapper::Joints::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_velocity()->::abb::egm::wrapper::Joints::MergeFrom(
          from._internal_velocity());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void JointSpace::CopyFrom(const JointSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.JointSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool JointSpace::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* JointSpace::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void JointSpace::InternalSwap(JointSpace* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JointSpace, _impl_.velocity_)
      + sizeof(JointSpace::_impl_.velocity_)
      - PROTOBUF_FIELD_OFFSET(JointSpace, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata JointSpace::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_2eproto_getter, &descriptor_table_egm_5fwrapper_2eproto_once,
      file_level_metadata_egm_5fwrapper_2eproto[4]);
}
// ===================================================================

class Cartesian::_Internal {
 public:
  using HasBits = decltype(std::declval<Cartesian>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Cartesian, _impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Cartesian::Cartesian(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.Cartesian)
}
Cartesian::Cartesian(
    ::google::protobuf::Arena* arena, const Cartesian& from)
    : Cartesian(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Cartesian::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Cartesian::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, z_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::z_));
}
Cartesian::~Cartesian() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.Cartesian)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Cartesian::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Cartesian::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.Cartesian)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.x_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.z_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Cartesian::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> Cartesian::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Cartesian, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Cartesian_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional double x = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 0, 0, PROTOBUF_FIELD_OFFSET(Cartesian, _impl_.x_)}},
    // optional double y = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 1, 0, PROTOBUF_FIELD_OFFSET(Cartesian, _impl_.y_)}},
    // optional double z = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 2, 0, PROTOBUF_FIELD_OFFSET(Cartesian, _impl_.z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional double x = 1;
    {PROTOBUF_FIELD_OFFSET(Cartesian, _impl_.x_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double y = 2;
    {PROTOBUF_FIELD_OFFSET(Cartesian, _impl_.y_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double z = 3;
    {PROTOBUF_FIELD_OFFSET(Cartesian, _impl_.z_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Cartesian::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.Cartesian)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_y(), target);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.Cartesian)
  return target;
}

::size_t Cartesian::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.Cartesian)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }

    // optional double y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

    // optional double z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Cartesian::_class_data_ = {
    Cartesian::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Cartesian::GetClassData() const {
  return &_class_data_;
}

void Cartesian::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Cartesian*>(&to_msg);
  auto& from = static_cast<const Cartesian&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.Cartesian)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.z_ = from._impl_.z_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Cartesian::CopyFrom(const Cartesian& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.Cartesian)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Cartesian::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Cartesian::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Cartesian::InternalSwap(Cartesian* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Cartesian, _impl_.z_)
      + sizeof(Cartesian::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Cartesian, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata Cartesian::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_2eproto_getter, &descriptor_table_egm_5fwrapper_2eproto_once,
      file_level_metadata_egm_5fwrapper_2eproto[5]);
}
// ===================================================================

class Euler::_Internal {
 public:
  using HasBits = decltype(std::declval<Euler>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Euler, _impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Euler::Euler(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.Euler)
}
Euler::Euler(
    ::google::protobuf::Arena* arena, const Euler& from)
    : Euler(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Euler::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Euler::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, z_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::z_));
}
Euler::~Euler() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.Euler)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Euler::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Euler::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.Euler)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.x_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.z_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Euler::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> Euler::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Euler, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Euler_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional double x = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 0, 0, PROTOBUF_FIELD_OFFSET(Euler, _impl_.x_)}},
    // optional double y = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 1, 0, PROTOBUF_FIELD_OFFSET(Euler, _impl_.y_)}},
    // optional double z = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 2, 0, PROTOBUF_FIELD_OFFSET(Euler, _impl_.z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional double x = 1;
    {PROTOBUF_FIELD_OFFSET(Euler, _impl_.x_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double y = 2;
    {PROTOBUF_FIELD_OFFSET(Euler, _impl_.y_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double z = 3;
    {PROTOBUF_FIELD_OFFSET(Euler, _impl_.z_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Euler::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.Euler)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_y(), target);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.Euler)
  return target;
}

::size_t Euler::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.Euler)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }

    // optional double y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

    // optional double z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Euler::_class_data_ = {
    Euler::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Euler::GetClassData() const {
  return &_class_data_;
}

void Euler::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Euler*>(&to_msg);
  auto& from = static_cast<const Euler&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.Euler)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.z_ = from._impl_.z_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Euler::CopyFrom(const Euler& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.Euler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Euler::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Euler::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Euler::InternalSwap(Euler* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Euler, _impl_.z_)
      + sizeof(Euler::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Euler, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata Euler::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_2eproto_getter, &descriptor_table_egm_5fwrapper_2eproto_once,
      file_level_metadata_egm_5fwrapper_2eproto[6]);
}
// ===================================================================

class Quaternion::_Internal {
 public:
  using HasBits = decltype(std::declval<Quaternion>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Quaternion, _impl_._has_bits_);
  static void set_has_u0(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_u1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_u2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_u3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Quaternion::Quaternion(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.Quaternion)
}
Quaternion::Quaternion(
    ::google::protobuf::Arena* arena, const Quaternion& from)
    : Quaternion(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Quaternion::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Quaternion::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, u0_),
           0,
           offsetof(Impl_, u3_) -
               offsetof(Impl_, u0_) +
               sizeof(Impl_::u3_));
}
Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.Quaternion)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Quaternion::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.Quaternion)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.u0_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.u3_) -
        reinterpret_cast<char*>(&_impl_.u0_)) + sizeof(_impl_.u3_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Quaternion::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> Quaternion::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Quaternion, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Quaternion_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional double u3 = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 3, 0, PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.u3_)}},
    // optional double u0 = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 0, 0, PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.u0_)}},
    // optional double u1 = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 1, 0, PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.u1_)}},
    // optional double u2 = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 2, 0, PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.u2_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional double u0 = 1;
    {PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.u0_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double u1 = 2;
    {PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.u1_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double u2 = 3;
    {PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.u2_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double u3 = 4;
    {PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.u3_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Quaternion::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.Quaternion)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double u0 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_u0(), target);
  }

  // optional double u1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_u1(), target);
  }

  // optional double u2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_u2(), target);
  }

  // optional double u3 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_u3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.Quaternion)
  return target;
}

::size_t Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.Quaternion)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double u0 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }

    // optional double u1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

    // optional double u2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }

    // optional double u3 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Quaternion::_class_data_ = {
    Quaternion::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Quaternion::GetClassData() const {
  return &_class_data_;
}

void Quaternion::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Quaternion*>(&to_msg);
  auto& from = static_cast<const Quaternion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.Quaternion)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.u0_ = from._impl_.u0_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.u1_ = from._impl_.u1_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.u2_ = from._impl_.u2_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.u3_ = from._impl_.u3_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Quaternion::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Quaternion::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Quaternion::InternalSwap(Quaternion* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.u3_)
      + sizeof(Quaternion::_impl_.u3_)
      - PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.u0_)>(
          reinterpret_cast<char*>(&_impl_.u0_),
          reinterpret_cast<char*>(&other->_impl_.u0_));
}

::google::protobuf::Metadata Quaternion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_2eproto_getter, &descriptor_table_egm_5fwrapper_2eproto_once,
      file_level_metadata_egm_5fwrapper_2eproto[7]);
}
// ===================================================================

class CartesianPose::_Internal {
 public:
  using HasBits = decltype(std::declval<CartesianPose>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CartesianPose, _impl_._has_bits_);
  static const ::abb::egm::wrapper::Cartesian& position(const CartesianPose* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::egm::wrapper::Euler& euler(const CartesianPose* msg);
  static void set_has_euler(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::abb::egm::wrapper::Quaternion& quaternion(const CartesianPose* msg);
  static void set_has_quaternion(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::abb::egm::wrapper::Cartesian& CartesianPose::_Internal::position(const CartesianPose* msg) {
  return *msg->_impl_.position_;
}
const ::abb::egm::wrapper::Euler& CartesianPose::_Internal::euler(const CartesianPose* msg) {
  return *msg->_impl_.euler_;
}
const ::abb::egm::wrapper::Quaternion& CartesianPose::_Internal::quaternion(const CartesianPose* msg) {
  return *msg->_impl_.quaternion_;
}
CartesianPose::CartesianPose(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.CartesianPose)
}
inline PROTOBUF_NDEBUG_INLINE CartesianPose::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CartesianPose::CartesianPose(
    ::google::protobuf::Arena* arena,
    const CartesianPose& from)
    : ::google::protobuf::Message(arena) {
  CartesianPose* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::abb::egm::wrapper::Cartesian>(arena, *from._impl_.position_)
                : nullptr;
  _impl_.euler_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::abb::egm::wrapper::Euler>(arena, *from._impl_.euler_)
                : nullptr;
  _impl_.quaternion_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::abb::egm::wrapper::Quaternion>(arena, *from._impl_.quaternion_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.CartesianPose)
}
inline PROTOBUF_NDEBUG_INLINE CartesianPose::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CartesianPose::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_),
           0,
           offsetof(Impl_, quaternion_) -
               offsetof(Impl_, position_) +
               sizeof(Impl_::quaternion_));
}
CartesianPose::~CartesianPose() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.CartesianPose)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CartesianPose::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.position_;
  delete _impl_.euler_;
  delete _impl_.quaternion_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CartesianPose::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.CartesianPose)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.euler_ != nullptr);
      _impl_.euler_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.quaternion_ != nullptr);
      _impl_.quaternion_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CartesianPose::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> CartesianPose::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CartesianPose, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CartesianPose_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .abb.egm.wrapper.Cartesian position = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CartesianPose, _impl_.position_)}},
    // optional .abb.egm.wrapper.Euler euler = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(CartesianPose, _impl_.euler_)}},
    // optional .abb.egm.wrapper.Quaternion quaternion = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(CartesianPose, _impl_.quaternion_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .abb.egm.wrapper.Cartesian position = 1;
    {PROTOBUF_FIELD_OFFSET(CartesianPose, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.wrapper.Euler euler = 2;
    {PROTOBUF_FIELD_OFFSET(CartesianPose, _impl_.euler_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.wrapper.Quaternion quaternion = 3;
    {PROTOBUF_FIELD_OFFSET(CartesianPose, _impl_.quaternion_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::Cartesian>()},
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::Euler>()},
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::Quaternion>()},
  }}, {{
  }},
};

::uint8_t* CartesianPose::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.CartesianPose)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .abb.egm.wrapper.Cartesian position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.wrapper.Euler euler = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::euler(this),
        _Internal::euler(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.wrapper.Quaternion quaternion = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::quaternion(this),
        _Internal::quaternion(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.CartesianPose)
  return target;
}

::size_t CartesianPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.CartesianPose)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .abb.egm.wrapper.Cartesian position = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.position_);
    }

    // optional .abb.egm.wrapper.Euler euler = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.euler_);
    }

    // optional .abb.egm.wrapper.Quaternion quaternion = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.quaternion_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CartesianPose::_class_data_ = {
    CartesianPose::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CartesianPose::GetClassData() const {
  return &_class_data_;
}

void CartesianPose::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CartesianPose*>(&to_msg);
  auto& from = static_cast<const CartesianPose&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.CartesianPose)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_position()->::abb::egm::wrapper::Cartesian::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_euler()->::abb::egm::wrapper::Euler::MergeFrom(
          from._internal_euler());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_quaternion()->::abb::egm::wrapper::Quaternion::MergeFrom(
          from._internal_quaternion());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CartesianPose::CopyFrom(const CartesianPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.CartesianPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CartesianPose::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CartesianPose::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CartesianPose::InternalSwap(CartesianPose* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CartesianPose, _impl_.quaternion_)
      + sizeof(CartesianPose::_impl_.quaternion_)
      - PROTOBUF_FIELD_OFFSET(CartesianPose, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata CartesianPose::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_2eproto_getter, &descriptor_table_egm_5fwrapper_2eproto_once,
      file_level_metadata_egm_5fwrapper_2eproto[8]);
}
// ===================================================================

class CartesianVelocity::_Internal {
 public:
  using HasBits = decltype(std::declval<CartesianVelocity>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CartesianVelocity, _impl_._has_bits_);
  static const ::abb::egm::wrapper::Cartesian& linear(const CartesianVelocity* msg);
  static void set_has_linear(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::egm::wrapper::Euler& angular(const CartesianVelocity* msg);
  static void set_has_angular(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::abb::egm::wrapper::Cartesian& CartesianVelocity::_Internal::linear(const CartesianVelocity* msg) {
  return *msg->_impl_.linear_;
}
const ::abb::egm::wrapper::Euler& CartesianVelocity::_Internal::angular(const CartesianVelocity* msg) {
  return *msg->_impl_.angular_;
}
CartesianVelocity::CartesianVelocity(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.CartesianVelocity)
}
inline PROTOBUF_NDEBUG_INLINE CartesianVelocity::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CartesianVelocity::CartesianVelocity(
    ::google::protobuf::Arena* arena,
    const CartesianVelocity& from)
    : ::google::protobuf::Message(arena) {
  CartesianVelocity* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.linear_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::abb::egm::wrapper::Cartesian>(arena, *from._impl_.linear_)
                : nullptr;
  _impl_.angular_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::abb::egm::wrapper::Euler>(arena, *from._impl_.angular_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.CartesianVelocity)
}
inline PROTOBUF_NDEBUG_INLINE CartesianVelocity::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CartesianVelocity::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, linear_),
           0,
           offsetof(Impl_, angular_) -
               offsetof(Impl_, linear_) +
               sizeof(Impl_::angular_));
}
CartesianVelocity::~CartesianVelocity() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.CartesianVelocity)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CartesianVelocity::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.linear_;
  delete _impl_.angular_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CartesianVelocity::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.CartesianVelocity)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.linear_ != nullptr);
      _impl_.linear_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.angular_ != nullptr);
      _impl_.angular_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CartesianVelocity::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> CartesianVelocity::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CartesianVelocity, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CartesianVelocity_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional .abb.egm.wrapper.Euler angular = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(CartesianVelocity, _impl_.angular_)}},
    // optional .abb.egm.wrapper.Cartesian linear = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CartesianVelocity, _impl_.linear_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .abb.egm.wrapper.Cartesian linear = 1;
    {PROTOBUF_FIELD_OFFSET(CartesianVelocity, _impl_.linear_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.wrapper.Euler angular = 2;
    {PROTOBUF_FIELD_OFFSET(CartesianVelocity, _impl_.angular_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::Cartesian>()},
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::Euler>()},
  }}, {{
  }},
};

::uint8_t* CartesianVelocity::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.CartesianVelocity)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .abb.egm.wrapper.Cartesian linear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::linear(this),
        _Internal::linear(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.wrapper.Euler angular = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::angular(this),
        _Internal::angular(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.CartesianVelocity)
  return target;
}

::size_t CartesianVelocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.CartesianVelocity)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .abb.egm.wrapper.Cartesian linear = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.linear_);
    }

    // optional .abb.egm.wrapper.Euler angular = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.angular_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CartesianVelocity::_class_data_ = {
    CartesianVelocity::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CartesianVelocity::GetClassData() const {
  return &_class_data_;
}

void CartesianVelocity::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CartesianVelocity*>(&to_msg);
  auto& from = static_cast<const CartesianVelocity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.CartesianVelocity)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_linear()->::abb::egm::wrapper::Cartesian::MergeFrom(
          from._internal_linear());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_angular()->::abb::egm::wrapper::Euler::MergeFrom(
          from._internal_angular());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CartesianVelocity::CopyFrom(const CartesianVelocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.CartesianVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CartesianVelocity::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CartesianVelocity::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CartesianVelocity::InternalSwap(CartesianVelocity* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CartesianVelocity, _impl_.angular_)
      + sizeof(CartesianVelocity::_impl_.angular_)
      - PROTOBUF_FIELD_OFFSET(CartesianVelocity, _impl_.linear_)>(
          reinterpret_cast<char*>(&_impl_.linear_),
          reinterpret_cast<char*>(&other->_impl_.linear_));
}

::google::protobuf::Metadata CartesianVelocity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_2eproto_getter, &descriptor_table_egm_5fwrapper_2eproto_once,
      file_level_metadata_egm_5fwrapper_2eproto[9]);
}
// ===================================================================

class CartesianSpace::_Internal {
 public:
  using HasBits = decltype(std::declval<CartesianSpace>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CartesianSpace, _impl_._has_bits_);
  static const ::abb::egm::wrapper::CartesianPose& pose(const CartesianSpace* msg);
  static void set_has_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::egm::wrapper::CartesianVelocity& velocity(const CartesianSpace* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::abb::egm::wrapper::CartesianPose& CartesianSpace::_Internal::pose(const CartesianSpace* msg) {
  return *msg->_impl_.pose_;
}
const ::abb::egm::wrapper::CartesianVelocity& CartesianSpace::_Internal::velocity(const CartesianSpace* msg) {
  return *msg->_impl_.velocity_;
}
CartesianSpace::CartesianSpace(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.CartesianSpace)
}
inline PROTOBUF_NDEBUG_INLINE CartesianSpace::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CartesianSpace::CartesianSpace(
    ::google::protobuf::Arena* arena,
    const CartesianSpace& from)
    : ::google::protobuf::Message(arena) {
  CartesianSpace* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.pose_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::abb::egm::wrapper::CartesianPose>(arena, *from._impl_.pose_)
                : nullptr;
  _impl_.velocity_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::abb::egm::wrapper::CartesianVelocity>(arena, *from._impl_.velocity_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.CartesianSpace)
}
inline PROTOBUF_NDEBUG_INLINE CartesianSpace::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CartesianSpace::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pose_),
           0,
           offsetof(Impl_, velocity_) -
               offsetof(Impl_, pose_) +
               sizeof(Impl_::velocity_));
}
CartesianSpace::~CartesianSpace() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.CartesianSpace)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CartesianSpace::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.pose_;
  delete _impl_.velocity_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CartesianSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.CartesianSpace)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.pose_ != nullptr);
      _impl_.pose_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.velocity_ != nullptr);
      _impl_.velocity_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CartesianSpace::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> CartesianSpace::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CartesianSpace, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CartesianSpace_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional .abb.egm.wrapper.CartesianVelocity velocity = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(CartesianSpace, _impl_.velocity_)}},
    // optional .abb.egm.wrapper.CartesianPose pose = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CartesianSpace, _impl_.pose_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .abb.egm.wrapper.CartesianPose pose = 1;
    {PROTOBUF_FIELD_OFFSET(CartesianSpace, _impl_.pose_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.wrapper.CartesianVelocity velocity = 2;
    {PROTOBUF_FIELD_OFFSET(CartesianSpace, _impl_.velocity_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::CartesianPose>()},
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::CartesianVelocity>()},
  }}, {{
  }},
};

::uint8_t* CartesianSpace::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.CartesianSpace)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .abb.egm.wrapper.CartesianPose pose = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::pose(this),
        _Internal::pose(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.wrapper.CartesianVelocity velocity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::velocity(this),
        _Internal::velocity(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.CartesianSpace)
  return target;
}

::size_t CartesianSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.CartesianSpace)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .abb.egm.wrapper.CartesianPose pose = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.pose_);
    }

    // optional .abb.egm.wrapper.CartesianVelocity velocity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.velocity_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CartesianSpace::_class_data_ = {
    CartesianSpace::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CartesianSpace::GetClassData() const {
  return &_class_data_;
}

void CartesianSpace::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CartesianSpace*>(&to_msg);
  auto& from = static_cast<const CartesianSpace&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.CartesianSpace)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_pose()->::abb::egm::wrapper::CartesianPose::MergeFrom(
          from._internal_pose());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_velocity()->::abb::egm::wrapper::CartesianVelocity::MergeFrom(
          from._internal_velocity());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CartesianSpace::CopyFrom(const CartesianSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.CartesianSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CartesianSpace::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CartesianSpace::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CartesianSpace::InternalSwap(CartesianSpace* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CartesianSpace, _impl_.velocity_)
      + sizeof(CartesianSpace::_impl_.velocity_)
      - PROTOBUF_FIELD_OFFSET(CartesianSpace, _impl_.pose_)>(
          reinterpret_cast<char*>(&_impl_.pose_),
          reinterpret_cast<char*>(&other->_impl_.pose_));
}

::google::protobuf::Metadata CartesianSpace::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_2eproto_getter, &descriptor_table_egm_5fwrapper_2eproto_once,
      file_level_metadata_egm_5fwrapper_2eproto[10]);
}
// ===================================================================

class Robot::_Internal {
 public:
  using HasBits = decltype(std::declval<Robot>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Robot, _impl_._has_bits_);
  static const ::abb::egm::wrapper::JointSpace& joints(const Robot* msg);
  static void set_has_joints(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::egm::wrapper::CartesianSpace& cartesian(const Robot* msg);
  static void set_has_cartesian(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::abb::egm::wrapper::JointSpace& Robot::_Internal::joints(const Robot* msg) {
  return *msg->_impl_.joints_;
}
const ::abb::egm::wrapper::CartesianSpace& Robot::_Internal::cartesian(const Robot* msg) {
  return *msg->_impl_.cartesian_;
}
Robot::Robot(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.Robot)
}
inline PROTOBUF_NDEBUG_INLINE Robot::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Robot::Robot(
    ::google::protobuf::Arena* arena,
    const Robot& from)
    : ::google::protobuf::Message(arena) {
  Robot* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.joints_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::abb::egm::wrapper::JointSpace>(arena, *from._impl_.joints_)
                : nullptr;
  _impl_.cartesian_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::abb::egm::wrapper::CartesianSpace>(arena, *from._impl_.cartesian_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.Robot)
}
inline PROTOBUF_NDEBUG_INLINE Robot::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Robot::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, joints_),
           0,
           offsetof(Impl_, cartesian_) -
               offsetof(Impl_, joints_) +
               sizeof(Impl_::cartesian_));
}
Robot::~Robot() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.Robot)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Robot::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.joints_;
  delete _impl_.cartesian_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Robot::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.Robot)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.joints_ != nullptr);
      _impl_.joints_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.cartesian_ != nullptr);
      _impl_.cartesian_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Robot::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> Robot::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Robot, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Robot_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional .abb.egm.wrapper.CartesianSpace cartesian = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Robot, _impl_.cartesian_)}},
    // optional .abb.egm.wrapper.JointSpace joints = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Robot, _impl_.joints_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .abb.egm.wrapper.JointSpace joints = 1;
    {PROTOBUF_FIELD_OFFSET(Robot, _impl_.joints_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.wrapper.CartesianSpace cartesian = 2;
    {PROTOBUF_FIELD_OFFSET(Robot, _impl_.cartesian_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::JointSpace>()},
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::CartesianSpace>()},
  }}, {{
  }},
};

::uint8_t* Robot::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.Robot)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .abb.egm.wrapper.JointSpace joints = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::joints(this),
        _Internal::joints(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.wrapper.CartesianSpace cartesian = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::cartesian(this),
        _Internal::cartesian(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.Robot)
  return target;
}

::size_t Robot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.Robot)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .abb.egm.wrapper.JointSpace joints = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.joints_);
    }

    // optional .abb.egm.wrapper.CartesianSpace cartesian = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.cartesian_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Robot::_class_data_ = {
    Robot::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Robot::GetClassData() const {
  return &_class_data_;
}

void Robot::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Robot*>(&to_msg);
  auto& from = static_cast<const Robot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.Robot)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_joints()->::abb::egm::wrapper::JointSpace::MergeFrom(
          from._internal_joints());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cartesian()->::abb::egm::wrapper::CartesianSpace::MergeFrom(
          from._internal_cartesian());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Robot::CopyFrom(const Robot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Robot::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Robot::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Robot::InternalSwap(Robot* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Robot, _impl_.cartesian_)
      + sizeof(Robot::_impl_.cartesian_)
      - PROTOBUF_FIELD_OFFSET(Robot, _impl_.joints_)>(
          reinterpret_cast<char*>(&_impl_.joints_),
          reinterpret_cast<char*>(&other->_impl_.joints_));
}

::google::protobuf::Metadata Robot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_2eproto_getter, &descriptor_table_egm_5fwrapper_2eproto_once,
      file_level_metadata_egm_5fwrapper_2eproto[11]);
}
// ===================================================================

class External::_Internal {
 public:
  using HasBits = decltype(std::declval<External>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(External, _impl_._has_bits_);
  static const ::abb::egm::wrapper::JointSpace& joints(const External* msg);
  static void set_has_joints(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::abb::egm::wrapper::JointSpace& External::_Internal::joints(const External* msg) {
  return *msg->_impl_.joints_;
}
External::External(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.External)
}
inline PROTOBUF_NDEBUG_INLINE External::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

External::External(
    ::google::protobuf::Arena* arena,
    const External& from)
    : ::google::protobuf::Message(arena) {
  External* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.joints_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::abb::egm::wrapper::JointSpace>(arena, *from._impl_.joints_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.External)
}
inline PROTOBUF_NDEBUG_INLINE External::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void External::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.joints_ = {};
}
External::~External() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.External)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void External::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.joints_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void External::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.External)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.joints_ != nullptr);
    _impl_.joints_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* External::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> External::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(External, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_External_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional .abb.egm.wrapper.JointSpace joints = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(External, _impl_.joints_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .abb.egm.wrapper.JointSpace joints = 1;
    {PROTOBUF_FIELD_OFFSET(External, _impl_.joints_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::JointSpace>()},
  }}, {{
  }},
};

::uint8_t* External::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.External)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .abb.egm.wrapper.JointSpace joints = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::joints(this),
        _Internal::joints(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.External)
  return target;
}

::size_t External::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.External)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .abb.egm.wrapper.JointSpace joints = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.joints_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData External::_class_data_ = {
    External::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* External::GetClassData() const {
  return &_class_data_;
}

void External::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<External*>(&to_msg);
  auto& from = static_cast<const External&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.External)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_joints()->::abb::egm::wrapper::JointSpace::MergeFrom(
        from._internal_joints());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void External::CopyFrom(const External& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.External)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool External::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* External::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void External::InternalSwap(External* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.joints_, other->_impl_.joints_);
}

::google::protobuf::Metadata External::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_2eproto_getter, &descriptor_table_egm_5fwrapper_2eproto_once,
      file_level_metadata_egm_5fwrapper_2eproto[12]);
}
// ===================================================================

class Feedback::_Internal {
 public:
  using HasBits = decltype(std::declval<Feedback>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Feedback, _impl_._has_bits_);
  static const ::abb::egm::wrapper::Robot& robot(const Feedback* msg);
  static void set_has_robot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::egm::wrapper::External& external(const Feedback* msg);
  static void set_has_external(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::abb::egm::wrapper::Clock& time(const Feedback* msg);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::abb::egm::wrapper::Robot& Feedback::_Internal::robot(const Feedback* msg) {
  return *msg->_impl_.robot_;
}
const ::abb::egm::wrapper::External& Feedback::_Internal::external(const Feedback* msg) {
  return *msg->_impl_.external_;
}
const ::abb::egm::wrapper::Clock& Feedback::_Internal::time(const Feedback* msg) {
  return *msg->_impl_.time_;
}
Feedback::Feedback(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.Feedback)
}
inline PROTOBUF_NDEBUG_INLINE Feedback::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Feedback::Feedback(
    ::google::protobuf::Arena* arena,
    const Feedback& from)
    : ::google::protobuf::Message(arena) {
  Feedback* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.robot_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::abb::egm::wrapper::Robot>(arena, *from._impl_.robot_)
                : nullptr;
  _impl_.external_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::abb::egm::wrapper::External>(arena, *from._impl_.external_)
                : nullptr;
  _impl_.time_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::abb::egm::wrapper::Clock>(arena, *from._impl_.time_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.Feedback)
}
inline PROTOBUF_NDEBUG_INLINE Feedback::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Feedback::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, robot_),
           0,
           offsetof(Impl_, time_) -
               offsetof(Impl_, robot_) +
               sizeof(Impl_::time_));
}
Feedback::~Feedback() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.Feedback)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Feedback::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.robot_;
  delete _impl_.external_;
  delete _impl_.time_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Feedback::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.Feedback)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.robot_ != nullptr);
      _impl_.robot_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.external_ != nullptr);
      _impl_.external_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.time_ != nullptr);
      _impl_.time_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Feedback::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> Feedback::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Feedback, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Feedback_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .abb.egm.wrapper.Robot robot = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Feedback, _impl_.robot_)}},
    // optional .abb.egm.wrapper.External external = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Feedback, _impl_.external_)}},
    // optional .abb.egm.wrapper.Clock time = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Feedback, _impl_.time_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .abb.egm.wrapper.Robot robot = 1;
    {PROTOBUF_FIELD_OFFSET(Feedback, _impl_.robot_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.wrapper.External external = 2;
    {PROTOBUF_FIELD_OFFSET(Feedback, _impl_.external_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.wrapper.Clock time = 3;
    {PROTOBUF_FIELD_OFFSET(Feedback, _impl_.time_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::Robot>()},
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::External>()},
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::Clock>()},
  }}, {{
  }},
};

::uint8_t* Feedback::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.Feedback)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .abb.egm.wrapper.Robot robot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::robot(this),
        _Internal::robot(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.wrapper.External external = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::external(this),
        _Internal::external(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.wrapper.Clock time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.Feedback)
  return target;
}

::size_t Feedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.Feedback)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .abb.egm.wrapper.Robot robot = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.robot_);
    }

    // optional .abb.egm.wrapper.External external = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.external_);
    }

    // optional .abb.egm.wrapper.Clock time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.time_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Feedback::_class_data_ = {
    Feedback::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Feedback::GetClassData() const {
  return &_class_data_;
}

void Feedback::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Feedback*>(&to_msg);
  auto& from = static_cast<const Feedback&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.Feedback)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_robot()->::abb::egm::wrapper::Robot::MergeFrom(
          from._internal_robot());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_external()->::abb::egm::wrapper::External::MergeFrom(
          from._internal_external());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_time()->::abb::egm::wrapper::Clock::MergeFrom(
          from._internal_time());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Feedback::CopyFrom(const Feedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.Feedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Feedback::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Feedback::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Feedback::InternalSwap(Feedback* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Feedback, _impl_.time_)
      + sizeof(Feedback::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(Feedback, _impl_.robot_)>(
          reinterpret_cast<char*>(&_impl_.robot_),
          reinterpret_cast<char*>(&other->_impl_.robot_));
}

::google::protobuf::Metadata Feedback::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_2eproto_getter, &descriptor_table_egm_5fwrapper_2eproto_once,
      file_level_metadata_egm_5fwrapper_2eproto[13]);
}
// ===================================================================

class Planned::_Internal {
 public:
  using HasBits = decltype(std::declval<Planned>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Planned, _impl_._has_bits_);
  static const ::abb::egm::wrapper::Robot& robot(const Planned* msg);
  static void set_has_robot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::egm::wrapper::External& external(const Planned* msg);
  static void set_has_external(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::abb::egm::wrapper::Clock& time(const Planned* msg);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::abb::egm::wrapper::Robot& Planned::_Internal::robot(const Planned* msg) {
  return *msg->_impl_.robot_;
}
const ::abb::egm::wrapper::External& Planned::_Internal::external(const Planned* msg) {
  return *msg->_impl_.external_;
}
const ::abb::egm::wrapper::Clock& Planned::_Internal::time(const Planned* msg) {
  return *msg->_impl_.time_;
}
Planned::Planned(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.Planned)
}
inline PROTOBUF_NDEBUG_INLINE Planned::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Planned::Planned(
    ::google::protobuf::Arena* arena,
    const Planned& from)
    : ::google::protobuf::Message(arena) {
  Planned* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.robot_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::abb::egm::wrapper::Robot>(arena, *from._impl_.robot_)
                : nullptr;
  _impl_.external_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::abb::egm::wrapper::External>(arena, *from._impl_.external_)
                : nullptr;
  _impl_.time_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::abb::egm::wrapper::Clock>(arena, *from._impl_.time_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.Planned)
}
inline PROTOBUF_NDEBUG_INLINE Planned::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Planned::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, robot_),
           0,
           offsetof(Impl_, time_) -
               offsetof(Impl_, robot_) +
               sizeof(Impl_::time_));
}
Planned::~Planned() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.Planned)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Planned::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.robot_;
  delete _impl_.external_;
  delete _impl_.time_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Planned::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.Planned)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.robot_ != nullptr);
      _impl_.robot_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.external_ != nullptr);
      _impl_.external_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.time_ != nullptr);
      _impl_.time_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Planned::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> Planned::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Planned, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Planned_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .abb.egm.wrapper.Robot robot = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Planned, _impl_.robot_)}},
    // optional .abb.egm.wrapper.External external = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Planned, _impl_.external_)}},
    // optional .abb.egm.wrapper.Clock time = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Planned, _impl_.time_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .abb.egm.wrapper.Robot robot = 1;
    {PROTOBUF_FIELD_OFFSET(Planned, _impl_.robot_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.wrapper.External external = 2;
    {PROTOBUF_FIELD_OFFSET(Planned, _impl_.external_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.wrapper.Clock time = 3;
    {PROTOBUF_FIELD_OFFSET(Planned, _impl_.time_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::Robot>()},
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::External>()},
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::Clock>()},
  }}, {{
  }},
};

::uint8_t* Planned::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.Planned)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .abb.egm.wrapper.Robot robot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::robot(this),
        _Internal::robot(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.wrapper.External external = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::external(this),
        _Internal::external(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.wrapper.Clock time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.Planned)
  return target;
}

::size_t Planned::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.Planned)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .abb.egm.wrapper.Robot robot = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.robot_);
    }

    // optional .abb.egm.wrapper.External external = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.external_);
    }

    // optional .abb.egm.wrapper.Clock time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.time_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Planned::_class_data_ = {
    Planned::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Planned::GetClassData() const {
  return &_class_data_;
}

void Planned::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Planned*>(&to_msg);
  auto& from = static_cast<const Planned&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.Planned)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_robot()->::abb::egm::wrapper::Robot::MergeFrom(
          from._internal_robot());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_external()->::abb::egm::wrapper::External::MergeFrom(
          from._internal_external());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_time()->::abb::egm::wrapper::Clock::MergeFrom(
          from._internal_time());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Planned::CopyFrom(const Planned& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.Planned)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Planned::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Planned::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Planned::InternalSwap(Planned* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Planned, _impl_.time_)
      + sizeof(Planned::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(Planned, _impl_.robot_)>(
          reinterpret_cast<char*>(&_impl_.robot_),
          reinterpret_cast<char*>(&other->_impl_.robot_));
}

::google::protobuf::Metadata Planned::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_2eproto_getter, &descriptor_table_egm_5fwrapper_2eproto_once,
      file_level_metadata_egm_5fwrapper_2eproto[14]);
}
// ===================================================================

class Input::_Internal {
 public:
  using HasBits = decltype(std::declval<Input>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Input, _impl_._has_bits_);
  static const ::abb::egm::wrapper::Header& header(const Input* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::egm::wrapper::Feedback& feedback(const Input* msg);
  static void set_has_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::abb::egm::wrapper::Planned& planned(const Input* msg);
  static void set_has_planned(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::abb::egm::wrapper::Status& status(const Input* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::abb::egm::wrapper::Header& Input::_Internal::header(const Input* msg) {
  return *msg->_impl_.header_;
}
const ::abb::egm::wrapper::Feedback& Input::_Internal::feedback(const Input* msg) {
  return *msg->_impl_.feedback_;
}
const ::abb::egm::wrapper::Planned& Input::_Internal::planned(const Input* msg) {
  return *msg->_impl_.planned_;
}
const ::abb::egm::wrapper::Status& Input::_Internal::status(const Input* msg) {
  return *msg->_impl_.status_;
}
Input::Input(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.Input)
}
inline PROTOBUF_NDEBUG_INLINE Input::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Input::Input(
    ::google::protobuf::Arena* arena,
    const Input& from)
    : ::google::protobuf::Message(arena) {
  Input* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::abb::egm::wrapper::Header>(arena, *from._impl_.header_)
                : nullptr;
  _impl_.feedback_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::abb::egm::wrapper::Feedback>(arena, *from._impl_.feedback_)
                : nullptr;
  _impl_.planned_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::abb::egm::wrapper::Planned>(arena, *from._impl_.planned_)
                : nullptr;
  _impl_.status_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::abb::egm::wrapper::Status>(arena, *from._impl_.status_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.Input)
}
inline PROTOBUF_NDEBUG_INLINE Input::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Input::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, status_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::status_));
}
Input::~Input() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.Input)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Input::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.header_;
  delete _impl_.feedback_;
  delete _impl_.planned_;
  delete _impl_.status_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Input::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.Input)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.feedback_ != nullptr);
      _impl_.feedback_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.planned_ != nullptr);
      _impl_.planned_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.status_ != nullptr);
      _impl_.status_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Input::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2> Input::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Input, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Input_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional .abb.egm.wrapper.Status status = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(Input, _impl_.status_)}},
    // optional .abb.egm.wrapper.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Input, _impl_.header_)}},
    // optional .abb.egm.wrapper.Feedback feedback = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Input, _impl_.feedback_)}},
    // optional .abb.egm.wrapper.Planned planned = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Input, _impl_.planned_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .abb.egm.wrapper.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(Input, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.wrapper.Feedback feedback = 2;
    {PROTOBUF_FIELD_OFFSET(Input, _impl_.feedback_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.wrapper.Planned planned = 3;
    {PROTOBUF_FIELD_OFFSET(Input, _impl_.planned_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.wrapper.Status status = 4;
    {PROTOBUF_FIELD_OFFSET(Input, _impl_.status_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::Header>()},
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::Feedback>()},
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::Planned>()},
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::Status>()},
  }}, {{
  }},
};

::uint8_t* Input::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.Input)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .abb.egm.wrapper.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.wrapper.Feedback feedback = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::feedback(this),
        _Internal::feedback(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.wrapper.Planned planned = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::planned(this),
        _Internal::planned(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.wrapper.Status status = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.Input)
  return target;
}

::size_t Input::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.Input)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .abb.egm.wrapper.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.header_);
    }

    // optional .abb.egm.wrapper.Feedback feedback = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.feedback_);
    }

    // optional .abb.egm.wrapper.Planned planned = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.planned_);
    }

    // optional .abb.egm.wrapper.Status status = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.status_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Input::_class_data_ = {
    Input::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Input::GetClassData() const {
  return &_class_data_;
}

void Input::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Input*>(&to_msg);
  auto& from = static_cast<const Input&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.Input)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::abb::egm::wrapper::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_feedback()->::abb::egm::wrapper::Feedback::MergeFrom(
          from._internal_feedback());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_planned()->::abb::egm::wrapper::Planned::MergeFrom(
          from._internal_planned());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_status()->::abb::egm::wrapper::Status::MergeFrom(
          from._internal_status());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Input::CopyFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Input::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Input::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Input::InternalSwap(Input* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Input, _impl_.status_)
      + sizeof(Input::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(Input, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata Input::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_2eproto_getter, &descriptor_table_egm_5fwrapper_2eproto_once,
      file_level_metadata_egm_5fwrapper_2eproto[15]);
}
// ===================================================================

class Output::_Internal {
 public:
  using HasBits = decltype(std::declval<Output>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Output, _impl_._has_bits_);
  static const ::abb::egm::wrapper::Robot& robot(const Output* msg);
  static void set_has_robot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::egm::wrapper::External& external(const Output* msg);
  static void set_has_external(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::abb::egm::wrapper::Robot& Output::_Internal::robot(const Output* msg) {
  return *msg->_impl_.robot_;
}
const ::abb::egm::wrapper::External& Output::_Internal::external(const Output* msg) {
  return *msg->_impl_.external_;
}
Output::Output(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.Output)
}
inline PROTOBUF_NDEBUG_INLINE Output::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Output::Output(
    ::google::protobuf::Arena* arena,
    const Output& from)
    : ::google::protobuf::Message(arena) {
  Output* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.robot_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::abb::egm::wrapper::Robot>(arena, *from._impl_.robot_)
                : nullptr;
  _impl_.external_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::abb::egm::wrapper::External>(arena, *from._impl_.external_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.Output)
}
inline PROTOBUF_NDEBUG_INLINE Output::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Output::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, robot_),
           0,
           offsetof(Impl_, external_) -
               offsetof(Impl_, robot_) +
               sizeof(Impl_::external_));
}
Output::~Output() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.Output)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Output::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.robot_;
  delete _impl_.external_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Output::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.Output)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.robot_ != nullptr);
      _impl_.robot_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.external_ != nullptr);
      _impl_.external_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Output::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> Output::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Output, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Output_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional .abb.egm.wrapper.External external = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Output, _impl_.external_)}},
    // optional .abb.egm.wrapper.Robot robot = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Output, _impl_.robot_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .abb.egm.wrapper.Robot robot = 1;
    {PROTOBUF_FIELD_OFFSET(Output, _impl_.robot_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.wrapper.External external = 2;
    {PROTOBUF_FIELD_OFFSET(Output, _impl_.external_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::Robot>()},
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::External>()},
  }}, {{
  }},
};

::uint8_t* Output::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.Output)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .abb.egm.wrapper.Robot robot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::robot(this),
        _Internal::robot(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.wrapper.External external = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::external(this),
        _Internal::external(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.Output)
  return target;
}

::size_t Output::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.Output)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .abb.egm.wrapper.Robot robot = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.robot_);
    }

    // optional .abb.egm.wrapper.External external = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.external_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Output::_class_data_ = {
    Output::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Output::GetClassData() const {
  return &_class_data_;
}

void Output::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Output*>(&to_msg);
  auto& from = static_cast<const Output&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.Output)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_robot()->::abb::egm::wrapper::Robot::MergeFrom(
          from._internal_robot());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_external()->::abb::egm::wrapper::External::MergeFrom(
          from._internal_external());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Output::CopyFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Output::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Output::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Output::InternalSwap(Output* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Output, _impl_.external_)
      + sizeof(Output::_impl_.external_)
      - PROTOBUF_FIELD_OFFSET(Output, _impl_.robot_)>(
          reinterpret_cast<char*>(&_impl_.robot_),
          reinterpret_cast<char*>(&other->_impl_.robot_));
}

::google::protobuf::Metadata Output::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_2eproto_getter, &descriptor_table_egm_5fwrapper_2eproto_once,
      file_level_metadata_egm_5fwrapper_2eproto[16]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace wrapper
}  // namespace egm
}  // namespace abb
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
