// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: egm_wrapper_trajectory.proto

#include "egm_wrapper_trajectory.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace abb {
namespace egm {
namespace wrapper {
namespace trajectory {

inline constexpr JointGoal::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        position_{nullptr},
        velocity_{nullptr},
        acceleration_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR JointGoal::JointGoal(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct JointGoalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JointGoalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~JointGoalDefaultTypeInternal() {}
  union {
    JointGoal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JointGoalDefaultTypeInternal _JointGoal_default_instance_;

inline constexpr RobotVelocityGoal::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        joints_{nullptr},
        cartesian_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR RobotVelocityGoal::RobotVelocityGoal(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RobotVelocityGoalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RobotVelocityGoalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RobotVelocityGoalDefaultTypeInternal() {}
  union {
    RobotVelocityGoal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RobotVelocityGoalDefaultTypeInternal _RobotVelocityGoal_default_instance_;

inline constexpr RobotPositionGoal::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        joints_{nullptr},
        cartesian_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR RobotPositionGoal::RobotPositionGoal(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RobotPositionGoalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RobotPositionGoalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RobotPositionGoalDefaultTypeInternal() {}
  union {
    RobotPositionGoal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RobotPositionGoalDefaultTypeInternal _RobotPositionGoal_default_instance_;

inline constexpr ExternalGoal::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        joints_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ExternalGoal::ExternalGoal(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ExternalGoalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExternalGoalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExternalGoalDefaultTypeInternal() {}
  union {
    ExternalGoal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExternalGoalDefaultTypeInternal _ExternalGoal_default_instance_;

inline constexpr CartesianGoal::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        pose_{nullptr},
        velocity_{nullptr},
        acceleration_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR CartesianGoal::CartesianGoal(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CartesianGoalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CartesianGoalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CartesianGoalDefaultTypeInternal() {}
  union {
    CartesianGoal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CartesianGoalDefaultTypeInternal _CartesianGoal_default_instance_;

inline constexpr StaticVelocityGoal::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        robot_{nullptr},
        external_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR StaticVelocityGoal::StaticVelocityGoal(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct StaticVelocityGoalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StaticVelocityGoalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StaticVelocityGoalDefaultTypeInternal() {}
  union {
    StaticVelocityGoal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StaticVelocityGoalDefaultTypeInternal _StaticVelocityGoal_default_instance_;

inline constexpr StaticPositionGoal::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        robot_{nullptr},
        external_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR StaticPositionGoal::StaticPositionGoal(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct StaticPositionGoalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StaticPositionGoalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StaticPositionGoalDefaultTypeInternal() {}
  union {
    StaticPositionGoal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StaticPositionGoalDefaultTypeInternal _StaticPositionGoal_default_instance_;

inline constexpr RobotGoal::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        joints_{nullptr},
        cartesian_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR RobotGoal::RobotGoal(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RobotGoalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RobotGoalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RobotGoalDefaultTypeInternal() {}
  union {
    RobotGoal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RobotGoalDefaultTypeInternal _RobotGoal_default_instance_;

inline constexpr PointGoal::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        robot_{nullptr},
        external_{nullptr},
        duration_{0},
        reach_{false} {}

template <typename>
PROTOBUF_CONSTEXPR PointGoal::PointGoal(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PointGoalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointGoalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointGoalDefaultTypeInternal() {}
  union {
    PointGoal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointGoalDefaultTypeInternal _PointGoal_default_instance_;

inline constexpr TrajectoryGoal::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : points_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TrajectoryGoal::TrajectoryGoal(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TrajectoryGoalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrajectoryGoalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrajectoryGoalDefaultTypeInternal() {}
  union {
    TrajectoryGoal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrajectoryGoalDefaultTypeInternal _TrajectoryGoal_default_instance_;

inline constexpr ExecutionProgress::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        inputs_{nullptr},
        outputs_{nullptr},
        goal_{nullptr},
        active_trajectory_{nullptr},
        state_{static_cast< ::abb::egm::wrapper::trajectory::ExecutionProgress_State >(0)},
        sub_state_{static_cast< ::abb::egm::wrapper::trajectory::ExecutionProgress_SubState >(0)},
        time_passed_{0},
        goal_active_{false},
        pending_trajectories_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR ExecutionProgress::ExecutionProgress(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ExecutionProgressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecutionProgressDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecutionProgressDefaultTypeInternal() {}
  union {
    ExecutionProgress _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecutionProgressDefaultTypeInternal _ExecutionProgress_default_instance_;
}  // namespace trajectory
}  // namespace wrapper
}  // namespace egm
}  // namespace abb
static ::_pb::Metadata file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[11];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_egm_5fwrapper_5ftrajectory_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_egm_5fwrapper_5ftrajectory_2eproto = nullptr;
const ::uint32_t TableStruct_egm_5fwrapper_5ftrajectory_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::JointGoal, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::JointGoal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::JointGoal, _impl_.position_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::JointGoal, _impl_.velocity_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::JointGoal, _impl_.acceleration_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::CartesianGoal, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::CartesianGoal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::CartesianGoal, _impl_.pose_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::CartesianGoal, _impl_.velocity_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::CartesianGoal, _impl_.acceleration_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotGoal, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotGoal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotGoal, _impl_.joints_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotGoal, _impl_.cartesian_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExternalGoal, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExternalGoal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExternalGoal, _impl_.joints_),
    0,
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::PointGoal, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::PointGoal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::PointGoal, _impl_.duration_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::PointGoal, _impl_.robot_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::PointGoal, _impl_.external_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::PointGoal, _impl_.reach_),
    2,
    0,
    1,
    3,
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotPositionGoal, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotPositionGoal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotPositionGoal, _impl_.joints_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotPositionGoal, _impl_.cartesian_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotVelocityGoal, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotVelocityGoal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotVelocityGoal, _impl_.joints_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::RobotVelocityGoal, _impl_.cartesian_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::TrajectoryGoal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::TrajectoryGoal, _impl_.points_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::StaticPositionGoal, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::StaticPositionGoal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::StaticPositionGoal, _impl_.robot_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::StaticPositionGoal, _impl_.external_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::StaticVelocityGoal, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::StaticVelocityGoal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::StaticVelocityGoal, _impl_.robot_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::StaticVelocityGoal, _impl_.external_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExecutionProgress, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExecutionProgress, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExecutionProgress, _impl_.state_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExecutionProgress, _impl_.sub_state_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExecutionProgress, _impl_.inputs_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExecutionProgress, _impl_.outputs_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExecutionProgress, _impl_.time_passed_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExecutionProgress, _impl_.goal_active_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExecutionProgress, _impl_.goal_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExecutionProgress, _impl_.active_trajectory_),
    PROTOBUF_FIELD_OFFSET(::abb::egm::wrapper::trajectory::ExecutionProgress, _impl_.pending_trajectories_),
    4,
    5,
    0,
    1,
    6,
    7,
    2,
    3,
    8,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 11, -1, sizeof(::abb::egm::wrapper::trajectory::JointGoal)},
        {14, 25, -1, sizeof(::abb::egm::wrapper::trajectory::CartesianGoal)},
        {28, 38, -1, sizeof(::abb::egm::wrapper::trajectory::RobotGoal)},
        {40, 49, -1, sizeof(::abb::egm::wrapper::trajectory::ExternalGoal)},
        {50, 62, -1, sizeof(::abb::egm::wrapper::trajectory::PointGoal)},
        {66, 76, -1, sizeof(::abb::egm::wrapper::trajectory::RobotPositionGoal)},
        {78, 88, -1, sizeof(::abb::egm::wrapper::trajectory::RobotVelocityGoal)},
        {90, -1, -1, sizeof(::abb::egm::wrapper::trajectory::TrajectoryGoal)},
        {99, 109, -1, sizeof(::abb::egm::wrapper::trajectory::StaticPositionGoal)},
        {111, 121, -1, sizeof(::abb::egm::wrapper::trajectory::StaticVelocityGoal)},
        {123, 140, -1, sizeof(::abb::egm::wrapper::trajectory::ExecutionProgress)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::abb::egm::wrapper::trajectory::_JointGoal_default_instance_._instance,
    &::abb::egm::wrapper::trajectory::_CartesianGoal_default_instance_._instance,
    &::abb::egm::wrapper::trajectory::_RobotGoal_default_instance_._instance,
    &::abb::egm::wrapper::trajectory::_ExternalGoal_default_instance_._instance,
    &::abb::egm::wrapper::trajectory::_PointGoal_default_instance_._instance,
    &::abb::egm::wrapper::trajectory::_RobotPositionGoal_default_instance_._instance,
    &::abb::egm::wrapper::trajectory::_RobotVelocityGoal_default_instance_._instance,
    &::abb::egm::wrapper::trajectory::_TrajectoryGoal_default_instance_._instance,
    &::abb::egm::wrapper::trajectory::_StaticPositionGoal_default_instance_._instance,
    &::abb::egm::wrapper::trajectory::_StaticVelocityGoal_default_instance_._instance,
    &::abb::egm::wrapper::trajectory::_ExecutionProgress_default_instance_._instance,
};
const char descriptor_table_protodef_egm_5fwrapper_5ftrajectory_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\034egm_wrapper_trajectory.proto\022\032abb.egm."
    "wrapper.trajectory\032\021egm_wrapper.proto\"\220\001"
    "\n\tJointGoal\022)\n\010position\030\001 \001(\0132\027.abb.egm."
    "wrapper.Joints\022)\n\010velocity\030\002 \001(\0132\027.abb.e"
    "gm.wrapper.Joints\022-\n\014acceleration\030\003 \001(\0132"
    "\027.abb.egm.wrapper.Joints\"\235\001\n\rCartesianGo"
    "al\022,\n\004pose\030\001 \001(\0132\036.abb.egm.wrapper.Carte"
    "sianPose\022,\n\010velocity\030\002 \001(\0132\032.abb.egm.wra"
    "pper.Cartesian\0220\n\014acceleration\030\003 \001(\0132\032.a"
    "bb.egm.wrapper.Cartesian\"\200\001\n\tRobotGoal\0225"
    "\n\006joints\030\001 \001(\0132%.abb.egm.wrapper.traject"
    "ory.JointGoal\022<\n\tcartesian\030\002 \001(\0132).abb.e"
    "gm.wrapper.trajectory.CartesianGoal\"E\n\014E"
    "xternalGoal\0225\n\006joints\030\001 \001(\0132%.abb.egm.wr"
    "apper.trajectory.JointGoal\"\236\001\n\tPointGoal"
    "\022\020\n\010duration\030\001 \001(\001\0224\n\005robot\030\002 \001(\0132%.abb."
    "egm.wrapper.trajectory.RobotGoal\022:\n\010exte"
    "rnal\030\003 \001(\0132(.abb.egm.wrapper.trajectory."
    "ExternalGoal\022\r\n\005reach\030\004 \001(\010\"o\n\021RobotPosi"
    "tionGoal\022\'\n\006joints\030\001 \001(\0132\027.abb.egm.wrapp"
    "er.Joints\0221\n\tcartesian\030\002 \001(\0132\036.abb.egm.w"
    "rapper.CartesianPose\"s\n\021RobotVelocityGoa"
    "l\022\'\n\006joints\030\001 \001(\0132\027.abb.egm.wrapper.Join"
    "ts\0225\n\tcartesian\030\002 \001(\0132\".abb.egm.wrapper."
    "CartesianVelocity\"G\n\016TrajectoryGoal\0225\n\006p"
    "oints\030\001 \003(\0132%.abb.egm.wrapper.trajectory"
    ".PointGoal\"}\n\022StaticPositionGoal\022<\n\005robo"
    "t\030\001 \001(\0132-.abb.egm.wrapper.trajectory.Rob"
    "otPositionGoal\022)\n\010external\030\002 \001(\0132\027.abb.e"
    "gm.wrapper.Joints\"}\n\022StaticVelocityGoal\022"
    "<\n\005robot\030\001 \001(\0132-.abb.egm.wrapper.traject"
    "ory.RobotVelocityGoal\022)\n\010external\030\002 \001(\0132"
    "\027.abb.egm.wrapper.Joints\"\276\004\n\021ExecutionPr"
    "ogress\022M\n\005state\030\001 \001(\01623.abb.egm.wrapper."
    "trajectory.ExecutionProgress.State:\tUNDE"
    "FINED\022O\n\tsub_state\030\002 \001(\01626.abb.egm.wrapp"
    "er.trajectory.ExecutionProgress.SubState"
    ":\004NONE\022&\n\006inputs\030\003 \001(\0132\026.abb.egm.wrapper"
    ".Input\022(\n\007outputs\030\004 \001(\0132\027.abb.egm.wrappe"
    "r.Output\022\023\n\013time_passed\030\005 \001(\001\022\023\n\013goal_ac"
    "tive\030\006 \001(\010\0223\n\004goal\030\007 \001(\0132%.abb.egm.wrapp"
    "er.trajectory.PointGoal\022E\n\021active_trajec"
    "tory\030\010 \001(\0132*.abb.egm.wrapper.trajectory."
    "TrajectoryGoal\022\034\n\024pending_trajectories\030\t"
    " \001(\r\"B\n\005State\022\r\n\tUNDEFINED\020\000\022\n\n\006NORMAL\020\001"
    "\022\r\n\tRAMP_DOWN\020\002\022\017\n\013STATIC_GOAL\020\003\"/\n\010SubS"
    "tate\022\010\n\004NONE\020\000\022\013\n\007RUNNING\020\001\022\014\n\010FINISHED\020"
    "\002"
};
static const ::_pbi::DescriptorTable* const descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_deps[1] =
    {
        &::descriptor_table_egm_5fwrapper_2eproto,
};
static ::absl::once_flag descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_egm_5fwrapper_5ftrajectory_2eproto = {
    false,
    false,
    1881,
    descriptor_table_protodef_egm_5fwrapper_5ftrajectory_2eproto,
    "egm_wrapper_trajectory.proto",
    &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_once,
    descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_deps,
    1,
    11,
    schemas,
    file_default_instances,
    TableStruct_egm_5fwrapper_5ftrajectory_2eproto::offsets,
    file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto,
    file_level_enum_descriptors_egm_5fwrapper_5ftrajectory_2eproto,
    file_level_service_descriptors_egm_5fwrapper_5ftrajectory_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_getter() {
  return &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_egm_5fwrapper_5ftrajectory_2eproto(&descriptor_table_egm_5fwrapper_5ftrajectory_2eproto);
namespace abb {
namespace egm {
namespace wrapper {
namespace trajectory {
const ::google::protobuf::EnumDescriptor* ExecutionProgress_State_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_egm_5fwrapper_5ftrajectory_2eproto);
  return file_level_enum_descriptors_egm_5fwrapper_5ftrajectory_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t ExecutionProgress_State_internal_data_[] = {
    262144u, 0u, };
bool ExecutionProgress_State_IsValid(int value) {
  return 0 <= value && value <= 3;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ExecutionProgress_State ExecutionProgress::UNDEFINED;
constexpr ExecutionProgress_State ExecutionProgress::NORMAL;
constexpr ExecutionProgress_State ExecutionProgress::RAMP_DOWN;
constexpr ExecutionProgress_State ExecutionProgress::STATIC_GOAL;
constexpr ExecutionProgress_State ExecutionProgress::State_MIN;
constexpr ExecutionProgress_State ExecutionProgress::State_MAX;
constexpr int ExecutionProgress::State_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* ExecutionProgress_SubState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_egm_5fwrapper_5ftrajectory_2eproto);
  return file_level_enum_descriptors_egm_5fwrapper_5ftrajectory_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t ExecutionProgress_SubState_internal_data_[] = {
    196608u, 0u, };
bool ExecutionProgress_SubState_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ExecutionProgress_SubState ExecutionProgress::NONE;
constexpr ExecutionProgress_SubState ExecutionProgress::RUNNING;
constexpr ExecutionProgress_SubState ExecutionProgress::FINISHED;
constexpr ExecutionProgress_SubState ExecutionProgress::SubState_MIN;
constexpr ExecutionProgress_SubState ExecutionProgress::SubState_MAX;
constexpr int ExecutionProgress::SubState_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class JointGoal::_Internal {
 public:
  using HasBits = decltype(std::declval<JointGoal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(JointGoal, _impl_._has_bits_);
  static const ::abb::egm::wrapper::Joints& position(const JointGoal* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::egm::wrapper::Joints& velocity(const JointGoal* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::abb::egm::wrapper::Joints& acceleration(const JointGoal* msg);
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::abb::egm::wrapper::Joints& JointGoal::_Internal::position(const JointGoal* msg) {
  return *msg->_impl_.position_;
}
const ::abb::egm::wrapper::Joints& JointGoal::_Internal::velocity(const JointGoal* msg) {
  return *msg->_impl_.velocity_;
}
const ::abb::egm::wrapper::Joints& JointGoal::_Internal::acceleration(const JointGoal* msg) {
  return *msg->_impl_.acceleration_;
}
void JointGoal::clear_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void JointGoal::clear_velocity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.velocity_ != nullptr) _impl_.velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void JointGoal::clear_acceleration() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.acceleration_ != nullptr) _impl_.acceleration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
JointGoal::JointGoal(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.trajectory.JointGoal)
}
inline PROTOBUF_NDEBUG_INLINE JointGoal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

JointGoal::JointGoal(
    ::google::protobuf::Arena* arena,
    const JointGoal& from)
    : ::google::protobuf::Message(arena) {
  JointGoal* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::abb::egm::wrapper::Joints>(arena, *from._impl_.position_)
                : nullptr;
  _impl_.velocity_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::abb::egm::wrapper::Joints>(arena, *from._impl_.velocity_)
                : nullptr;
  _impl_.acceleration_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::abb::egm::wrapper::Joints>(arena, *from._impl_.acceleration_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.trajectory.JointGoal)
}
inline PROTOBUF_NDEBUG_INLINE JointGoal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void JointGoal::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_),
           0,
           offsetof(Impl_, acceleration_) -
               offsetof(Impl_, position_) +
               sizeof(Impl_::acceleration_));
}
JointGoal::~JointGoal() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.trajectory.JointGoal)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void JointGoal::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.position_;
  delete _impl_.velocity_;
  delete _impl_.acceleration_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void JointGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.trajectory.JointGoal)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.velocity_ != nullptr);
      _impl_.velocity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.acceleration_ != nullptr);
      _impl_.acceleration_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* JointGoal::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> JointGoal::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(JointGoal, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_JointGoal_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .abb.egm.wrapper.Joints position = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(JointGoal, _impl_.position_)}},
    // optional .abb.egm.wrapper.Joints velocity = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(JointGoal, _impl_.velocity_)}},
    // optional .abb.egm.wrapper.Joints acceleration = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(JointGoal, _impl_.acceleration_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .abb.egm.wrapper.Joints position = 1;
    {PROTOBUF_FIELD_OFFSET(JointGoal, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.wrapper.Joints velocity = 2;
    {PROTOBUF_FIELD_OFFSET(JointGoal, _impl_.velocity_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.wrapper.Joints acceleration = 3;
    {PROTOBUF_FIELD_OFFSET(JointGoal, _impl_.acceleration_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::Joints>()},
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::Joints>()},
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::Joints>()},
  }}, {{
  }},
};

::uint8_t* JointGoal::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.trajectory.JointGoal)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .abb.egm.wrapper.Joints position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.wrapper.Joints velocity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::velocity(this),
        _Internal::velocity(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.wrapper.Joints acceleration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::acceleration(this),
        _Internal::acceleration(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.trajectory.JointGoal)
  return target;
}

::size_t JointGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.trajectory.JointGoal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .abb.egm.wrapper.Joints position = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.position_);
    }

    // optional .abb.egm.wrapper.Joints velocity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.velocity_);
    }

    // optional .abb.egm.wrapper.Joints acceleration = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.acceleration_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData JointGoal::_class_data_ = {
    JointGoal::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* JointGoal::GetClassData() const {
  return &_class_data_;
}

void JointGoal::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<JointGoal*>(&to_msg);
  auto& from = static_cast<const JointGoal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.trajectory.JointGoal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_position()->::abb::egm::wrapper::Joints::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_velocity()->::abb::egm::wrapper::Joints::MergeFrom(
          from._internal_velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_acceleration()->::abb::egm::wrapper::Joints::MergeFrom(
          from._internal_acceleration());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void JointGoal::CopyFrom(const JointGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.trajectory.JointGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool JointGoal::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* JointGoal::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void JointGoal::InternalSwap(JointGoal* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JointGoal, _impl_.acceleration_)
      + sizeof(JointGoal::_impl_.acceleration_)
      - PROTOBUF_FIELD_OFFSET(JointGoal, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata JointGoal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_getter, &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_once,
      file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[0]);
}
// ===================================================================

class CartesianGoal::_Internal {
 public:
  using HasBits = decltype(std::declval<CartesianGoal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CartesianGoal, _impl_._has_bits_);
  static const ::abb::egm::wrapper::CartesianPose& pose(const CartesianGoal* msg);
  static void set_has_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::egm::wrapper::Cartesian& velocity(const CartesianGoal* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::abb::egm::wrapper::Cartesian& acceleration(const CartesianGoal* msg);
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::abb::egm::wrapper::CartesianPose& CartesianGoal::_Internal::pose(const CartesianGoal* msg) {
  return *msg->_impl_.pose_;
}
const ::abb::egm::wrapper::Cartesian& CartesianGoal::_Internal::velocity(const CartesianGoal* msg) {
  return *msg->_impl_.velocity_;
}
const ::abb::egm::wrapper::Cartesian& CartesianGoal::_Internal::acceleration(const CartesianGoal* msg) {
  return *msg->_impl_.acceleration_;
}
void CartesianGoal::clear_pose() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.pose_ != nullptr) _impl_.pose_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CartesianGoal::clear_velocity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.velocity_ != nullptr) _impl_.velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CartesianGoal::clear_acceleration() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.acceleration_ != nullptr) _impl_.acceleration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CartesianGoal::CartesianGoal(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.trajectory.CartesianGoal)
}
inline PROTOBUF_NDEBUG_INLINE CartesianGoal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CartesianGoal::CartesianGoal(
    ::google::protobuf::Arena* arena,
    const CartesianGoal& from)
    : ::google::protobuf::Message(arena) {
  CartesianGoal* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.pose_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::abb::egm::wrapper::CartesianPose>(arena, *from._impl_.pose_)
                : nullptr;
  _impl_.velocity_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::abb::egm::wrapper::Cartesian>(arena, *from._impl_.velocity_)
                : nullptr;
  _impl_.acceleration_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::abb::egm::wrapper::Cartesian>(arena, *from._impl_.acceleration_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.trajectory.CartesianGoal)
}
inline PROTOBUF_NDEBUG_INLINE CartesianGoal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CartesianGoal::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pose_),
           0,
           offsetof(Impl_, acceleration_) -
               offsetof(Impl_, pose_) +
               sizeof(Impl_::acceleration_));
}
CartesianGoal::~CartesianGoal() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.trajectory.CartesianGoal)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CartesianGoal::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.pose_;
  delete _impl_.velocity_;
  delete _impl_.acceleration_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CartesianGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.trajectory.CartesianGoal)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.pose_ != nullptr);
      _impl_.pose_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.velocity_ != nullptr);
      _impl_.velocity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.acceleration_ != nullptr);
      _impl_.acceleration_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CartesianGoal::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> CartesianGoal::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CartesianGoal, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CartesianGoal_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .abb.egm.wrapper.CartesianPose pose = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CartesianGoal, _impl_.pose_)}},
    // optional .abb.egm.wrapper.Cartesian velocity = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(CartesianGoal, _impl_.velocity_)}},
    // optional .abb.egm.wrapper.Cartesian acceleration = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(CartesianGoal, _impl_.acceleration_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .abb.egm.wrapper.CartesianPose pose = 1;
    {PROTOBUF_FIELD_OFFSET(CartesianGoal, _impl_.pose_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.wrapper.Cartesian velocity = 2;
    {PROTOBUF_FIELD_OFFSET(CartesianGoal, _impl_.velocity_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.wrapper.Cartesian acceleration = 3;
    {PROTOBUF_FIELD_OFFSET(CartesianGoal, _impl_.acceleration_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::CartesianPose>()},
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::Cartesian>()},
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::Cartesian>()},
  }}, {{
  }},
};

::uint8_t* CartesianGoal::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.trajectory.CartesianGoal)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .abb.egm.wrapper.CartesianPose pose = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::pose(this),
        _Internal::pose(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.wrapper.Cartesian velocity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::velocity(this),
        _Internal::velocity(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.wrapper.Cartesian acceleration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::acceleration(this),
        _Internal::acceleration(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.trajectory.CartesianGoal)
  return target;
}

::size_t CartesianGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.trajectory.CartesianGoal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .abb.egm.wrapper.CartesianPose pose = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.pose_);
    }

    // optional .abb.egm.wrapper.Cartesian velocity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.velocity_);
    }

    // optional .abb.egm.wrapper.Cartesian acceleration = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.acceleration_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CartesianGoal::_class_data_ = {
    CartesianGoal::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CartesianGoal::GetClassData() const {
  return &_class_data_;
}

void CartesianGoal::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CartesianGoal*>(&to_msg);
  auto& from = static_cast<const CartesianGoal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.trajectory.CartesianGoal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_pose()->::abb::egm::wrapper::CartesianPose::MergeFrom(
          from._internal_pose());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_velocity()->::abb::egm::wrapper::Cartesian::MergeFrom(
          from._internal_velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_acceleration()->::abb::egm::wrapper::Cartesian::MergeFrom(
          from._internal_acceleration());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CartesianGoal::CopyFrom(const CartesianGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.trajectory.CartesianGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CartesianGoal::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CartesianGoal::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CartesianGoal::InternalSwap(CartesianGoal* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CartesianGoal, _impl_.acceleration_)
      + sizeof(CartesianGoal::_impl_.acceleration_)
      - PROTOBUF_FIELD_OFFSET(CartesianGoal, _impl_.pose_)>(
          reinterpret_cast<char*>(&_impl_.pose_),
          reinterpret_cast<char*>(&other->_impl_.pose_));
}

::google::protobuf::Metadata CartesianGoal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_getter, &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_once,
      file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[1]);
}
// ===================================================================

class RobotGoal::_Internal {
 public:
  using HasBits = decltype(std::declval<RobotGoal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RobotGoal, _impl_._has_bits_);
  static const ::abb::egm::wrapper::trajectory::JointGoal& joints(const RobotGoal* msg);
  static void set_has_joints(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::egm::wrapper::trajectory::CartesianGoal& cartesian(const RobotGoal* msg);
  static void set_has_cartesian(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::abb::egm::wrapper::trajectory::JointGoal& RobotGoal::_Internal::joints(const RobotGoal* msg) {
  return *msg->_impl_.joints_;
}
const ::abb::egm::wrapper::trajectory::CartesianGoal& RobotGoal::_Internal::cartesian(const RobotGoal* msg) {
  return *msg->_impl_.cartesian_;
}
RobotGoal::RobotGoal(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.trajectory.RobotGoal)
}
inline PROTOBUF_NDEBUG_INLINE RobotGoal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RobotGoal::RobotGoal(
    ::google::protobuf::Arena* arena,
    const RobotGoal& from)
    : ::google::protobuf::Message(arena) {
  RobotGoal* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.joints_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::abb::egm::wrapper::trajectory::JointGoal>(arena, *from._impl_.joints_)
                : nullptr;
  _impl_.cartesian_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::abb::egm::wrapper::trajectory::CartesianGoal>(arena, *from._impl_.cartesian_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.trajectory.RobotGoal)
}
inline PROTOBUF_NDEBUG_INLINE RobotGoal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RobotGoal::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, joints_),
           0,
           offsetof(Impl_, cartesian_) -
               offsetof(Impl_, joints_) +
               sizeof(Impl_::cartesian_));
}
RobotGoal::~RobotGoal() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.trajectory.RobotGoal)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RobotGoal::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.joints_;
  delete _impl_.cartesian_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RobotGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.trajectory.RobotGoal)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.joints_ != nullptr);
      _impl_.joints_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.cartesian_ != nullptr);
      _impl_.cartesian_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RobotGoal::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> RobotGoal::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RobotGoal, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RobotGoal_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional .abb.egm.wrapper.trajectory.CartesianGoal cartesian = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(RobotGoal, _impl_.cartesian_)}},
    // optional .abb.egm.wrapper.trajectory.JointGoal joints = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RobotGoal, _impl_.joints_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .abb.egm.wrapper.trajectory.JointGoal joints = 1;
    {PROTOBUF_FIELD_OFFSET(RobotGoal, _impl_.joints_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.wrapper.trajectory.CartesianGoal cartesian = 2;
    {PROTOBUF_FIELD_OFFSET(RobotGoal, _impl_.cartesian_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::trajectory::JointGoal>()},
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::trajectory::CartesianGoal>()},
  }}, {{
  }},
};

::uint8_t* RobotGoal::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.trajectory.RobotGoal)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .abb.egm.wrapper.trajectory.JointGoal joints = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::joints(this),
        _Internal::joints(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.wrapper.trajectory.CartesianGoal cartesian = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::cartesian(this),
        _Internal::cartesian(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.trajectory.RobotGoal)
  return target;
}

::size_t RobotGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.trajectory.RobotGoal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .abb.egm.wrapper.trajectory.JointGoal joints = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.joints_);
    }

    // optional .abb.egm.wrapper.trajectory.CartesianGoal cartesian = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.cartesian_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RobotGoal::_class_data_ = {
    RobotGoal::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RobotGoal::GetClassData() const {
  return &_class_data_;
}

void RobotGoal::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RobotGoal*>(&to_msg);
  auto& from = static_cast<const RobotGoal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.trajectory.RobotGoal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_joints()->::abb::egm::wrapper::trajectory::JointGoal::MergeFrom(
          from._internal_joints());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cartesian()->::abb::egm::wrapper::trajectory::CartesianGoal::MergeFrom(
          from._internal_cartesian());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RobotGoal::CopyFrom(const RobotGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.trajectory.RobotGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RobotGoal::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RobotGoal::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RobotGoal::InternalSwap(RobotGoal* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotGoal, _impl_.cartesian_)
      + sizeof(RobotGoal::_impl_.cartesian_)
      - PROTOBUF_FIELD_OFFSET(RobotGoal, _impl_.joints_)>(
          reinterpret_cast<char*>(&_impl_.joints_),
          reinterpret_cast<char*>(&other->_impl_.joints_));
}

::google::protobuf::Metadata RobotGoal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_getter, &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_once,
      file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[2]);
}
// ===================================================================

class ExternalGoal::_Internal {
 public:
  using HasBits = decltype(std::declval<ExternalGoal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ExternalGoal, _impl_._has_bits_);
  static const ::abb::egm::wrapper::trajectory::JointGoal& joints(const ExternalGoal* msg);
  static void set_has_joints(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::abb::egm::wrapper::trajectory::JointGoal& ExternalGoal::_Internal::joints(const ExternalGoal* msg) {
  return *msg->_impl_.joints_;
}
ExternalGoal::ExternalGoal(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.trajectory.ExternalGoal)
}
inline PROTOBUF_NDEBUG_INLINE ExternalGoal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ExternalGoal::ExternalGoal(
    ::google::protobuf::Arena* arena,
    const ExternalGoal& from)
    : ::google::protobuf::Message(arena) {
  ExternalGoal* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.joints_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::abb::egm::wrapper::trajectory::JointGoal>(arena, *from._impl_.joints_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.trajectory.ExternalGoal)
}
inline PROTOBUF_NDEBUG_INLINE ExternalGoal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ExternalGoal::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.joints_ = {};
}
ExternalGoal::~ExternalGoal() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.trajectory.ExternalGoal)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ExternalGoal::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.joints_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ExternalGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.trajectory.ExternalGoal)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.joints_ != nullptr);
    _impl_.joints_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ExternalGoal::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ExternalGoal::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ExternalGoal, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ExternalGoal_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional .abb.egm.wrapper.trajectory.JointGoal joints = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ExternalGoal, _impl_.joints_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .abb.egm.wrapper.trajectory.JointGoal joints = 1;
    {PROTOBUF_FIELD_OFFSET(ExternalGoal, _impl_.joints_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::trajectory::JointGoal>()},
  }}, {{
  }},
};

::uint8_t* ExternalGoal::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.trajectory.ExternalGoal)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .abb.egm.wrapper.trajectory.JointGoal joints = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::joints(this),
        _Internal::joints(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.trajectory.ExternalGoal)
  return target;
}

::size_t ExternalGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.trajectory.ExternalGoal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .abb.egm.wrapper.trajectory.JointGoal joints = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.joints_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ExternalGoal::_class_data_ = {
    ExternalGoal::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ExternalGoal::GetClassData() const {
  return &_class_data_;
}

void ExternalGoal::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ExternalGoal*>(&to_msg);
  auto& from = static_cast<const ExternalGoal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.trajectory.ExternalGoal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_joints()->::abb::egm::wrapper::trajectory::JointGoal::MergeFrom(
        from._internal_joints());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ExternalGoal::CopyFrom(const ExternalGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.trajectory.ExternalGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ExternalGoal::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ExternalGoal::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ExternalGoal::InternalSwap(ExternalGoal* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.joints_, other->_impl_.joints_);
}

::google::protobuf::Metadata ExternalGoal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_getter, &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_once,
      file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[3]);
}
// ===================================================================

class PointGoal::_Internal {
 public:
  using HasBits = decltype(std::declval<PointGoal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PointGoal, _impl_._has_bits_);
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::abb::egm::wrapper::trajectory::RobotGoal& robot(const PointGoal* msg);
  static void set_has_robot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::egm::wrapper::trajectory::ExternalGoal& external(const PointGoal* msg);
  static void set_has_external(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reach(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::abb::egm::wrapper::trajectory::RobotGoal& PointGoal::_Internal::robot(const PointGoal* msg) {
  return *msg->_impl_.robot_;
}
const ::abb::egm::wrapper::trajectory::ExternalGoal& PointGoal::_Internal::external(const PointGoal* msg) {
  return *msg->_impl_.external_;
}
PointGoal::PointGoal(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.trajectory.PointGoal)
}
inline PROTOBUF_NDEBUG_INLINE PointGoal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PointGoal::PointGoal(
    ::google::protobuf::Arena* arena,
    const PointGoal& from)
    : ::google::protobuf::Message(arena) {
  PointGoal* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.robot_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::abb::egm::wrapper::trajectory::RobotGoal>(arena, *from._impl_.robot_)
                : nullptr;
  _impl_.external_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::abb::egm::wrapper::trajectory::ExternalGoal>(arena, *from._impl_.external_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, duration_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, duration_),
           offsetof(Impl_, reach_) -
               offsetof(Impl_, duration_) +
               sizeof(Impl_::reach_));

  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.trajectory.PointGoal)
}
inline PROTOBUF_NDEBUG_INLINE PointGoal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PointGoal::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, robot_),
           0,
           offsetof(Impl_, reach_) -
               offsetof(Impl_, robot_) +
               sizeof(Impl_::reach_));
}
PointGoal::~PointGoal() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.trajectory.PointGoal)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PointGoal::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.robot_;
  delete _impl_.external_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void PointGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.trajectory.PointGoal)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.robot_ != nullptr);
      _impl_.robot_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.external_ != nullptr);
      _impl_.external_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.duration_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.reach_) -
        reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.reach_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PointGoal::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 0, 2> PointGoal::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PointGoal, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PointGoal_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional bool reach = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PointGoal, _impl_.reach_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(PointGoal, _impl_.reach_)}},
    // optional double duration = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 2, 0, PROTOBUF_FIELD_OFFSET(PointGoal, _impl_.duration_)}},
    // optional .abb.egm.wrapper.trajectory.RobotGoal robot = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(PointGoal, _impl_.robot_)}},
    // optional .abb.egm.wrapper.trajectory.ExternalGoal external = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(PointGoal, _impl_.external_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional double duration = 1;
    {PROTOBUF_FIELD_OFFSET(PointGoal, _impl_.duration_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional .abb.egm.wrapper.trajectory.RobotGoal robot = 2;
    {PROTOBUF_FIELD_OFFSET(PointGoal, _impl_.robot_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.wrapper.trajectory.ExternalGoal external = 3;
    {PROTOBUF_FIELD_OFFSET(PointGoal, _impl_.external_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bool reach = 4;
    {PROTOBUF_FIELD_OFFSET(PointGoal, _impl_.reach_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::trajectory::RobotGoal>()},
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::trajectory::ExternalGoal>()},
  }}, {{
  }},
};

::uint8_t* PointGoal::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.trajectory.PointGoal)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double duration = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_duration(), target);
  }

  // optional .abb.egm.wrapper.trajectory.RobotGoal robot = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::robot(this),
        _Internal::robot(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.wrapper.trajectory.ExternalGoal external = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::external(this),
        _Internal::external(this).GetCachedSize(), target, stream);
  }

  // optional bool reach = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_reach(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.trajectory.PointGoal)
  return target;
}

::size_t PointGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.trajectory.PointGoal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .abb.egm.wrapper.trajectory.RobotGoal robot = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.robot_);
    }

    // optional .abb.egm.wrapper.trajectory.ExternalGoal external = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.external_);
    }

    // optional double duration = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }

    // optional bool reach = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PointGoal::_class_data_ = {
    PointGoal::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* PointGoal::GetClassData() const {
  return &_class_data_;
}

void PointGoal::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PointGoal*>(&to_msg);
  auto& from = static_cast<const PointGoal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.trajectory.PointGoal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_robot()->::abb::egm::wrapper::trajectory::RobotGoal::MergeFrom(
          from._internal_robot());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_external()->::abb::egm::wrapper::trajectory::ExternalGoal::MergeFrom(
          from._internal_external());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.reach_ = from._impl_.reach_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PointGoal::CopyFrom(const PointGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.trajectory.PointGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PointGoal::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* PointGoal::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void PointGoal::InternalSwap(PointGoal* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PointGoal, _impl_.reach_)
      + sizeof(PointGoal::_impl_.reach_)
      - PROTOBUF_FIELD_OFFSET(PointGoal, _impl_.robot_)>(
          reinterpret_cast<char*>(&_impl_.robot_),
          reinterpret_cast<char*>(&other->_impl_.robot_));
}

::google::protobuf::Metadata PointGoal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_getter, &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_once,
      file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[4]);
}
// ===================================================================

class RobotPositionGoal::_Internal {
 public:
  using HasBits = decltype(std::declval<RobotPositionGoal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RobotPositionGoal, _impl_._has_bits_);
  static const ::abb::egm::wrapper::Joints& joints(const RobotPositionGoal* msg);
  static void set_has_joints(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::egm::wrapper::CartesianPose& cartesian(const RobotPositionGoal* msg);
  static void set_has_cartesian(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::abb::egm::wrapper::Joints& RobotPositionGoal::_Internal::joints(const RobotPositionGoal* msg) {
  return *msg->_impl_.joints_;
}
const ::abb::egm::wrapper::CartesianPose& RobotPositionGoal::_Internal::cartesian(const RobotPositionGoal* msg) {
  return *msg->_impl_.cartesian_;
}
void RobotPositionGoal::clear_joints() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.joints_ != nullptr) _impl_.joints_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RobotPositionGoal::clear_cartesian() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.cartesian_ != nullptr) _impl_.cartesian_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
RobotPositionGoal::RobotPositionGoal(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.trajectory.RobotPositionGoal)
}
inline PROTOBUF_NDEBUG_INLINE RobotPositionGoal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RobotPositionGoal::RobotPositionGoal(
    ::google::protobuf::Arena* arena,
    const RobotPositionGoal& from)
    : ::google::protobuf::Message(arena) {
  RobotPositionGoal* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.joints_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::abb::egm::wrapper::Joints>(arena, *from._impl_.joints_)
                : nullptr;
  _impl_.cartesian_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::abb::egm::wrapper::CartesianPose>(arena, *from._impl_.cartesian_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.trajectory.RobotPositionGoal)
}
inline PROTOBUF_NDEBUG_INLINE RobotPositionGoal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RobotPositionGoal::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, joints_),
           0,
           offsetof(Impl_, cartesian_) -
               offsetof(Impl_, joints_) +
               sizeof(Impl_::cartesian_));
}
RobotPositionGoal::~RobotPositionGoal() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.trajectory.RobotPositionGoal)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RobotPositionGoal::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.joints_;
  delete _impl_.cartesian_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RobotPositionGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.trajectory.RobotPositionGoal)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.joints_ != nullptr);
      _impl_.joints_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.cartesian_ != nullptr);
      _impl_.cartesian_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RobotPositionGoal::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> RobotPositionGoal::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RobotPositionGoal, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RobotPositionGoal_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional .abb.egm.wrapper.CartesianPose cartesian = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(RobotPositionGoal, _impl_.cartesian_)}},
    // optional .abb.egm.wrapper.Joints joints = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RobotPositionGoal, _impl_.joints_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .abb.egm.wrapper.Joints joints = 1;
    {PROTOBUF_FIELD_OFFSET(RobotPositionGoal, _impl_.joints_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.wrapper.CartesianPose cartesian = 2;
    {PROTOBUF_FIELD_OFFSET(RobotPositionGoal, _impl_.cartesian_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::Joints>()},
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::CartesianPose>()},
  }}, {{
  }},
};

::uint8_t* RobotPositionGoal::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.trajectory.RobotPositionGoal)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .abb.egm.wrapper.Joints joints = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::joints(this),
        _Internal::joints(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.wrapper.CartesianPose cartesian = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::cartesian(this),
        _Internal::cartesian(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.trajectory.RobotPositionGoal)
  return target;
}

::size_t RobotPositionGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.trajectory.RobotPositionGoal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .abb.egm.wrapper.Joints joints = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.joints_);
    }

    // optional .abb.egm.wrapper.CartesianPose cartesian = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.cartesian_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RobotPositionGoal::_class_data_ = {
    RobotPositionGoal::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RobotPositionGoal::GetClassData() const {
  return &_class_data_;
}

void RobotPositionGoal::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RobotPositionGoal*>(&to_msg);
  auto& from = static_cast<const RobotPositionGoal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.trajectory.RobotPositionGoal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_joints()->::abb::egm::wrapper::Joints::MergeFrom(
          from._internal_joints());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cartesian()->::abb::egm::wrapper::CartesianPose::MergeFrom(
          from._internal_cartesian());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RobotPositionGoal::CopyFrom(const RobotPositionGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.trajectory.RobotPositionGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RobotPositionGoal::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RobotPositionGoal::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RobotPositionGoal::InternalSwap(RobotPositionGoal* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotPositionGoal, _impl_.cartesian_)
      + sizeof(RobotPositionGoal::_impl_.cartesian_)
      - PROTOBUF_FIELD_OFFSET(RobotPositionGoal, _impl_.joints_)>(
          reinterpret_cast<char*>(&_impl_.joints_),
          reinterpret_cast<char*>(&other->_impl_.joints_));
}

::google::protobuf::Metadata RobotPositionGoal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_getter, &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_once,
      file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[5]);
}
// ===================================================================

class RobotVelocityGoal::_Internal {
 public:
  using HasBits = decltype(std::declval<RobotVelocityGoal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RobotVelocityGoal, _impl_._has_bits_);
  static const ::abb::egm::wrapper::Joints& joints(const RobotVelocityGoal* msg);
  static void set_has_joints(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::egm::wrapper::CartesianVelocity& cartesian(const RobotVelocityGoal* msg);
  static void set_has_cartesian(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::abb::egm::wrapper::Joints& RobotVelocityGoal::_Internal::joints(const RobotVelocityGoal* msg) {
  return *msg->_impl_.joints_;
}
const ::abb::egm::wrapper::CartesianVelocity& RobotVelocityGoal::_Internal::cartesian(const RobotVelocityGoal* msg) {
  return *msg->_impl_.cartesian_;
}
void RobotVelocityGoal::clear_joints() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.joints_ != nullptr) _impl_.joints_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RobotVelocityGoal::clear_cartesian() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.cartesian_ != nullptr) _impl_.cartesian_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
RobotVelocityGoal::RobotVelocityGoal(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.trajectory.RobotVelocityGoal)
}
inline PROTOBUF_NDEBUG_INLINE RobotVelocityGoal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RobotVelocityGoal::RobotVelocityGoal(
    ::google::protobuf::Arena* arena,
    const RobotVelocityGoal& from)
    : ::google::protobuf::Message(arena) {
  RobotVelocityGoal* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.joints_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::abb::egm::wrapper::Joints>(arena, *from._impl_.joints_)
                : nullptr;
  _impl_.cartesian_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::abb::egm::wrapper::CartesianVelocity>(arena, *from._impl_.cartesian_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.trajectory.RobotVelocityGoal)
}
inline PROTOBUF_NDEBUG_INLINE RobotVelocityGoal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RobotVelocityGoal::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, joints_),
           0,
           offsetof(Impl_, cartesian_) -
               offsetof(Impl_, joints_) +
               sizeof(Impl_::cartesian_));
}
RobotVelocityGoal::~RobotVelocityGoal() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.trajectory.RobotVelocityGoal)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RobotVelocityGoal::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.joints_;
  delete _impl_.cartesian_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RobotVelocityGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.trajectory.RobotVelocityGoal)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.joints_ != nullptr);
      _impl_.joints_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.cartesian_ != nullptr);
      _impl_.cartesian_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RobotVelocityGoal::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> RobotVelocityGoal::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RobotVelocityGoal, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RobotVelocityGoal_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional .abb.egm.wrapper.CartesianVelocity cartesian = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(RobotVelocityGoal, _impl_.cartesian_)}},
    // optional .abb.egm.wrapper.Joints joints = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RobotVelocityGoal, _impl_.joints_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .abb.egm.wrapper.Joints joints = 1;
    {PROTOBUF_FIELD_OFFSET(RobotVelocityGoal, _impl_.joints_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.wrapper.CartesianVelocity cartesian = 2;
    {PROTOBUF_FIELD_OFFSET(RobotVelocityGoal, _impl_.cartesian_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::Joints>()},
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::CartesianVelocity>()},
  }}, {{
  }},
};

::uint8_t* RobotVelocityGoal::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.trajectory.RobotVelocityGoal)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .abb.egm.wrapper.Joints joints = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::joints(this),
        _Internal::joints(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.wrapper.CartesianVelocity cartesian = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::cartesian(this),
        _Internal::cartesian(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.trajectory.RobotVelocityGoal)
  return target;
}

::size_t RobotVelocityGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.trajectory.RobotVelocityGoal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .abb.egm.wrapper.Joints joints = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.joints_);
    }

    // optional .abb.egm.wrapper.CartesianVelocity cartesian = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.cartesian_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RobotVelocityGoal::_class_data_ = {
    RobotVelocityGoal::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RobotVelocityGoal::GetClassData() const {
  return &_class_data_;
}

void RobotVelocityGoal::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RobotVelocityGoal*>(&to_msg);
  auto& from = static_cast<const RobotVelocityGoal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.trajectory.RobotVelocityGoal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_joints()->::abb::egm::wrapper::Joints::MergeFrom(
          from._internal_joints());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cartesian()->::abb::egm::wrapper::CartesianVelocity::MergeFrom(
          from._internal_cartesian());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RobotVelocityGoal::CopyFrom(const RobotVelocityGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.trajectory.RobotVelocityGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RobotVelocityGoal::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RobotVelocityGoal::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RobotVelocityGoal::InternalSwap(RobotVelocityGoal* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotVelocityGoal, _impl_.cartesian_)
      + sizeof(RobotVelocityGoal::_impl_.cartesian_)
      - PROTOBUF_FIELD_OFFSET(RobotVelocityGoal, _impl_.joints_)>(
          reinterpret_cast<char*>(&_impl_.joints_),
          reinterpret_cast<char*>(&other->_impl_.joints_));
}

::google::protobuf::Metadata RobotVelocityGoal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_getter, &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_once,
      file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[6]);
}
// ===================================================================

class TrajectoryGoal::_Internal {
 public:
};

TrajectoryGoal::TrajectoryGoal(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.trajectory.TrajectoryGoal)
}
inline PROTOBUF_NDEBUG_INLINE TrajectoryGoal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : points_{visibility, arena, from.points_},
        _cached_size_{0} {}

TrajectoryGoal::TrajectoryGoal(
    ::google::protobuf::Arena* arena,
    const TrajectoryGoal& from)
    : ::google::protobuf::Message(arena) {
  TrajectoryGoal* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.trajectory.TrajectoryGoal)
}
inline PROTOBUF_NDEBUG_INLINE TrajectoryGoal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : points_{visibility, arena},
        _cached_size_{0} {}

inline void TrajectoryGoal::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TrajectoryGoal::~TrajectoryGoal() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.trajectory.TrajectoryGoal)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TrajectoryGoal::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TrajectoryGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.trajectory.TrajectoryGoal)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TrajectoryGoal::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TrajectoryGoal::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TrajectoryGoal_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .abb.egm.wrapper.trajectory.PointGoal points = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TrajectoryGoal, _impl_.points_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .abb.egm.wrapper.trajectory.PointGoal points = 1;
    {PROTOBUF_FIELD_OFFSET(TrajectoryGoal, _impl_.points_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::trajectory::PointGoal>()},
  }}, {{
  }},
};

::uint8_t* TrajectoryGoal::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.trajectory.TrajectoryGoal)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .abb.egm.wrapper.trajectory.PointGoal points = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_points().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.trajectory.TrajectoryGoal)
  return target;
}

::size_t TrajectoryGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.trajectory.TrajectoryGoal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .abb.egm.wrapper.trajectory.PointGoal points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->_internal_points()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TrajectoryGoal::_class_data_ = {
    TrajectoryGoal::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TrajectoryGoal::GetClassData() const {
  return &_class_data_;
}

void TrajectoryGoal::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TrajectoryGoal*>(&to_msg);
  auto& from = static_cast<const TrajectoryGoal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.trajectory.TrajectoryGoal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_points()->MergeFrom(
      from._internal_points());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrajectoryGoal::CopyFrom(const TrajectoryGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.trajectory.TrajectoryGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TrajectoryGoal::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TrajectoryGoal::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TrajectoryGoal::InternalSwap(TrajectoryGoal* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
}

::google::protobuf::Metadata TrajectoryGoal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_getter, &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_once,
      file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[7]);
}
// ===================================================================

class StaticPositionGoal::_Internal {
 public:
  using HasBits = decltype(std::declval<StaticPositionGoal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StaticPositionGoal, _impl_._has_bits_);
  static const ::abb::egm::wrapper::trajectory::RobotPositionGoal& robot(const StaticPositionGoal* msg);
  static void set_has_robot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::egm::wrapper::Joints& external(const StaticPositionGoal* msg);
  static void set_has_external(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::abb::egm::wrapper::trajectory::RobotPositionGoal& StaticPositionGoal::_Internal::robot(const StaticPositionGoal* msg) {
  return *msg->_impl_.robot_;
}
const ::abb::egm::wrapper::Joints& StaticPositionGoal::_Internal::external(const StaticPositionGoal* msg) {
  return *msg->_impl_.external_;
}
void StaticPositionGoal::clear_external() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.external_ != nullptr) _impl_.external_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
StaticPositionGoal::StaticPositionGoal(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.trajectory.StaticPositionGoal)
}
inline PROTOBUF_NDEBUG_INLINE StaticPositionGoal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

StaticPositionGoal::StaticPositionGoal(
    ::google::protobuf::Arena* arena,
    const StaticPositionGoal& from)
    : ::google::protobuf::Message(arena) {
  StaticPositionGoal* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.robot_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::abb::egm::wrapper::trajectory::RobotPositionGoal>(arena, *from._impl_.robot_)
                : nullptr;
  _impl_.external_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::abb::egm::wrapper::Joints>(arena, *from._impl_.external_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.trajectory.StaticPositionGoal)
}
inline PROTOBUF_NDEBUG_INLINE StaticPositionGoal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void StaticPositionGoal::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, robot_),
           0,
           offsetof(Impl_, external_) -
               offsetof(Impl_, robot_) +
               sizeof(Impl_::external_));
}
StaticPositionGoal::~StaticPositionGoal() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.trajectory.StaticPositionGoal)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void StaticPositionGoal::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.robot_;
  delete _impl_.external_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void StaticPositionGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.trajectory.StaticPositionGoal)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.robot_ != nullptr);
      _impl_.robot_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.external_ != nullptr);
      _impl_.external_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* StaticPositionGoal::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> StaticPositionGoal::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StaticPositionGoal, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_StaticPositionGoal_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional .abb.egm.wrapper.Joints external = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(StaticPositionGoal, _impl_.external_)}},
    // optional .abb.egm.wrapper.trajectory.RobotPositionGoal robot = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(StaticPositionGoal, _impl_.robot_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .abb.egm.wrapper.trajectory.RobotPositionGoal robot = 1;
    {PROTOBUF_FIELD_OFFSET(StaticPositionGoal, _impl_.robot_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.wrapper.Joints external = 2;
    {PROTOBUF_FIELD_OFFSET(StaticPositionGoal, _impl_.external_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::trajectory::RobotPositionGoal>()},
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::Joints>()},
  }}, {{
  }},
};

::uint8_t* StaticPositionGoal::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.trajectory.StaticPositionGoal)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .abb.egm.wrapper.trajectory.RobotPositionGoal robot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::robot(this),
        _Internal::robot(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.wrapper.Joints external = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::external(this),
        _Internal::external(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.trajectory.StaticPositionGoal)
  return target;
}

::size_t StaticPositionGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.trajectory.StaticPositionGoal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .abb.egm.wrapper.trajectory.RobotPositionGoal robot = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.robot_);
    }

    // optional .abb.egm.wrapper.Joints external = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.external_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData StaticPositionGoal::_class_data_ = {
    StaticPositionGoal::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* StaticPositionGoal::GetClassData() const {
  return &_class_data_;
}

void StaticPositionGoal::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<StaticPositionGoal*>(&to_msg);
  auto& from = static_cast<const StaticPositionGoal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.trajectory.StaticPositionGoal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_robot()->::abb::egm::wrapper::trajectory::RobotPositionGoal::MergeFrom(
          from._internal_robot());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_external()->::abb::egm::wrapper::Joints::MergeFrom(
          from._internal_external());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StaticPositionGoal::CopyFrom(const StaticPositionGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.trajectory.StaticPositionGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool StaticPositionGoal::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* StaticPositionGoal::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void StaticPositionGoal::InternalSwap(StaticPositionGoal* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StaticPositionGoal, _impl_.external_)
      + sizeof(StaticPositionGoal::_impl_.external_)
      - PROTOBUF_FIELD_OFFSET(StaticPositionGoal, _impl_.robot_)>(
          reinterpret_cast<char*>(&_impl_.robot_),
          reinterpret_cast<char*>(&other->_impl_.robot_));
}

::google::protobuf::Metadata StaticPositionGoal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_getter, &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_once,
      file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[8]);
}
// ===================================================================

class StaticVelocityGoal::_Internal {
 public:
  using HasBits = decltype(std::declval<StaticVelocityGoal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StaticVelocityGoal, _impl_._has_bits_);
  static const ::abb::egm::wrapper::trajectory::RobotVelocityGoal& robot(const StaticVelocityGoal* msg);
  static void set_has_robot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::egm::wrapper::Joints& external(const StaticVelocityGoal* msg);
  static void set_has_external(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::abb::egm::wrapper::trajectory::RobotVelocityGoal& StaticVelocityGoal::_Internal::robot(const StaticVelocityGoal* msg) {
  return *msg->_impl_.robot_;
}
const ::abb::egm::wrapper::Joints& StaticVelocityGoal::_Internal::external(const StaticVelocityGoal* msg) {
  return *msg->_impl_.external_;
}
void StaticVelocityGoal::clear_external() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.external_ != nullptr) _impl_.external_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
StaticVelocityGoal::StaticVelocityGoal(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.trajectory.StaticVelocityGoal)
}
inline PROTOBUF_NDEBUG_INLINE StaticVelocityGoal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

StaticVelocityGoal::StaticVelocityGoal(
    ::google::protobuf::Arena* arena,
    const StaticVelocityGoal& from)
    : ::google::protobuf::Message(arena) {
  StaticVelocityGoal* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.robot_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::abb::egm::wrapper::trajectory::RobotVelocityGoal>(arena, *from._impl_.robot_)
                : nullptr;
  _impl_.external_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::abb::egm::wrapper::Joints>(arena, *from._impl_.external_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.trajectory.StaticVelocityGoal)
}
inline PROTOBUF_NDEBUG_INLINE StaticVelocityGoal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void StaticVelocityGoal::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, robot_),
           0,
           offsetof(Impl_, external_) -
               offsetof(Impl_, robot_) +
               sizeof(Impl_::external_));
}
StaticVelocityGoal::~StaticVelocityGoal() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.trajectory.StaticVelocityGoal)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void StaticVelocityGoal::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.robot_;
  delete _impl_.external_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void StaticVelocityGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.trajectory.StaticVelocityGoal)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.robot_ != nullptr);
      _impl_.robot_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.external_ != nullptr);
      _impl_.external_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* StaticVelocityGoal::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> StaticVelocityGoal::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StaticVelocityGoal, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_StaticVelocityGoal_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional .abb.egm.wrapper.Joints external = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(StaticVelocityGoal, _impl_.external_)}},
    // optional .abb.egm.wrapper.trajectory.RobotVelocityGoal robot = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(StaticVelocityGoal, _impl_.robot_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .abb.egm.wrapper.trajectory.RobotVelocityGoal robot = 1;
    {PROTOBUF_FIELD_OFFSET(StaticVelocityGoal, _impl_.robot_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.wrapper.Joints external = 2;
    {PROTOBUF_FIELD_OFFSET(StaticVelocityGoal, _impl_.external_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::trajectory::RobotVelocityGoal>()},
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::Joints>()},
  }}, {{
  }},
};

::uint8_t* StaticVelocityGoal::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.trajectory.StaticVelocityGoal)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .abb.egm.wrapper.trajectory.RobotVelocityGoal robot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::robot(this),
        _Internal::robot(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.wrapper.Joints external = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::external(this),
        _Internal::external(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.trajectory.StaticVelocityGoal)
  return target;
}

::size_t StaticVelocityGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.trajectory.StaticVelocityGoal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .abb.egm.wrapper.trajectory.RobotVelocityGoal robot = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.robot_);
    }

    // optional .abb.egm.wrapper.Joints external = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.external_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData StaticVelocityGoal::_class_data_ = {
    StaticVelocityGoal::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* StaticVelocityGoal::GetClassData() const {
  return &_class_data_;
}

void StaticVelocityGoal::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<StaticVelocityGoal*>(&to_msg);
  auto& from = static_cast<const StaticVelocityGoal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.trajectory.StaticVelocityGoal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_robot()->::abb::egm::wrapper::trajectory::RobotVelocityGoal::MergeFrom(
          from._internal_robot());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_external()->::abb::egm::wrapper::Joints::MergeFrom(
          from._internal_external());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StaticVelocityGoal::CopyFrom(const StaticVelocityGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.trajectory.StaticVelocityGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool StaticVelocityGoal::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* StaticVelocityGoal::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void StaticVelocityGoal::InternalSwap(StaticVelocityGoal* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StaticVelocityGoal, _impl_.external_)
      + sizeof(StaticVelocityGoal::_impl_.external_)
      - PROTOBUF_FIELD_OFFSET(StaticVelocityGoal, _impl_.robot_)>(
          reinterpret_cast<char*>(&_impl_.robot_),
          reinterpret_cast<char*>(&other->_impl_.robot_));
}

::google::protobuf::Metadata StaticVelocityGoal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_getter, &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_once,
      file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[9]);
}
// ===================================================================

class ExecutionProgress::_Internal {
 public:
  using HasBits = decltype(std::declval<ExecutionProgress>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ExecutionProgress, _impl_._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sub_state(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::abb::egm::wrapper::Input& inputs(const ExecutionProgress* msg);
  static void set_has_inputs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::egm::wrapper::Output& outputs(const ExecutionProgress* msg);
  static void set_has_outputs(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_passed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_goal_active(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::abb::egm::wrapper::trajectory::PointGoal& goal(const ExecutionProgress* msg);
  static void set_has_goal(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::abb::egm::wrapper::trajectory::TrajectoryGoal& active_trajectory(const ExecutionProgress* msg);
  static void set_has_active_trajectory(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pending_trajectories(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::abb::egm::wrapper::Input& ExecutionProgress::_Internal::inputs(const ExecutionProgress* msg) {
  return *msg->_impl_.inputs_;
}
const ::abb::egm::wrapper::Output& ExecutionProgress::_Internal::outputs(const ExecutionProgress* msg) {
  return *msg->_impl_.outputs_;
}
const ::abb::egm::wrapper::trajectory::PointGoal& ExecutionProgress::_Internal::goal(const ExecutionProgress* msg) {
  return *msg->_impl_.goal_;
}
const ::abb::egm::wrapper::trajectory::TrajectoryGoal& ExecutionProgress::_Internal::active_trajectory(const ExecutionProgress* msg) {
  return *msg->_impl_.active_trajectory_;
}
void ExecutionProgress::clear_inputs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.inputs_ != nullptr) _impl_.inputs_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ExecutionProgress::clear_outputs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.outputs_ != nullptr) _impl_.outputs_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ExecutionProgress::ExecutionProgress(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.egm.wrapper.trajectory.ExecutionProgress)
}
inline PROTOBUF_NDEBUG_INLINE ExecutionProgress::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ExecutionProgress::ExecutionProgress(
    ::google::protobuf::Arena* arena,
    const ExecutionProgress& from)
    : ::google::protobuf::Message(arena) {
  ExecutionProgress* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.inputs_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::abb::egm::wrapper::Input>(arena, *from._impl_.inputs_)
                : nullptr;
  _impl_.outputs_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::abb::egm::wrapper::Output>(arena, *from._impl_.outputs_)
                : nullptr;
  _impl_.goal_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::abb::egm::wrapper::trajectory::PointGoal>(arena, *from._impl_.goal_)
                : nullptr;
  _impl_.active_trajectory_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::abb::egm::wrapper::trajectory::TrajectoryGoal>(arena, *from._impl_.active_trajectory_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, state_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, state_),
           offsetof(Impl_, pending_trajectories_) -
               offsetof(Impl_, state_) +
               sizeof(Impl_::pending_trajectories_));

  // @@protoc_insertion_point(copy_constructor:abb.egm.wrapper.trajectory.ExecutionProgress)
}
inline PROTOBUF_NDEBUG_INLINE ExecutionProgress::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ExecutionProgress::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, inputs_),
           0,
           offsetof(Impl_, pending_trajectories_) -
               offsetof(Impl_, inputs_) +
               sizeof(Impl_::pending_trajectories_));
}
ExecutionProgress::~ExecutionProgress() {
  // @@protoc_insertion_point(destructor:abb.egm.wrapper.trajectory.ExecutionProgress)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ExecutionProgress::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.inputs_;
  delete _impl_.outputs_;
  delete _impl_.goal_;
  delete _impl_.active_trajectory_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ExecutionProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.wrapper.trajectory.ExecutionProgress)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.inputs_ != nullptr);
      _impl_.inputs_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.outputs_ != nullptr);
      _impl_.outputs_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.goal_ != nullptr);
      _impl_.goal_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.active_trajectory_ != nullptr);
      _impl_.active_trajectory_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.state_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.goal_active_) -
        reinterpret_cast<char*>(&_impl_.state_)) + sizeof(_impl_.goal_active_));
  }
  _impl_.pending_trajectories_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ExecutionProgress::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 6, 0, 2> ExecutionProgress::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ExecutionProgress, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ExecutionProgress_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .abb.egm.wrapper.trajectory.ExecutionProgress.State state = 1 [default = UNDEFINED];
    {::_pbi::TcParser::FastEr0S1,
     {8, 4, 3, PROTOBUF_FIELD_OFFSET(ExecutionProgress, _impl_.state_)}},
    // optional .abb.egm.wrapper.trajectory.ExecutionProgress.SubState sub_state = 2 [default = NONE];
    {::_pbi::TcParser::FastEr0S1,
     {16, 5, 2, PROTOBUF_FIELD_OFFSET(ExecutionProgress, _impl_.sub_state_)}},
    // optional .abb.egm.wrapper.Input inputs = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 2, PROTOBUF_FIELD_OFFSET(ExecutionProgress, _impl_.inputs_)}},
    // optional .abb.egm.wrapper.Output outputs = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 3, PROTOBUF_FIELD_OFFSET(ExecutionProgress, _impl_.outputs_)}},
    // optional double time_passed = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 6, 0, PROTOBUF_FIELD_OFFSET(ExecutionProgress, _impl_.time_passed_)}},
    // optional bool goal_active = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ExecutionProgress, _impl_.goal_active_), 7>(),
     {48, 7, 0, PROTOBUF_FIELD_OFFSET(ExecutionProgress, _impl_.goal_active_)}},
    // optional .abb.egm.wrapper.trajectory.PointGoal goal = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 2, 4, PROTOBUF_FIELD_OFFSET(ExecutionProgress, _impl_.goal_)}},
    // optional .abb.egm.wrapper.trajectory.TrajectoryGoal active_trajectory = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 3, 5, PROTOBUF_FIELD_OFFSET(ExecutionProgress, _impl_.active_trajectory_)}},
    // optional uint32 pending_trajectories = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ExecutionProgress, _impl_.pending_trajectories_), 8>(),
     {72, 8, 0, PROTOBUF_FIELD_OFFSET(ExecutionProgress, _impl_.pending_trajectories_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .abb.egm.wrapper.trajectory.ExecutionProgress.State state = 1 [default = UNDEFINED];
    {PROTOBUF_FIELD_OFFSET(ExecutionProgress, _impl_.state_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional .abb.egm.wrapper.trajectory.ExecutionProgress.SubState sub_state = 2 [default = NONE];
    {PROTOBUF_FIELD_OFFSET(ExecutionProgress, _impl_.sub_state_), _Internal::kHasBitsOffset + 5, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional .abb.egm.wrapper.Input inputs = 3;
    {PROTOBUF_FIELD_OFFSET(ExecutionProgress, _impl_.inputs_), _Internal::kHasBitsOffset + 0, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.wrapper.Output outputs = 4;
    {PROTOBUF_FIELD_OFFSET(ExecutionProgress, _impl_.outputs_), _Internal::kHasBitsOffset + 1, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional double time_passed = 5;
    {PROTOBUF_FIELD_OFFSET(ExecutionProgress, _impl_.time_passed_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional bool goal_active = 6;
    {PROTOBUF_FIELD_OFFSET(ExecutionProgress, _impl_.goal_active_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional .abb.egm.wrapper.trajectory.PointGoal goal = 7;
    {PROTOBUF_FIELD_OFFSET(ExecutionProgress, _impl_.goal_), _Internal::kHasBitsOffset + 2, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.egm.wrapper.trajectory.TrajectoryGoal active_trajectory = 8;
    {PROTOBUF_FIELD_OFFSET(ExecutionProgress, _impl_.active_trajectory_), _Internal::kHasBitsOffset + 3, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint32 pending_trajectories = 9;
    {PROTOBUF_FIELD_OFFSET(ExecutionProgress, _impl_.pending_trajectories_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }}, {{
    {0, 4},
    {0, 3},
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::Input>()},
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::Output>()},
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::trajectory::PointGoal>()},
    {::_pbi::TcParser::GetTable<::abb::egm::wrapper::trajectory::TrajectoryGoal>()},
  }}, {{
  }},
};

::uint8_t* ExecutionProgress::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.wrapper.trajectory.ExecutionProgress)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .abb.egm.wrapper.trajectory.ExecutionProgress.State state = 1 [default = UNDEFINED];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_state(), target);
  }

  // optional .abb.egm.wrapper.trajectory.ExecutionProgress.SubState sub_state = 2 [default = NONE];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_sub_state(), target);
  }

  // optional .abb.egm.wrapper.Input inputs = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::inputs(this),
        _Internal::inputs(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.wrapper.Output outputs = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::outputs(this),
        _Internal::outputs(this).GetCachedSize(), target, stream);
  }

  // optional double time_passed = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_time_passed(), target);
  }

  // optional bool goal_active = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_goal_active(), target);
  }

  // optional .abb.egm.wrapper.trajectory.PointGoal goal = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::goal(this),
        _Internal::goal(this).GetCachedSize(), target, stream);
  }

  // optional .abb.egm.wrapper.trajectory.TrajectoryGoal active_trajectory = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::active_trajectory(this),
        _Internal::active_trajectory(this).GetCachedSize(), target, stream);
  }

  // optional uint32 pending_trajectories = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_pending_trajectories(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.wrapper.trajectory.ExecutionProgress)
  return target;
}

::size_t ExecutionProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.wrapper.trajectory.ExecutionProgress)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .abb.egm.wrapper.Input inputs = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.inputs_);
    }

    // optional .abb.egm.wrapper.Output outputs = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.outputs_);
    }

    // optional .abb.egm.wrapper.trajectory.PointGoal goal = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.goal_);
    }

    // optional .abb.egm.wrapper.trajectory.TrajectoryGoal active_trajectory = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.active_trajectory_);
    }

    // optional .abb.egm.wrapper.trajectory.ExecutionProgress.State state = 1 [default = UNDEFINED];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
    }

    // optional .abb.egm.wrapper.trajectory.ExecutionProgress.SubState sub_state = 2 [default = NONE];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_sub_state());
    }

    // optional double time_passed = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 9;
    }

    // optional bool goal_active = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2;
    }

  }
  // optional uint32 pending_trajectories = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_pending_trajectories());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ExecutionProgress::_class_data_ = {
    ExecutionProgress::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ExecutionProgress::GetClassData() const {
  return &_class_data_;
}

void ExecutionProgress::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ExecutionProgress*>(&to_msg);
  auto& from = static_cast<const ExecutionProgress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.wrapper.trajectory.ExecutionProgress)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_inputs()->::abb::egm::wrapper::Input::MergeFrom(
          from._internal_inputs());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_outputs()->::abb::egm::wrapper::Output::MergeFrom(
          from._internal_outputs());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_goal()->::abb::egm::wrapper::trajectory::PointGoal::MergeFrom(
          from._internal_goal());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_active_trajectory()->::abb::egm::wrapper::trajectory::TrajectoryGoal::MergeFrom(
          from._internal_active_trajectory());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.sub_state_ = from._impl_.sub_state_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.time_passed_ = from._impl_.time_passed_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.goal_active_ = from._impl_.goal_active_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_pending_trajectories(from._internal_pending_trajectories());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ExecutionProgress::CopyFrom(const ExecutionProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.wrapper.trajectory.ExecutionProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ExecutionProgress::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ExecutionProgress::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ExecutionProgress::InternalSwap(ExecutionProgress* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecutionProgress, _impl_.pending_trajectories_)
      + sizeof(ExecutionProgress::_impl_.pending_trajectories_)
      - PROTOBUF_FIELD_OFFSET(ExecutionProgress, _impl_.inputs_)>(
          reinterpret_cast<char*>(&_impl_.inputs_),
          reinterpret_cast<char*>(&other->_impl_.inputs_));
}

::google::protobuf::Metadata ExecutionProgress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_getter, &descriptor_table_egm_5fwrapper_5ftrajectory_2eproto_once,
      file_level_metadata_egm_5fwrapper_5ftrajectory_2eproto[10]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace trajectory
}  // namespace wrapper
}  // namespace egm
}  // namespace abb
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
