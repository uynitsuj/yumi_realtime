// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot_controller_description.proto

#include "robot_controller_description.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace abb {
namespace robot {

inline constexpr Transmission::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        rotating_move_{false} {}

template <typename>
PROTOBUF_CONSTEXPR Transmission::Transmission(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TransmissionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransmissionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransmissionDefaultTypeInternal() {}
  union {
    Transmission _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransmissionDefaultTypeInternal _Transmission_default_instance_;

inline constexpr StandardizedJoint::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        original_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        standardized_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        lower_joint_bound_{0},
        upper_joint_bound_{0},
        rotating_move_{false} {}

template <typename>
PROTOBUF_CONSTEXPR StandardizedJoint::StandardizedJoint(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct StandardizedJointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StandardizedJointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StandardizedJointDefaultTypeInternal() {}
  union {
    StandardizedJoint _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StandardizedJointDefaultTypeInternal _StandardizedJoint_default_instance_;

inline constexpr RobotWareVersion::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        major_number_{0u},
        minor_number_{0u},
        patch_number_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR RobotWareVersion::RobotWareVersion(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RobotWareVersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RobotWareVersionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RobotWareVersionDefaultTypeInternal() {}
  union {
    RobotWareVersion _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RobotWareVersionDefaultTypeInternal _RobotWareVersion_default_instance_;

inline constexpr RobotIndicators::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        irb14000_{false} {}

template <typename>
PROTOBUF_CONSTEXPR RobotIndicators::RobotIndicators(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RobotIndicatorsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RobotIndicatorsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RobotIndicatorsDefaultTypeInternal() {}
  union {
    RobotIndicators _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RobotIndicatorsDefaultTypeInternal _RobotIndicators_default_instance_;

inline constexpr RAPIDModule::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR RAPIDModule::RAPIDModule(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RAPIDModuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RAPIDModuleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RAPIDModuleDefaultTypeInternal() {}
  union {
    RAPIDModule _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RAPIDModuleDefaultTypeInternal _RAPIDModule_default_instance_;

inline constexpr Quaternion::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        q1_{0},
        q2_{0},
        q3_{0},
        q4_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Quaternion::Quaternion(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct QuaternionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuaternionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuaternionDefaultTypeInternal() {}
  union {
    Quaternion _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuaternionDefaultTypeInternal _Quaternion_default_instance_;

inline constexpr OptionIndicators::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        egm_{false},
        leadthrough_{false},
        multimove_{false} {}

template <typename>
PROTOBUF_CONSTEXPR OptionIndicators::OptionIndicators(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct OptionIndicatorsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OptionIndicatorsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OptionIndicatorsDefaultTypeInternal() {}
  union {
    OptionIndicators _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OptionIndicatorsDefaultTypeInternal _OptionIndicators_default_instance_;

inline constexpr Cartesian::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        x_{0},
        y_{0},
        z_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Cartesian::Cartesian(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CartesianDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CartesianDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CartesianDefaultTypeInternal() {}
  union {
    Cartesian _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CartesianDefaultTypeInternal _Cartesian_default_instance_;

inline constexpr Arm::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        lower_joint_bound_{0},
        upper_joint_bound_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Arm::Arm(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ArmDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArmDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArmDefaultTypeInternal() {}
  union {
    Arm _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArmDefaultTypeInternal _Arm_default_instance_;

inline constexpr AddInIndicators::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        smart_gripper_{false},
        state_machine_1_0_{false},
        state_machine_1_1_{false} {}

template <typename>
PROTOBUF_CONSTEXPR AddInIndicators::AddInIndicators(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AddInIndicatorsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddInIndicatorsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddInIndicatorsDefaultTypeInternal() {}
  union {
    AddInIndicators _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddInIndicatorsDefaultTypeInternal _AddInIndicators_default_instance_;

inline constexpr SystemIndicators::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        robots_{nullptr},
        options_{nullptr},
        addins_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SystemIndicators::SystemIndicators(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SystemIndicatorsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemIndicatorsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemIndicatorsDefaultTypeInternal() {}
  union {
    SystemIndicators _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemIndicatorsDefaultTypeInternal _SystemIndicators_default_instance_;

inline constexpr RAPIDTask::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        modules_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        is_motion_task_{false},
        is_active_{false},
        execution_state_{static_cast< ::abb::robot::RAPIDTask_ExecutionState >(1)} {}

template <typename>
PROTOBUF_CONSTEXPR RAPIDTask::RAPIDTask(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RAPIDTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RAPIDTaskDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RAPIDTaskDefaultTypeInternal() {}
  union {
    RAPIDTask _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RAPIDTaskDefaultTypeInternal _RAPIDTask_default_instance_;

inline constexpr Pose::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        position_{nullptr},
        rotation_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Pose::Pose(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PoseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PoseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PoseDefaultTypeInternal() {}
  union {
    Pose _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PoseDefaultTypeInternal _Pose_default_instance_;

inline constexpr Joint::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        arm_{nullptr},
        transmission_{nullptr},
        logical_axis_{0},
        kinematic_axis_number_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Joint::Joint(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct JointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~JointDefaultTypeInternal() {}
  union {
    Joint _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JointDefaultTypeInternal _Joint_default_instance_;

inline constexpr Header::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        options_{},
        ip_address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        system_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        system_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        robot_ware_version_{nullptr},
        rws_port_number_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR Header::Header(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderDefaultTypeInternal _Header_default_instance_;

inline constexpr Single::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        base_frame_moved_by_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        joint_{nullptr},
        base_frame_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Single::Single(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SingleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleDefaultTypeInternal() {}
  union {
    Single _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleDefaultTypeInternal _Single_default_instance_;

inline constexpr Robot::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        joints_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        base_frame_moved_by_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        base_frame_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Robot::Robot(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RobotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RobotDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RobotDefaultTypeInternal() {}
  union {
    Robot _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RobotDefaultTypeInternal _Robot_default_instance_;

inline constexpr MechanicalUnit::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        singles_{},
        standardized_joints_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        task_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        is_integrated_unit_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        has_integrated_unit_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        status_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        robot_{nullptr},
        type_{static_cast< ::abb::robot::MechanicalUnit_Type >(0)},
        axes_{0},
        axes_total_{0},
        mode_{static_cast< ::abb::robot::MechanicalUnit_Mode >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR MechanicalUnit::MechanicalUnit(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MechanicalUnitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MechanicalUnitDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MechanicalUnitDefaultTypeInternal() {}
  union {
    MechanicalUnit _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MechanicalUnitDefaultTypeInternal _MechanicalUnit_default_instance_;

inline constexpr MechanicalUnitGroup::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        mechanical_units_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        robot_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR MechanicalUnitGroup::MechanicalUnitGroup(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MechanicalUnitGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MechanicalUnitGroupDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MechanicalUnitGroupDefaultTypeInternal() {}
  union {
    MechanicalUnitGroup _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MechanicalUnitGroupDefaultTypeInternal _MechanicalUnitGroup_default_instance_;

inline constexpr RobotControllerDescription::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        mechanical_units_groups_{},
        rapid_tasks_{},
        header_{nullptr},
        system_indicators_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR RobotControllerDescription::RobotControllerDescription(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RobotControllerDescriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RobotControllerDescriptionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RobotControllerDescriptionDefaultTypeInternal() {}
  union {
    RobotControllerDescription _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RobotControllerDescriptionDefaultTypeInternal _RobotControllerDescription_default_instance_;
}  // namespace robot
}  // namespace abb
static ::_pb::Metadata file_level_metadata_robot_5fcontroller_5fdescription_2eproto[20];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_robot_5fcontroller_5fdescription_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_robot_5fcontroller_5fdescription_2eproto = nullptr;
const ::uint32_t TableStruct_robot_5fcontroller_5fdescription_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::abb::robot::Header, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::Header, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::robot::Header, _impl_.ip_address_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::Header, _impl_.rws_port_number_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::Header, _impl_.robot_ware_version_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::Header, _impl_.system_name_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::Header, _impl_.system_type_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::Header, _impl_.options_),
    0,
    4,
    3,
    1,
    2,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::abb::robot::RobotControllerDescription, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::RobotControllerDescription, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::robot::RobotControllerDescription, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::RobotControllerDescription, _impl_.system_indicators_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::RobotControllerDescription, _impl_.mechanical_units_groups_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::RobotControllerDescription, _impl_.rapid_tasks_),
    0,
    1,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::abb::robot::RobotWareVersion, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::RobotWareVersion, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::robot::RobotWareVersion, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::RobotWareVersion, _impl_.major_number_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::RobotWareVersion, _impl_.minor_number_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::RobotWareVersion, _impl_.patch_number_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::abb::robot::Cartesian, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::Cartesian, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::robot::Cartesian, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::Cartesian, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::Cartesian, _impl_.z_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::abb::robot::Quaternion, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::Quaternion, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::robot::Quaternion, _impl_.q1_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::Quaternion, _impl_.q2_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::Quaternion, _impl_.q3_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::Quaternion, _impl_.q4_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::abb::robot::Pose, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::Pose, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::robot::Pose, _impl_.position_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::Pose, _impl_.rotation_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::abb::robot::RobotIndicators, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::RobotIndicators, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::robot::RobotIndicators, _impl_.irb14000_),
    0,
    PROTOBUF_FIELD_OFFSET(::abb::robot::OptionIndicators, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::OptionIndicators, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::robot::OptionIndicators, _impl_.egm_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::OptionIndicators, _impl_.leadthrough_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::OptionIndicators, _impl_.multimove_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::abb::robot::AddInIndicators, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::AddInIndicators, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::robot::AddInIndicators, _impl_.smart_gripper_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::AddInIndicators, _impl_.state_machine_1_0_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::AddInIndicators, _impl_.state_machine_1_1_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::abb::robot::SystemIndicators, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::SystemIndicators, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::robot::SystemIndicators, _impl_.robots_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::SystemIndicators, _impl_.options_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::SystemIndicators, _impl_.addins_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::abb::robot::Transmission, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::Transmission, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::robot::Transmission, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::Transmission, _impl_.rotating_move_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::abb::robot::Arm, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::Arm, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::robot::Arm, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::Arm, _impl_.lower_joint_bound_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::Arm, _impl_.upper_joint_bound_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::abb::robot::Joint, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::Joint, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::robot::Joint, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::Joint, _impl_.logical_axis_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::Joint, _impl_.kinematic_axis_number_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::Joint, _impl_.arm_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::Joint, _impl_.transmission_),
    0,
    3,
    4,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::abb::robot::StandardizedJoint, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::StandardizedJoint, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::robot::StandardizedJoint, _impl_.original_name_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::StandardizedJoint, _impl_.standardized_name_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::StandardizedJoint, _impl_.rotating_move_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::StandardizedJoint, _impl_.lower_joint_bound_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::StandardizedJoint, _impl_.upper_joint_bound_),
    0,
    1,
    4,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::abb::robot::Single, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::Single, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::robot::Single, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::Single, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::Single, _impl_.joint_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::Single, _impl_.base_frame_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::Single, _impl_.base_frame_moved_by_),
    0,
    1,
    3,
    4,
    2,
    PROTOBUF_FIELD_OFFSET(::abb::robot::Robot, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::Robot, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::robot::Robot, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::Robot, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::Robot, _impl_.joints_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::Robot, _impl_.base_frame_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::Robot, _impl_.base_frame_moved_by_),
    0,
    1,
    ~0u,
    3,
    2,
    PROTOBUF_FIELD_OFFSET(::abb::robot::MechanicalUnit, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::MechanicalUnit, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::robot::MechanicalUnit, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::MechanicalUnit, _impl_.robot_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::MechanicalUnit, _impl_.singles_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::MechanicalUnit, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::MechanicalUnit, _impl_.task_name_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::MechanicalUnit, _impl_.axes_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::MechanicalUnit, _impl_.axes_total_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::MechanicalUnit, _impl_.is_integrated_unit_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::MechanicalUnit, _impl_.has_integrated_unit_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::MechanicalUnit, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::MechanicalUnit, _impl_.mode_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::MechanicalUnit, _impl_.standardized_joints_),
    0,
    5,
    ~0u,
    6,
    1,
    7,
    8,
    2,
    3,
    4,
    9,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::abb::robot::MechanicalUnitGroup, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::MechanicalUnitGroup, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::robot::MechanicalUnitGroup, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::MechanicalUnitGroup, _impl_.robot_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::MechanicalUnitGroup, _impl_.mechanical_units_),
    0,
    1,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::abb::robot::RAPIDModule, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::RAPIDModule, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::robot::RAPIDModule, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::RAPIDModule, _impl_.type_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::abb::robot::RAPIDTask, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::RAPIDTask, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::abb::robot::RAPIDTask, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::RAPIDTask, _impl_.is_motion_task_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::RAPIDTask, _impl_.is_active_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::RAPIDTask, _impl_.execution_state_),
    PROTOBUF_FIELD_OFFSET(::abb::robot::RAPIDTask, _impl_.modules_),
    0,
    1,
    2,
    3,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 14, -1, sizeof(::abb::robot::Header)},
        {20, 32, -1, sizeof(::abb::robot::RobotControllerDescription)},
        {36, 48, -1, sizeof(::abb::robot::RobotWareVersion)},
        {52, 63, -1, sizeof(::abb::robot::Cartesian)},
        {66, 78, -1, sizeof(::abb::robot::Quaternion)},
        {82, 92, -1, sizeof(::abb::robot::Pose)},
        {94, 103, -1, sizeof(::abb::robot::RobotIndicators)},
        {104, 115, -1, sizeof(::abb::robot::OptionIndicators)},
        {118, 129, -1, sizeof(::abb::robot::AddInIndicators)},
        {132, 143, -1, sizeof(::abb::robot::SystemIndicators)},
        {146, 156, -1, sizeof(::abb::robot::Transmission)},
        {158, 169, -1, sizeof(::abb::robot::Arm)},
        {172, 185, -1, sizeof(::abb::robot::Joint)},
        {190, 203, -1, sizeof(::abb::robot::StandardizedJoint)},
        {208, 221, -1, sizeof(::abb::robot::Single)},
        {226, 239, -1, sizeof(::abb::robot::Robot)},
        {244, 264, -1, sizeof(::abb::robot::MechanicalUnit)},
        {276, 287, -1, sizeof(::abb::robot::MechanicalUnitGroup)},
        {290, 300, -1, sizeof(::abb::robot::RAPIDModule)},
        {302, 315, -1, sizeof(::abb::robot::RAPIDTask)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::abb::robot::_Header_default_instance_._instance,
    &::abb::robot::_RobotControllerDescription_default_instance_._instance,
    &::abb::robot::_RobotWareVersion_default_instance_._instance,
    &::abb::robot::_Cartesian_default_instance_._instance,
    &::abb::robot::_Quaternion_default_instance_._instance,
    &::abb::robot::_Pose_default_instance_._instance,
    &::abb::robot::_RobotIndicators_default_instance_._instance,
    &::abb::robot::_OptionIndicators_default_instance_._instance,
    &::abb::robot::_AddInIndicators_default_instance_._instance,
    &::abb::robot::_SystemIndicators_default_instance_._instance,
    &::abb::robot::_Transmission_default_instance_._instance,
    &::abb::robot::_Arm_default_instance_._instance,
    &::abb::robot::_Joint_default_instance_._instance,
    &::abb::robot::_StandardizedJoint_default_instance_._instance,
    &::abb::robot::_Single_default_instance_._instance,
    &::abb::robot::_Robot_default_instance_._instance,
    &::abb::robot::_MechanicalUnit_default_instance_._instance,
    &::abb::robot::_MechanicalUnitGroup_default_instance_._instance,
    &::abb::robot::_RAPIDModule_default_instance_._instance,
    &::abb::robot::_RAPIDTask_default_instance_._instance,
};
const char descriptor_table_protodef_robot_5fcontroller_5fdescription_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\"robot_controller_description.proto\022\tab"
    "b.robot\"\251\001\n\006Header\022\022\n\nip_address\030\001 \001(\t\022\027"
    "\n\017rws_port_number\030\002 \001(\r\0227\n\022robot_ware_ve"
    "rsion\030\003 \001(\0132\033.abb.robot.RobotWareVersion"
    "\022\023\n\013system_name\030\004 \001(\t\022\023\n\013system_type\030\005 \001"
    "(\t\022\017\n\007options\030\006 \003(\t\"\343\001\n\032RobotControllerD"
    "escription\022!\n\006header\030\001 \001(\0132\021.abb.robot.H"
    "eader\0226\n\021system_indicators\030\002 \001(\0132\033.abb.r"
    "obot.SystemIndicators\022\?\n\027mechanical_unit"
    "s_groups\030\003 \003(\0132\036.abb.robot.MechanicalUni"
    "tGroup\022)\n\013rapid_tasks\030\004 \003(\0132\024.abb.robot."
    "RAPIDTask\"b\n\020RobotWareVersion\022\014\n\004name\030\001 "
    "\001(\t\022\024\n\014major_number\030\002 \001(\r\022\024\n\014minor_numbe"
    "r\030\003 \001(\r\022\024\n\014patch_number\030\004 \001(\r\",\n\tCartesi"
    "an\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"<\n\nQ"
    "uaternion\022\n\n\002q1\030\001 \001(\001\022\n\n\002q2\030\002 \001(\001\022\n\n\002q3\030"
    "\003 \001(\001\022\n\n\002q4\030\004 \001(\001\"W\n\004Pose\022&\n\010position\030\001 "
    "\001(\0132\024.abb.robot.Cartesian\022\'\n\010rotation\030\002 "
    "\001(\0132\025.abb.robot.Quaternion\"#\n\017RobotIndic"
    "ators\022\020\n\010irb14000\030\001 \001(\010\"G\n\020OptionIndicat"
    "ors\022\013\n\003egm\030\001 \001(\010\022\023\n\013leadthrough\030\002 \001(\010\022\021\n"
    "\tmultimove\030\003 \001(\010\"^\n\017AddInIndicators\022\025\n\rs"
    "mart_gripper\030\001 \001(\010\022\031\n\021state_machine_1_0\030"
    "\002 \001(\010\022\031\n\021state_machine_1_1\030\003 \001(\010\"\230\001\n\020Sys"
    "temIndicators\022*\n\006robots\030\001 \001(\0132\032.abb.robo"
    "t.RobotIndicators\022,\n\007options\030\002 \001(\0132\033.abb"
    ".robot.OptionIndicators\022*\n\006addins\030\003 \001(\0132"
    "\032.abb.robot.AddInIndicators\"3\n\014Transmiss"
    "ion\022\014\n\004name\030\001 \001(\t\022\025\n\rrotating_move\030\002 \001(\010"
    "\"I\n\003Arm\022\014\n\004name\030\001 \001(\t\022\031\n\021lower_joint_bou"
    "nd\030\002 \001(\001\022\031\n\021upper_joint_bound\030\003 \001(\001\"\226\001\n\005"
    "Joint\022\014\n\004name\030\001 \001(\t\022\024\n\014logical_axis\030\002 \001("
    "\005\022\035\n\025kinematic_axis_number\030\003 \001(\005\022\033\n\003arm\030"
    "\004 \001(\0132\016.abb.robot.Arm\022-\n\014transmission\030\005 "
    "\001(\0132\027.abb.robot.Transmission\"\222\001\n\021Standar"
    "dizedJoint\022\025\n\roriginal_name\030\001 \001(\t\022\031\n\021sta"
    "ndardized_name\030\002 \001(\t\022\025\n\rrotating_move\030\003 "
    "\001(\010\022\031\n\021lower_joint_bound\030\004 \001(\001\022\031\n\021upper_"
    "joint_bound\030\005 \001(\001\"\207\001\n\006Single\022\014\n\004name\030\001 \001"
    "(\t\022\014\n\004type\030\002 \001(\t\022\037\n\005joint\030\003 \001(\0132\020.abb.ro"
    "bot.Joint\022#\n\nbase_frame\030\004 \001(\0132\017.abb.robo"
    "t.Pose\022\033\n\023base_frame_moved_by\030\005 \001(\t\"\207\001\n\005"
    "Robot\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022 \n\006joi"
    "nts\030\003 \003(\0132\020.abb.robot.Joint\022#\n\nbase_fram"
    "e\030\004 \001(\0132\017.abb.robot.Pose\022\033\n\023base_frame_m"
    "oved_by\030\005 \001(\t\"\377\003\n\016MechanicalUnit\022\014\n\004name"
    "\030\001 \001(\t\022\037\n\005robot\030\002 \001(\0132\020.abb.robot.Robot\022"
    "\"\n\007singles\030\003 \003(\0132\021.abb.robot.Single\0227\n\004t"
    "ype\030\004 \001(\0162\036.abb.robot.MechanicalUnit.Typ"
    "e:\tUNDEFINED\022\021\n\ttask_name\030\005 \001(\t\022\014\n\004axes\030"
    "\006 \001(\005\022\022\n\naxes_total\030\007 \001(\005\022\032\n\022is_integrat"
    "ed_unit\030\010 \001(\t\022\033\n\023has_integrated_unit\030\t \001"
    "(\t\022\016\n\006status\030\n \001(\t\0229\n\004mode\030\013 \001(\0162\036.abb.r"
    "obot.MechanicalUnit.Mode:\013DEACTIVATED\0229\n"
    "\023standardized_joints\030\014 \003(\0132\034.abb.robot.S"
    "tandardizedJoint\"E\n\004Type\022\r\n\tUNDEFINED\020\000\022"
    "\010\n\004NONE\020\001\022\r\n\tTCP_ROBOT\020\002\022\t\n\005ROBOT\020\003\022\n\n\006S"
    "INGLE\020\004\"&\n\004Mode\022\017\n\013DEACTIVATED\020\000\022\r\n\tACTI"
    "VATED\020\001\"\202\001\n\023MechanicalUnitGroup\022\014\n\004name\030"
    "\001 \001(\t\022(\n\005robot\030\002 \001(\0132\031.abb.robot.Mechani"
    "calUnit\0223\n\020mechanical_units\030\003 \003(\0132\031.abb."
    "robot.MechanicalUnit\")\n\013RAPIDModule\022\014\n\004n"
    "ame\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\"\213\002\n\tRAPIDTask\022\014\n"
    "\004name\030\001 \001(\t\022\026\n\016is_motion_task\030\002 \001(\010\022\021\n\ti"
    "s_active\030\003 \001(\010\022E\n\017execution_state\030\004 \001(\0162"
    "#.abb.robot.RAPIDTask.ExecutionState:\007UN"
    "KNOWN\022\'\n\007modules\030\005 \003(\0132\026.abb.robot.RAPID"
    "Module\"U\n\016ExecutionState\022\013\n\007UNKNOWN\020\001\022\t\n"
    "\005READY\020\002\022\013\n\007STOPPED\020\003\022\013\n\007STARTED\020\004\022\021\n\rUN"
    "INITIALIZED\020\005"
};
static ::absl::once_flag descriptor_table_robot_5fcontroller_5fdescription_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_robot_5fcontroller_5fdescription_2eproto = {
    false,
    false,
    2773,
    descriptor_table_protodef_robot_5fcontroller_5fdescription_2eproto,
    "robot_controller_description.proto",
    &descriptor_table_robot_5fcontroller_5fdescription_2eproto_once,
    nullptr,
    0,
    20,
    schemas,
    file_default_instances,
    TableStruct_robot_5fcontroller_5fdescription_2eproto::offsets,
    file_level_metadata_robot_5fcontroller_5fdescription_2eproto,
    file_level_enum_descriptors_robot_5fcontroller_5fdescription_2eproto,
    file_level_service_descriptors_robot_5fcontroller_5fdescription_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_robot_5fcontroller_5fdescription_2eproto_getter() {
  return &descriptor_table_robot_5fcontroller_5fdescription_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_robot_5fcontroller_5fdescription_2eproto(&descriptor_table_robot_5fcontroller_5fdescription_2eproto);
namespace abb {
namespace robot {
const ::google::protobuf::EnumDescriptor* MechanicalUnit_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_robot_5fcontroller_5fdescription_2eproto);
  return file_level_enum_descriptors_robot_5fcontroller_5fdescription_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t MechanicalUnit_Type_internal_data_[] = {
    327680u, 0u, };
bool MechanicalUnit_Type_IsValid(int value) {
  return 0 <= value && value <= 4;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr MechanicalUnit_Type MechanicalUnit::UNDEFINED;
constexpr MechanicalUnit_Type MechanicalUnit::NONE;
constexpr MechanicalUnit_Type MechanicalUnit::TCP_ROBOT;
constexpr MechanicalUnit_Type MechanicalUnit::ROBOT;
constexpr MechanicalUnit_Type MechanicalUnit::SINGLE;
constexpr MechanicalUnit_Type MechanicalUnit::Type_MIN;
constexpr MechanicalUnit_Type MechanicalUnit::Type_MAX;
constexpr int MechanicalUnit::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* MechanicalUnit_Mode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_robot_5fcontroller_5fdescription_2eproto);
  return file_level_enum_descriptors_robot_5fcontroller_5fdescription_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t MechanicalUnit_Mode_internal_data_[] = {
    131072u, 0u, };
bool MechanicalUnit_Mode_IsValid(int value) {
  return 0 <= value && value <= 1;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr MechanicalUnit_Mode MechanicalUnit::DEACTIVATED;
constexpr MechanicalUnit_Mode MechanicalUnit::ACTIVATED;
constexpr MechanicalUnit_Mode MechanicalUnit::Mode_MIN;
constexpr MechanicalUnit_Mode MechanicalUnit::Mode_MAX;
constexpr int MechanicalUnit::Mode_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* RAPIDTask_ExecutionState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_robot_5fcontroller_5fdescription_2eproto);
  return file_level_enum_descriptors_robot_5fcontroller_5fdescription_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t RAPIDTask_ExecutionState_internal_data_[] = {
    327681u, 0u, };
bool RAPIDTask_ExecutionState_IsValid(int value) {
  return 1 <= value && value <= 5;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr RAPIDTask_ExecutionState RAPIDTask::UNKNOWN;
constexpr RAPIDTask_ExecutionState RAPIDTask::READY;
constexpr RAPIDTask_ExecutionState RAPIDTask::STOPPED;
constexpr RAPIDTask_ExecutionState RAPIDTask::STARTED;
constexpr RAPIDTask_ExecutionState RAPIDTask::UNINITIALIZED;
constexpr RAPIDTask_ExecutionState RAPIDTask::ExecutionState_MIN;
constexpr RAPIDTask_ExecutionState RAPIDTask::ExecutionState_MAX;
constexpr int RAPIDTask::ExecutionState_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class Header::_Internal {
 public:
  using HasBits = decltype(std::declval<Header>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Header, _impl_._has_bits_);
  static void set_has_ip_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rws_port_number(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::abb::robot::RobotWareVersion& robot_ware_version(const Header* msg);
  static void set_has_robot_ware_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_system_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_system_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::abb::robot::RobotWareVersion& Header::_Internal::robot_ware_version(const Header* msg) {
  return *msg->_impl_.robot_ware_version_;
}
Header::Header(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.robot.Header)
}
inline PROTOBUF_NDEBUG_INLINE Header::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        options_{visibility, arena, from.options_},
        ip_address_(arena, from.ip_address_),
        system_name_(arena, from.system_name_),
        system_type_(arena, from.system_type_) {}

Header::Header(
    ::google::protobuf::Arena* arena,
    const Header& from)
    : ::google::protobuf::Message(arena) {
  Header* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.robot_ware_version_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::abb::robot::RobotWareVersion>(arena, *from._impl_.robot_ware_version_)
                : nullptr;
  _impl_.rws_port_number_ = from._impl_.rws_port_number_;

  // @@protoc_insertion_point(copy_constructor:abb.robot.Header)
}
inline PROTOBUF_NDEBUG_INLINE Header::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        options_{visibility, arena},
        ip_address_(arena),
        system_name_(arena),
        system_type_(arena) {}

inline void Header::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, robot_ware_version_),
           0,
           offsetof(Impl_, rws_port_number_) -
               offsetof(Impl_, robot_ware_version_) +
               sizeof(Impl_::rws_port_number_));
}
Header::~Header() {
  // @@protoc_insertion_point(destructor:abb.robot.Header)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Header::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.ip_address_.Destroy();
  _impl_.system_name_.Destroy();
  _impl_.system_type_.Destroy();
  delete _impl_.robot_ware_version_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.Header)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.options_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.ip_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.system_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.system_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.robot_ware_version_ != nullptr);
      _impl_.robot_ware_version_->Clear();
    }
  }
  _impl_.rws_port_number_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Header::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 64, 2> Header::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Header, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Header_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string ip_address = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.ip_address_)}},
    // optional uint32 rws_port_number = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Header, _impl_.rws_port_number_), 4>(),
     {16, 4, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.rws_port_number_)}},
    // optional .abb.robot.RobotWareVersion robot_ware_version = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 3, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.robot_ware_version_)}},
    // optional string system_name = 4;
    {::_pbi::TcParser::FastSS1,
     {34, 1, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.system_name_)}},
    // optional string system_type = 5;
    {::_pbi::TcParser::FastSS1,
     {42, 2, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.system_type_)}},
    // repeated string options = 6;
    {::_pbi::TcParser::FastSR1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.options_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string ip_address = 1;
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.ip_address_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional uint32 rws_port_number = 2;
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.rws_port_number_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .abb.robot.RobotWareVersion robot_ware_version = 3;
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.robot_ware_version_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional string system_name = 4;
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.system_name_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string system_type = 5;
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.system_type_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // repeated string options = 6;
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.options_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kRawString | ::_fl::kRepSString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::robot::RobotWareVersion>()},
  }}, {{
    "\20\12\0\0\13\13\7\0"
    "abb.robot.Header"
    "ip_address"
    "system_name"
    "system_type"
    "options"
  }},
};

::uint8_t* Header::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.Header)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string ip_address = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_ip_address();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "abb.robot.Header.ip_address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional uint32 rws_port_number = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_rws_port_number(), target);
  }

  // optional .abb.robot.RobotWareVersion robot_ware_version = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::robot_ware_version(this),
        _Internal::robot_ware_version(this).GetCachedSize(), target, stream);
  }

  // optional string system_name = 4;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_system_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "abb.robot.Header.system_name");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional string system_type = 5;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_system_type();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "abb.robot.Header.system_type");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // repeated string options = 6;
  for (int i = 0, n = this->_internal_options_size(); i < n; ++i) {
    const auto& s = this->_internal_options().Get(i);
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "abb.robot.Header.options");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.Header)
  return target;
}

::size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.Header)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string options = 6;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_options().size());
  for (int i = 0, n = _internal_options().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_options().Get(i));
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string ip_address = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_ip_address());
    }

    // optional string system_name = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_system_name());
    }

    // optional string system_type = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_system_type());
    }

    // optional .abb.robot.RobotWareVersion robot_ware_version = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.robot_ware_version_);
    }

    // optional uint32 rws_port_number = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_rws_port_number());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Header::_class_data_ = {
    Header::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Header::GetClassData() const {
  return &_class_data_;
}

void Header::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Header*>(&to_msg);
  auto& from = static_cast<const Header&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.Header)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_options()->MergeFrom(from._internal_options());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_ip_address(from._internal_ip_address());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_system_name(from._internal_system_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_system_type(from._internal_system_type());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_robot_ware_version()->::abb::robot::RobotWareVersion::MergeFrom(
          from._internal_robot_ware_version());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.rws_port_number_ = from._impl_.rws_port_number_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Header::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Header::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Header::InternalSwap(Header* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.options_.InternalSwap(&other->_impl_.options_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ip_address_, &other->_impl_.ip_address_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.system_name_, &other->_impl_.system_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.system_type_, &other->_impl_.system_type_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, _impl_.rws_port_number_)
      + sizeof(Header::_impl_.rws_port_number_)
      - PROTOBUF_FIELD_OFFSET(Header, _impl_.robot_ware_version_)>(
          reinterpret_cast<char*>(&_impl_.robot_ware_version_),
          reinterpret_cast<char*>(&other->_impl_.robot_ware_version_));
}

::google::protobuf::Metadata Header::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_5fcontroller_5fdescription_2eproto_getter, &descriptor_table_robot_5fcontroller_5fdescription_2eproto_once,
      file_level_metadata_robot_5fcontroller_5fdescription_2eproto[0]);
}
// ===================================================================

class RobotControllerDescription::_Internal {
 public:
  using HasBits = decltype(std::declval<RobotControllerDescription>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RobotControllerDescription, _impl_._has_bits_);
  static const ::abb::robot::Header& header(const RobotControllerDescription* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::robot::SystemIndicators& system_indicators(const RobotControllerDescription* msg);
  static void set_has_system_indicators(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::abb::robot::Header& RobotControllerDescription::_Internal::header(const RobotControllerDescription* msg) {
  return *msg->_impl_.header_;
}
const ::abb::robot::SystemIndicators& RobotControllerDescription::_Internal::system_indicators(const RobotControllerDescription* msg) {
  return *msg->_impl_.system_indicators_;
}
RobotControllerDescription::RobotControllerDescription(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.robot.RobotControllerDescription)
}
inline PROTOBUF_NDEBUG_INLINE RobotControllerDescription::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        mechanical_units_groups_{visibility, arena, from.mechanical_units_groups_},
        rapid_tasks_{visibility, arena, from.rapid_tasks_} {}

RobotControllerDescription::RobotControllerDescription(
    ::google::protobuf::Arena* arena,
    const RobotControllerDescription& from)
    : ::google::protobuf::Message(arena) {
  RobotControllerDescription* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::abb::robot::Header>(arena, *from._impl_.header_)
                : nullptr;
  _impl_.system_indicators_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::abb::robot::SystemIndicators>(arena, *from._impl_.system_indicators_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:abb.robot.RobotControllerDescription)
}
inline PROTOBUF_NDEBUG_INLINE RobotControllerDescription::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        mechanical_units_groups_{visibility, arena},
        rapid_tasks_{visibility, arena} {}

inline void RobotControllerDescription::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, system_indicators_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::system_indicators_));
}
RobotControllerDescription::~RobotControllerDescription() {
  // @@protoc_insertion_point(destructor:abb.robot.RobotControllerDescription)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RobotControllerDescription::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.header_;
  delete _impl_.system_indicators_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RobotControllerDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.RobotControllerDescription)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mechanical_units_groups_.Clear();
  _impl_.rapid_tasks_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.system_indicators_ != nullptr);
      _impl_.system_indicators_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RobotControllerDescription::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2> RobotControllerDescription::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RobotControllerDescription, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RobotControllerDescription_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .abb.robot.RAPIDTask rapid_tasks = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 3, PROTOBUF_FIELD_OFFSET(RobotControllerDescription, _impl_.rapid_tasks_)}},
    // optional .abb.robot.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RobotControllerDescription, _impl_.header_)}},
    // optional .abb.robot.SystemIndicators system_indicators = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(RobotControllerDescription, _impl_.system_indicators_)}},
    // repeated .abb.robot.MechanicalUnitGroup mechanical_units_groups = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(RobotControllerDescription, _impl_.mechanical_units_groups_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .abb.robot.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(RobotControllerDescription, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.robot.SystemIndicators system_indicators = 2;
    {PROTOBUF_FIELD_OFFSET(RobotControllerDescription, _impl_.system_indicators_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .abb.robot.MechanicalUnitGroup mechanical_units_groups = 3;
    {PROTOBUF_FIELD_OFFSET(RobotControllerDescription, _impl_.mechanical_units_groups_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .abb.robot.RAPIDTask rapid_tasks = 4;
    {PROTOBUF_FIELD_OFFSET(RobotControllerDescription, _impl_.rapid_tasks_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::robot::Header>()},
    {::_pbi::TcParser::GetTable<::abb::robot::SystemIndicators>()},
    {::_pbi::TcParser::GetTable<::abb::robot::MechanicalUnitGroup>()},
    {::_pbi::TcParser::GetTable<::abb::robot::RAPIDTask>()},
  }}, {{
  }},
};

::uint8_t* RobotControllerDescription::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.RobotControllerDescription)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .abb.robot.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional .abb.robot.SystemIndicators system_indicators = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::system_indicators(this),
        _Internal::system_indicators(this).GetCachedSize(), target, stream);
  }

  // repeated .abb.robot.MechanicalUnitGroup mechanical_units_groups = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mechanical_units_groups_size()); i < n; i++) {
    const auto& repfield = this->_internal_mechanical_units_groups().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .abb.robot.RAPIDTask rapid_tasks = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rapid_tasks_size()); i < n; i++) {
    const auto& repfield = this->_internal_rapid_tasks().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.RobotControllerDescription)
  return target;
}

::size_t RobotControllerDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.RobotControllerDescription)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .abb.robot.MechanicalUnitGroup mechanical_units_groups = 3;
  total_size += 1UL * this->_internal_mechanical_units_groups_size();
  for (const auto& msg : this->_internal_mechanical_units_groups()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .abb.robot.RAPIDTask rapid_tasks = 4;
  total_size += 1UL * this->_internal_rapid_tasks_size();
  for (const auto& msg : this->_internal_rapid_tasks()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .abb.robot.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.header_);
    }

    // optional .abb.robot.SystemIndicators system_indicators = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.system_indicators_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RobotControllerDescription::_class_data_ = {
    RobotControllerDescription::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RobotControllerDescription::GetClassData() const {
  return &_class_data_;
}

void RobotControllerDescription::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RobotControllerDescription*>(&to_msg);
  auto& from = static_cast<const RobotControllerDescription&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.RobotControllerDescription)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_mechanical_units_groups()->MergeFrom(
      from._internal_mechanical_units_groups());
  _this->_internal_mutable_rapid_tasks()->MergeFrom(
      from._internal_rapid_tasks());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::abb::robot::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_system_indicators()->::abb::robot::SystemIndicators::MergeFrom(
          from._internal_system_indicators());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RobotControllerDescription::CopyFrom(const RobotControllerDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.RobotControllerDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RobotControllerDescription::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RobotControllerDescription::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RobotControllerDescription::InternalSwap(RobotControllerDescription* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mechanical_units_groups_.InternalSwap(&other->_impl_.mechanical_units_groups_);
  _impl_.rapid_tasks_.InternalSwap(&other->_impl_.rapid_tasks_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotControllerDescription, _impl_.system_indicators_)
      + sizeof(RobotControllerDescription::_impl_.system_indicators_)
      - PROTOBUF_FIELD_OFFSET(RobotControllerDescription, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata RobotControllerDescription::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_5fcontroller_5fdescription_2eproto_getter, &descriptor_table_robot_5fcontroller_5fdescription_2eproto_once,
      file_level_metadata_robot_5fcontroller_5fdescription_2eproto[1]);
}
// ===================================================================

class RobotWareVersion::_Internal {
 public:
  using HasBits = decltype(std::declval<RobotWareVersion>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RobotWareVersion, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_major_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_minor_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_patch_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

RobotWareVersion::RobotWareVersion(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.robot.RobotWareVersion)
}
inline PROTOBUF_NDEBUG_INLINE RobotWareVersion::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_) {}

RobotWareVersion::RobotWareVersion(
    ::google::protobuf::Arena* arena,
    const RobotWareVersion& from)
    : ::google::protobuf::Message(arena) {
  RobotWareVersion* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, major_number_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, major_number_),
           offsetof(Impl_, patch_number_) -
               offsetof(Impl_, major_number_) +
               sizeof(Impl_::patch_number_));

  // @@protoc_insertion_point(copy_constructor:abb.robot.RobotWareVersion)
}
inline PROTOBUF_NDEBUG_INLINE RobotWareVersion::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        name_(arena) {}

inline void RobotWareVersion::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, major_number_),
           0,
           offsetof(Impl_, patch_number_) -
               offsetof(Impl_, major_number_) +
               sizeof(Impl_::patch_number_));
}
RobotWareVersion::~RobotWareVersion() {
  // @@protoc_insertion_point(destructor:abb.robot.RobotWareVersion)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RobotWareVersion::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RobotWareVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.RobotWareVersion)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.major_number_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.patch_number_) -
        reinterpret_cast<char*>(&_impl_.major_number_)) + sizeof(_impl_.patch_number_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RobotWareVersion::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 39, 2> RobotWareVersion::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RobotWareVersion, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_RobotWareVersion_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional uint32 patch_number = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RobotWareVersion, _impl_.patch_number_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(RobotWareVersion, _impl_.patch_number_)}},
    // optional string name = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RobotWareVersion, _impl_.name_)}},
    // optional uint32 major_number = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RobotWareVersion, _impl_.major_number_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(RobotWareVersion, _impl_.major_number_)}},
    // optional uint32 minor_number = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RobotWareVersion, _impl_.minor_number_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(RobotWareVersion, _impl_.minor_number_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string name = 1;
    {PROTOBUF_FIELD_OFFSET(RobotWareVersion, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional uint32 major_number = 2;
    {PROTOBUF_FIELD_OFFSET(RobotWareVersion, _impl_.major_number_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 minor_number = 3;
    {PROTOBUF_FIELD_OFFSET(RobotWareVersion, _impl_.minor_number_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 patch_number = 4;
    {PROTOBUF_FIELD_OFFSET(RobotWareVersion, _impl_.patch_number_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
    "\32\4\0\0\0\0\0\0"
    "abb.robot.RobotWareVersion"
    "name"
  }},
};

::uint8_t* RobotWareVersion::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.RobotWareVersion)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "abb.robot.RobotWareVersion.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional uint32 major_number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_major_number(), target);
  }

  // optional uint32 minor_number = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_minor_number(), target);
  }

  // optional uint32 patch_number = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_patch_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.RobotWareVersion)
  return target;
}

::size_t RobotWareVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.RobotWareVersion)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional uint32 major_number = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_major_number());
    }

    // optional uint32 minor_number = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_minor_number());
    }

    // optional uint32 patch_number = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_patch_number());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RobotWareVersion::_class_data_ = {
    RobotWareVersion::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RobotWareVersion::GetClassData() const {
  return &_class_data_;
}

void RobotWareVersion::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RobotWareVersion*>(&to_msg);
  auto& from = static_cast<const RobotWareVersion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.RobotWareVersion)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.major_number_ = from._impl_.major_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.minor_number_ = from._impl_.minor_number_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.patch_number_ = from._impl_.patch_number_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RobotWareVersion::CopyFrom(const RobotWareVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.RobotWareVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RobotWareVersion::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RobotWareVersion::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RobotWareVersion::InternalSwap(RobotWareVersion* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotWareVersion, _impl_.patch_number_)
      + sizeof(RobotWareVersion::_impl_.patch_number_)
      - PROTOBUF_FIELD_OFFSET(RobotWareVersion, _impl_.major_number_)>(
          reinterpret_cast<char*>(&_impl_.major_number_),
          reinterpret_cast<char*>(&other->_impl_.major_number_));
}

::google::protobuf::Metadata RobotWareVersion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_5fcontroller_5fdescription_2eproto_getter, &descriptor_table_robot_5fcontroller_5fdescription_2eproto_once,
      file_level_metadata_robot_5fcontroller_5fdescription_2eproto[2]);
}
// ===================================================================

class Cartesian::_Internal {
 public:
  using HasBits = decltype(std::declval<Cartesian>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Cartesian, _impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Cartesian::Cartesian(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.robot.Cartesian)
}
Cartesian::Cartesian(
    ::google::protobuf::Arena* arena, const Cartesian& from)
    : Cartesian(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Cartesian::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Cartesian::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, z_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::z_));
}
Cartesian::~Cartesian() {
  // @@protoc_insertion_point(destructor:abb.robot.Cartesian)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Cartesian::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Cartesian::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.Cartesian)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.x_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.z_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Cartesian::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> Cartesian::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Cartesian, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Cartesian_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional double x = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 0, 0, PROTOBUF_FIELD_OFFSET(Cartesian, _impl_.x_)}},
    // optional double y = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 1, 0, PROTOBUF_FIELD_OFFSET(Cartesian, _impl_.y_)}},
    // optional double z = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 2, 0, PROTOBUF_FIELD_OFFSET(Cartesian, _impl_.z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional double x = 1;
    {PROTOBUF_FIELD_OFFSET(Cartesian, _impl_.x_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double y = 2;
    {PROTOBUF_FIELD_OFFSET(Cartesian, _impl_.y_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double z = 3;
    {PROTOBUF_FIELD_OFFSET(Cartesian, _impl_.z_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Cartesian::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.Cartesian)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_y(), target);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.Cartesian)
  return target;
}

::size_t Cartesian::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.Cartesian)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }

    // optional double y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

    // optional double z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Cartesian::_class_data_ = {
    Cartesian::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Cartesian::GetClassData() const {
  return &_class_data_;
}

void Cartesian::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Cartesian*>(&to_msg);
  auto& from = static_cast<const Cartesian&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.Cartesian)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.z_ = from._impl_.z_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Cartesian::CopyFrom(const Cartesian& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.Cartesian)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Cartesian::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Cartesian::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Cartesian::InternalSwap(Cartesian* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Cartesian, _impl_.z_)
      + sizeof(Cartesian::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Cartesian, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata Cartesian::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_5fcontroller_5fdescription_2eproto_getter, &descriptor_table_robot_5fcontroller_5fdescription_2eproto_once,
      file_level_metadata_robot_5fcontroller_5fdescription_2eproto[3]);
}
// ===================================================================

class Quaternion::_Internal {
 public:
  using HasBits = decltype(std::declval<Quaternion>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Quaternion, _impl_._has_bits_);
  static void set_has_q1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_q2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_q3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_q4(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Quaternion::Quaternion(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.robot.Quaternion)
}
Quaternion::Quaternion(
    ::google::protobuf::Arena* arena, const Quaternion& from)
    : Quaternion(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Quaternion::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Quaternion::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, q1_),
           0,
           offsetof(Impl_, q4_) -
               offsetof(Impl_, q1_) +
               sizeof(Impl_::q4_));
}
Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:abb.robot.Quaternion)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Quaternion::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.Quaternion)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.q1_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.q4_) -
        reinterpret_cast<char*>(&_impl_.q1_)) + sizeof(_impl_.q4_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Quaternion::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> Quaternion::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Quaternion, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Quaternion_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional double q4 = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 3, 0, PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.q4_)}},
    // optional double q1 = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 0, 0, PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.q1_)}},
    // optional double q2 = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 1, 0, PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.q2_)}},
    // optional double q3 = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 2, 0, PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.q3_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional double q1 = 1;
    {PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.q1_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double q2 = 2;
    {PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.q2_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double q3 = 3;
    {PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.q3_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double q4 = 4;
    {PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.q4_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Quaternion::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.Quaternion)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double q1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_q1(), target);
  }

  // optional double q2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_q2(), target);
  }

  // optional double q3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_q3(), target);
  }

  // optional double q4 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_q4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.Quaternion)
  return target;
}

::size_t Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.Quaternion)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double q1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }

    // optional double q2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

    // optional double q3 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }

    // optional double q4 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Quaternion::_class_data_ = {
    Quaternion::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Quaternion::GetClassData() const {
  return &_class_data_;
}

void Quaternion::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Quaternion*>(&to_msg);
  auto& from = static_cast<const Quaternion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.Quaternion)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.q1_ = from._impl_.q1_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.q2_ = from._impl_.q2_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.q3_ = from._impl_.q3_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.q4_ = from._impl_.q4_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Quaternion::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Quaternion::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Quaternion::InternalSwap(Quaternion* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.q4_)
      + sizeof(Quaternion::_impl_.q4_)
      - PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.q1_)>(
          reinterpret_cast<char*>(&_impl_.q1_),
          reinterpret_cast<char*>(&other->_impl_.q1_));
}

::google::protobuf::Metadata Quaternion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_5fcontroller_5fdescription_2eproto_getter, &descriptor_table_robot_5fcontroller_5fdescription_2eproto_once,
      file_level_metadata_robot_5fcontroller_5fdescription_2eproto[4]);
}
// ===================================================================

class Pose::_Internal {
 public:
  using HasBits = decltype(std::declval<Pose>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Pose, _impl_._has_bits_);
  static const ::abb::robot::Cartesian& position(const Pose* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::robot::Quaternion& rotation(const Pose* msg);
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::abb::robot::Cartesian& Pose::_Internal::position(const Pose* msg) {
  return *msg->_impl_.position_;
}
const ::abb::robot::Quaternion& Pose::_Internal::rotation(const Pose* msg) {
  return *msg->_impl_.rotation_;
}
Pose::Pose(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.robot.Pose)
}
inline PROTOBUF_NDEBUG_INLINE Pose::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Pose::Pose(
    ::google::protobuf::Arena* arena,
    const Pose& from)
    : ::google::protobuf::Message(arena) {
  Pose* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::abb::robot::Cartesian>(arena, *from._impl_.position_)
                : nullptr;
  _impl_.rotation_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::abb::robot::Quaternion>(arena, *from._impl_.rotation_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:abb.robot.Pose)
}
inline PROTOBUF_NDEBUG_INLINE Pose::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Pose::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_),
           0,
           offsetof(Impl_, rotation_) -
               offsetof(Impl_, position_) +
               sizeof(Impl_::rotation_));
}
Pose::~Pose() {
  // @@protoc_insertion_point(destructor:abb.robot.Pose)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Pose::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.position_;
  delete _impl_.rotation_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.Pose)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.rotation_ != nullptr);
      _impl_.rotation_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Pose::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> Pose::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Pose, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Pose_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional .abb.robot.Quaternion rotation = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Pose, _impl_.rotation_)}},
    // optional .abb.robot.Cartesian position = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Pose, _impl_.position_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .abb.robot.Cartesian position = 1;
    {PROTOBUF_FIELD_OFFSET(Pose, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.robot.Quaternion rotation = 2;
    {PROTOBUF_FIELD_OFFSET(Pose, _impl_.rotation_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::robot::Cartesian>()},
    {::_pbi::TcParser::GetTable<::abb::robot::Quaternion>()},
  }}, {{
  }},
};

::uint8_t* Pose::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.Pose)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .abb.robot.Cartesian position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // optional .abb.robot.Quaternion rotation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.Pose)
  return target;
}

::size_t Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.Pose)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .abb.robot.Cartesian position = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.position_);
    }

    // optional .abb.robot.Quaternion rotation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.rotation_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Pose::_class_data_ = {
    Pose::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Pose::GetClassData() const {
  return &_class_data_;
}

void Pose::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Pose*>(&to_msg);
  auto& from = static_cast<const Pose&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.Pose)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_position()->::abb::robot::Cartesian::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_rotation()->::abb::robot::Quaternion::MergeFrom(
          from._internal_rotation());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Pose::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Pose::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Pose::InternalSwap(Pose* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pose, _impl_.rotation_)
      + sizeof(Pose::_impl_.rotation_)
      - PROTOBUF_FIELD_OFFSET(Pose, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata Pose::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_5fcontroller_5fdescription_2eproto_getter, &descriptor_table_robot_5fcontroller_5fdescription_2eproto_once,
      file_level_metadata_robot_5fcontroller_5fdescription_2eproto[5]);
}
// ===================================================================

class RobotIndicators::_Internal {
 public:
  using HasBits = decltype(std::declval<RobotIndicators>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RobotIndicators, _impl_._has_bits_);
  static void set_has_irb14000(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RobotIndicators::RobotIndicators(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.robot.RobotIndicators)
}
RobotIndicators::RobotIndicators(
    ::google::protobuf::Arena* arena, const RobotIndicators& from)
    : RobotIndicators(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE RobotIndicators::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RobotIndicators::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.irb14000_ = {};
}
RobotIndicators::~RobotIndicators() {
  // @@protoc_insertion_point(destructor:abb.robot.RobotIndicators)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RobotIndicators::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RobotIndicators::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.RobotIndicators)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.irb14000_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RobotIndicators::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> RobotIndicators::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RobotIndicators, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_RobotIndicators_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional bool irb14000 = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RobotIndicators, _impl_.irb14000_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(RobotIndicators, _impl_.irb14000_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bool irb14000 = 1;
    {PROTOBUF_FIELD_OFFSET(RobotIndicators, _impl_.irb14000_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* RobotIndicators::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.RobotIndicators)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool irb14000 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_irb14000(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.RobotIndicators)
  return target;
}

::size_t RobotIndicators::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.RobotIndicators)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool irb14000 = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RobotIndicators::_class_data_ = {
    RobotIndicators::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RobotIndicators::GetClassData() const {
  return &_class_data_;
}

void RobotIndicators::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RobotIndicators*>(&to_msg);
  auto& from = static_cast<const RobotIndicators&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.RobotIndicators)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_irb14000(from._internal_irb14000());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RobotIndicators::CopyFrom(const RobotIndicators& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.RobotIndicators)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RobotIndicators::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RobotIndicators::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RobotIndicators::InternalSwap(RobotIndicators* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
        swap(_impl_.irb14000_, other->_impl_.irb14000_);
}

::google::protobuf::Metadata RobotIndicators::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_5fcontroller_5fdescription_2eproto_getter, &descriptor_table_robot_5fcontroller_5fdescription_2eproto_once,
      file_level_metadata_robot_5fcontroller_5fdescription_2eproto[6]);
}
// ===================================================================

class OptionIndicators::_Internal {
 public:
  using HasBits = decltype(std::declval<OptionIndicators>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(OptionIndicators, _impl_._has_bits_);
  static void set_has_egm(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_leadthrough(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_multimove(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

OptionIndicators::OptionIndicators(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.robot.OptionIndicators)
}
OptionIndicators::OptionIndicators(
    ::google::protobuf::Arena* arena, const OptionIndicators& from)
    : OptionIndicators(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE OptionIndicators::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void OptionIndicators::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, egm_),
           0,
           offsetof(Impl_, multimove_) -
               offsetof(Impl_, egm_) +
               sizeof(Impl_::multimove_));
}
OptionIndicators::~OptionIndicators() {
  // @@protoc_insertion_point(destructor:abb.robot.OptionIndicators)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void OptionIndicators::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void OptionIndicators::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.OptionIndicators)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.egm_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.multimove_) -
      reinterpret_cast<char*>(&_impl_.egm_)) + sizeof(_impl_.multimove_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* OptionIndicators::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> OptionIndicators::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(OptionIndicators, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_OptionIndicators_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional bool egm = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(OptionIndicators, _impl_.egm_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(OptionIndicators, _impl_.egm_)}},
    // optional bool leadthrough = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(OptionIndicators, _impl_.leadthrough_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(OptionIndicators, _impl_.leadthrough_)}},
    // optional bool multimove = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(OptionIndicators, _impl_.multimove_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(OptionIndicators, _impl_.multimove_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bool egm = 1;
    {PROTOBUF_FIELD_OFFSET(OptionIndicators, _impl_.egm_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool leadthrough = 2;
    {PROTOBUF_FIELD_OFFSET(OptionIndicators, _impl_.leadthrough_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool multimove = 3;
    {PROTOBUF_FIELD_OFFSET(OptionIndicators, _impl_.multimove_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* OptionIndicators::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.OptionIndicators)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool egm = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_egm(), target);
  }

  // optional bool leadthrough = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_leadthrough(), target);
  }

  // optional bool multimove = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_multimove(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.OptionIndicators)
  return target;
}

::size_t OptionIndicators::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.OptionIndicators)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool egm = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2;
    }

    // optional bool leadthrough = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

    // optional bool multimove = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData OptionIndicators::_class_data_ = {
    OptionIndicators::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* OptionIndicators::GetClassData() const {
  return &_class_data_;
}

void OptionIndicators::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<OptionIndicators*>(&to_msg);
  auto& from = static_cast<const OptionIndicators&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.OptionIndicators)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.egm_ = from._impl_.egm_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.leadthrough_ = from._impl_.leadthrough_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.multimove_ = from._impl_.multimove_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void OptionIndicators::CopyFrom(const OptionIndicators& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.OptionIndicators)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool OptionIndicators::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* OptionIndicators::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void OptionIndicators::InternalSwap(OptionIndicators* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OptionIndicators, _impl_.multimove_)
      + sizeof(OptionIndicators::_impl_.multimove_)
      - PROTOBUF_FIELD_OFFSET(OptionIndicators, _impl_.egm_)>(
          reinterpret_cast<char*>(&_impl_.egm_),
          reinterpret_cast<char*>(&other->_impl_.egm_));
}

::google::protobuf::Metadata OptionIndicators::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_5fcontroller_5fdescription_2eproto_getter, &descriptor_table_robot_5fcontroller_5fdescription_2eproto_once,
      file_level_metadata_robot_5fcontroller_5fdescription_2eproto[7]);
}
// ===================================================================

class AddInIndicators::_Internal {
 public:
  using HasBits = decltype(std::declval<AddInIndicators>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AddInIndicators, _impl_._has_bits_);
  static void set_has_smart_gripper(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state_machine_1_0(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_state_machine_1_1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AddInIndicators::AddInIndicators(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.robot.AddInIndicators)
}
AddInIndicators::AddInIndicators(
    ::google::protobuf::Arena* arena, const AddInIndicators& from)
    : AddInIndicators(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE AddInIndicators::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AddInIndicators::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, smart_gripper_),
           0,
           offsetof(Impl_, state_machine_1_1_) -
               offsetof(Impl_, smart_gripper_) +
               sizeof(Impl_::state_machine_1_1_));
}
AddInIndicators::~AddInIndicators() {
  // @@protoc_insertion_point(destructor:abb.robot.AddInIndicators)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AddInIndicators::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AddInIndicators::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.AddInIndicators)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.smart_gripper_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.state_machine_1_1_) -
      reinterpret_cast<char*>(&_impl_.smart_gripper_)) + sizeof(_impl_.state_machine_1_1_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AddInIndicators::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> AddInIndicators::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AddInIndicators, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AddInIndicators_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional bool smart_gripper = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AddInIndicators, _impl_.smart_gripper_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(AddInIndicators, _impl_.smart_gripper_)}},
    // optional bool state_machine_1_0 = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AddInIndicators, _impl_.state_machine_1_0_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(AddInIndicators, _impl_.state_machine_1_0_)}},
    // optional bool state_machine_1_1 = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AddInIndicators, _impl_.state_machine_1_1_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(AddInIndicators, _impl_.state_machine_1_1_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bool smart_gripper = 1;
    {PROTOBUF_FIELD_OFFSET(AddInIndicators, _impl_.smart_gripper_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool state_machine_1_0 = 2;
    {PROTOBUF_FIELD_OFFSET(AddInIndicators, _impl_.state_machine_1_0_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool state_machine_1_1 = 3;
    {PROTOBUF_FIELD_OFFSET(AddInIndicators, _impl_.state_machine_1_1_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* AddInIndicators::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.AddInIndicators)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool smart_gripper = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_smart_gripper(), target);
  }

  // optional bool state_machine_1_0 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_state_machine_1_0(), target);
  }

  // optional bool state_machine_1_1 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_state_machine_1_1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.AddInIndicators)
  return target;
}

::size_t AddInIndicators::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.AddInIndicators)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool smart_gripper = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2;
    }

    // optional bool state_machine_1_0 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

    // optional bool state_machine_1_1 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AddInIndicators::_class_data_ = {
    AddInIndicators::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AddInIndicators::GetClassData() const {
  return &_class_data_;
}

void AddInIndicators::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AddInIndicators*>(&to_msg);
  auto& from = static_cast<const AddInIndicators&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.AddInIndicators)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.smart_gripper_ = from._impl_.smart_gripper_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.state_machine_1_0_ = from._impl_.state_machine_1_0_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.state_machine_1_1_ = from._impl_.state_machine_1_1_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AddInIndicators::CopyFrom(const AddInIndicators& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.AddInIndicators)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AddInIndicators::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AddInIndicators::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AddInIndicators::InternalSwap(AddInIndicators* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddInIndicators, _impl_.state_machine_1_1_)
      + sizeof(AddInIndicators::_impl_.state_machine_1_1_)
      - PROTOBUF_FIELD_OFFSET(AddInIndicators, _impl_.smart_gripper_)>(
          reinterpret_cast<char*>(&_impl_.smart_gripper_),
          reinterpret_cast<char*>(&other->_impl_.smart_gripper_));
}

::google::protobuf::Metadata AddInIndicators::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_5fcontroller_5fdescription_2eproto_getter, &descriptor_table_robot_5fcontroller_5fdescription_2eproto_once,
      file_level_metadata_robot_5fcontroller_5fdescription_2eproto[8]);
}
// ===================================================================

class SystemIndicators::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemIndicators>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SystemIndicators, _impl_._has_bits_);
  static const ::abb::robot::RobotIndicators& robots(const SystemIndicators* msg);
  static void set_has_robots(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::robot::OptionIndicators& options(const SystemIndicators* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::abb::robot::AddInIndicators& addins(const SystemIndicators* msg);
  static void set_has_addins(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::abb::robot::RobotIndicators& SystemIndicators::_Internal::robots(const SystemIndicators* msg) {
  return *msg->_impl_.robots_;
}
const ::abb::robot::OptionIndicators& SystemIndicators::_Internal::options(const SystemIndicators* msg) {
  return *msg->_impl_.options_;
}
const ::abb::robot::AddInIndicators& SystemIndicators::_Internal::addins(const SystemIndicators* msg) {
  return *msg->_impl_.addins_;
}
SystemIndicators::SystemIndicators(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.robot.SystemIndicators)
}
inline PROTOBUF_NDEBUG_INLINE SystemIndicators::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SystemIndicators::SystemIndicators(
    ::google::protobuf::Arena* arena,
    const SystemIndicators& from)
    : ::google::protobuf::Message(arena) {
  SystemIndicators* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.robots_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::abb::robot::RobotIndicators>(arena, *from._impl_.robots_)
                : nullptr;
  _impl_.options_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::abb::robot::OptionIndicators>(arena, *from._impl_.options_)
                : nullptr;
  _impl_.addins_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::abb::robot::AddInIndicators>(arena, *from._impl_.addins_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:abb.robot.SystemIndicators)
}
inline PROTOBUF_NDEBUG_INLINE SystemIndicators::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SystemIndicators::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, robots_),
           0,
           offsetof(Impl_, addins_) -
               offsetof(Impl_, robots_) +
               sizeof(Impl_::addins_));
}
SystemIndicators::~SystemIndicators() {
  // @@protoc_insertion_point(destructor:abb.robot.SystemIndicators)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SystemIndicators::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.robots_;
  delete _impl_.options_;
  delete _impl_.addins_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SystemIndicators::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.SystemIndicators)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.robots_ != nullptr);
      _impl_.robots_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.options_ != nullptr);
      _impl_.options_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.addins_ != nullptr);
      _impl_.addins_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SystemIndicators::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> SystemIndicators::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SystemIndicators, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SystemIndicators_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .abb.robot.RobotIndicators robots = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SystemIndicators, _impl_.robots_)}},
    // optional .abb.robot.OptionIndicators options = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SystemIndicators, _impl_.options_)}},
    // optional .abb.robot.AddInIndicators addins = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(SystemIndicators, _impl_.addins_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .abb.robot.RobotIndicators robots = 1;
    {PROTOBUF_FIELD_OFFSET(SystemIndicators, _impl_.robots_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.robot.OptionIndicators options = 2;
    {PROTOBUF_FIELD_OFFSET(SystemIndicators, _impl_.options_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.robot.AddInIndicators addins = 3;
    {PROTOBUF_FIELD_OFFSET(SystemIndicators, _impl_.addins_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::robot::RobotIndicators>()},
    {::_pbi::TcParser::GetTable<::abb::robot::OptionIndicators>()},
    {::_pbi::TcParser::GetTable<::abb::robot::AddInIndicators>()},
  }}, {{
  }},
};

::uint8_t* SystemIndicators::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.SystemIndicators)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .abb.robot.RobotIndicators robots = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::robots(this),
        _Internal::robots(this).GetCachedSize(), target, stream);
  }

  // optional .abb.robot.OptionIndicators options = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::options(this),
        _Internal::options(this).GetCachedSize(), target, stream);
  }

  // optional .abb.robot.AddInIndicators addins = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::addins(this),
        _Internal::addins(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.SystemIndicators)
  return target;
}

::size_t SystemIndicators::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.SystemIndicators)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .abb.robot.RobotIndicators robots = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.robots_);
    }

    // optional .abb.robot.OptionIndicators options = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.options_);
    }

    // optional .abb.robot.AddInIndicators addins = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.addins_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SystemIndicators::_class_data_ = {
    SystemIndicators::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SystemIndicators::GetClassData() const {
  return &_class_data_;
}

void SystemIndicators::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SystemIndicators*>(&to_msg);
  auto& from = static_cast<const SystemIndicators&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.SystemIndicators)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_robots()->::abb::robot::RobotIndicators::MergeFrom(
          from._internal_robots());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_options()->::abb::robot::OptionIndicators::MergeFrom(
          from._internal_options());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_addins()->::abb::robot::AddInIndicators::MergeFrom(
          from._internal_addins());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SystemIndicators::CopyFrom(const SystemIndicators& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.SystemIndicators)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SystemIndicators::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SystemIndicators::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SystemIndicators::InternalSwap(SystemIndicators* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SystemIndicators, _impl_.addins_)
      + sizeof(SystemIndicators::_impl_.addins_)
      - PROTOBUF_FIELD_OFFSET(SystemIndicators, _impl_.robots_)>(
          reinterpret_cast<char*>(&_impl_.robots_),
          reinterpret_cast<char*>(&other->_impl_.robots_));
}

::google::protobuf::Metadata SystemIndicators::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_5fcontroller_5fdescription_2eproto_getter, &descriptor_table_robot_5fcontroller_5fdescription_2eproto_once,
      file_level_metadata_robot_5fcontroller_5fdescription_2eproto[9]);
}
// ===================================================================

class Transmission::_Internal {
 public:
  using HasBits = decltype(std::declval<Transmission>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Transmission, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rotating_move(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Transmission::Transmission(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.robot.Transmission)
}
inline PROTOBUF_NDEBUG_INLINE Transmission::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_) {}

Transmission::Transmission(
    ::google::protobuf::Arena* arena,
    const Transmission& from)
    : ::google::protobuf::Message(arena) {
  Transmission* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.rotating_move_ = from._impl_.rotating_move_;

  // @@protoc_insertion_point(copy_constructor:abb.robot.Transmission)
}
inline PROTOBUF_NDEBUG_INLINE Transmission::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        name_(arena) {}

inline void Transmission::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rotating_move_ = {};
}
Transmission::~Transmission() {
  // @@protoc_insertion_point(destructor:abb.robot.Transmission)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Transmission::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Transmission::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.Transmission)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.rotating_move_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Transmission::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 35, 2> Transmission::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Transmission, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Transmission_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional bool rotating_move = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Transmission, _impl_.rotating_move_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(Transmission, _impl_.rotating_move_)}},
    // optional string name = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Transmission, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string name = 1;
    {PROTOBUF_FIELD_OFFSET(Transmission, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional bool rotating_move = 2;
    {PROTOBUF_FIELD_OFFSET(Transmission, _impl_.rotating_move_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\26\4\0\0\0\0\0\0"
    "abb.robot.Transmission"
    "name"
  }},
};

::uint8_t* Transmission::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.Transmission)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "abb.robot.Transmission.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional bool rotating_move = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_rotating_move(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.Transmission)
  return target;
}

::size_t Transmission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.Transmission)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional bool rotating_move = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Transmission::_class_data_ = {
    Transmission::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Transmission::GetClassData() const {
  return &_class_data_;
}

void Transmission::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Transmission*>(&to_msg);
  auto& from = static_cast<const Transmission&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.Transmission)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.rotating_move_ = from._impl_.rotating_move_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Transmission::CopyFrom(const Transmission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.Transmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Transmission::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Transmission::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Transmission::InternalSwap(Transmission* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
        swap(_impl_.rotating_move_, other->_impl_.rotating_move_);
}

::google::protobuf::Metadata Transmission::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_5fcontroller_5fdescription_2eproto_getter, &descriptor_table_robot_5fcontroller_5fdescription_2eproto_once,
      file_level_metadata_robot_5fcontroller_5fdescription_2eproto[10]);
}
// ===================================================================

class Arm::_Internal {
 public:
  using HasBits = decltype(std::declval<Arm>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Arm, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lower_joint_bound(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_upper_joint_bound(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Arm::Arm(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.robot.Arm)
}
inline PROTOBUF_NDEBUG_INLINE Arm::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_) {}

Arm::Arm(
    ::google::protobuf::Arena* arena,
    const Arm& from)
    : ::google::protobuf::Message(arena) {
  Arm* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, lower_joint_bound_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, lower_joint_bound_),
           offsetof(Impl_, upper_joint_bound_) -
               offsetof(Impl_, lower_joint_bound_) +
               sizeof(Impl_::upper_joint_bound_));

  // @@protoc_insertion_point(copy_constructor:abb.robot.Arm)
}
inline PROTOBUF_NDEBUG_INLINE Arm::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        name_(arena) {}

inline void Arm::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, lower_joint_bound_),
           0,
           offsetof(Impl_, upper_joint_bound_) -
               offsetof(Impl_, lower_joint_bound_) +
               sizeof(Impl_::upper_joint_bound_));
}
Arm::~Arm() {
  // @@protoc_insertion_point(destructor:abb.robot.Arm)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Arm::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Arm::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.Arm)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.lower_joint_bound_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.upper_joint_bound_) -
        reinterpret_cast<char*>(&_impl_.lower_joint_bound_)) + sizeof(_impl_.upper_joint_bound_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Arm::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 26, 2> Arm::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Arm, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Arm_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string name = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Arm, _impl_.name_)}},
    // optional double lower_joint_bound = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 1, 0, PROTOBUF_FIELD_OFFSET(Arm, _impl_.lower_joint_bound_)}},
    // optional double upper_joint_bound = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 2, 0, PROTOBUF_FIELD_OFFSET(Arm, _impl_.upper_joint_bound_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string name = 1;
    {PROTOBUF_FIELD_OFFSET(Arm, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional double lower_joint_bound = 2;
    {PROTOBUF_FIELD_OFFSET(Arm, _impl_.lower_joint_bound_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double upper_joint_bound = 3;
    {PROTOBUF_FIELD_OFFSET(Arm, _impl_.upper_joint_bound_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
    "\15\4\0\0\0\0\0\0"
    "abb.robot.Arm"
    "name"
  }},
};

::uint8_t* Arm::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.Arm)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "abb.robot.Arm.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional double lower_joint_bound = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_lower_joint_bound(), target);
  }

  // optional double upper_joint_bound = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_upper_joint_bound(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.Arm)
  return target;
}

::size_t Arm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.Arm)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional double lower_joint_bound = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

    // optional double upper_joint_bound = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Arm::_class_data_ = {
    Arm::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Arm::GetClassData() const {
  return &_class_data_;
}

void Arm::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Arm*>(&to_msg);
  auto& from = static_cast<const Arm&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.Arm)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.lower_joint_bound_ = from._impl_.lower_joint_bound_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.upper_joint_bound_ = from._impl_.upper_joint_bound_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Arm::CopyFrom(const Arm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.Arm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Arm::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Arm::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Arm::InternalSwap(Arm* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Arm, _impl_.upper_joint_bound_)
      + sizeof(Arm::_impl_.upper_joint_bound_)
      - PROTOBUF_FIELD_OFFSET(Arm, _impl_.lower_joint_bound_)>(
          reinterpret_cast<char*>(&_impl_.lower_joint_bound_),
          reinterpret_cast<char*>(&other->_impl_.lower_joint_bound_));
}

::google::protobuf::Metadata Arm::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_5fcontroller_5fdescription_2eproto_getter, &descriptor_table_robot_5fcontroller_5fdescription_2eproto_once,
      file_level_metadata_robot_5fcontroller_5fdescription_2eproto[11]);
}
// ===================================================================

class Joint::_Internal {
 public:
  using HasBits = decltype(std::declval<Joint>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Joint, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_logical_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_kinematic_axis_number(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::abb::robot::Arm& arm(const Joint* msg);
  static void set_has_arm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::abb::robot::Transmission& transmission(const Joint* msg);
  static void set_has_transmission(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::abb::robot::Arm& Joint::_Internal::arm(const Joint* msg) {
  return *msg->_impl_.arm_;
}
const ::abb::robot::Transmission& Joint::_Internal::transmission(const Joint* msg) {
  return *msg->_impl_.transmission_;
}
Joint::Joint(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.robot.Joint)
}
inline PROTOBUF_NDEBUG_INLINE Joint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_) {}

Joint::Joint(
    ::google::protobuf::Arena* arena,
    const Joint& from)
    : ::google::protobuf::Message(arena) {
  Joint* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.arm_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::abb::robot::Arm>(arena, *from._impl_.arm_)
                : nullptr;
  _impl_.transmission_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::abb::robot::Transmission>(arena, *from._impl_.transmission_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, logical_axis_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, logical_axis_),
           offsetof(Impl_, kinematic_axis_number_) -
               offsetof(Impl_, logical_axis_) +
               sizeof(Impl_::kinematic_axis_number_));

  // @@protoc_insertion_point(copy_constructor:abb.robot.Joint)
}
inline PROTOBUF_NDEBUG_INLINE Joint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        name_(arena) {}

inline void Joint::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, arm_),
           0,
           offsetof(Impl_, kinematic_axis_number_) -
               offsetof(Impl_, arm_) +
               sizeof(Impl_::kinematic_axis_number_));
}
Joint::~Joint() {
  // @@protoc_insertion_point(destructor:abb.robot.Joint)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Joint::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  delete _impl_.arm_;
  delete _impl_.transmission_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Joint::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.Joint)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.arm_ != nullptr);
      _impl_.arm_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.transmission_ != nullptr);
      _impl_.transmission_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.logical_axis_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.kinematic_axis_number_) -
        reinterpret_cast<char*>(&_impl_.logical_axis_)) + sizeof(_impl_.kinematic_axis_number_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Joint::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 2, 28, 2> Joint::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Joint, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Joint_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string name = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Joint, _impl_.name_)}},
    // optional int32 logical_axis = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Joint, _impl_.logical_axis_), 3>(),
     {16, 3, 0, PROTOBUF_FIELD_OFFSET(Joint, _impl_.logical_axis_)}},
    // optional int32 kinematic_axis_number = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Joint, _impl_.kinematic_axis_number_), 4>(),
     {24, 4, 0, PROTOBUF_FIELD_OFFSET(Joint, _impl_.kinematic_axis_number_)}},
    // optional .abb.robot.Arm arm = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 0, PROTOBUF_FIELD_OFFSET(Joint, _impl_.arm_)}},
    // optional .abb.robot.Transmission transmission = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 1, PROTOBUF_FIELD_OFFSET(Joint, _impl_.transmission_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string name = 1;
    {PROTOBUF_FIELD_OFFSET(Joint, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional int32 logical_axis = 2;
    {PROTOBUF_FIELD_OFFSET(Joint, _impl_.logical_axis_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 kinematic_axis_number = 3;
    {PROTOBUF_FIELD_OFFSET(Joint, _impl_.kinematic_axis_number_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional .abb.robot.Arm arm = 4;
    {PROTOBUF_FIELD_OFFSET(Joint, _impl_.arm_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.robot.Transmission transmission = 5;
    {PROTOBUF_FIELD_OFFSET(Joint, _impl_.transmission_), _Internal::kHasBitsOffset + 2, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::robot::Arm>()},
    {::_pbi::TcParser::GetTable<::abb::robot::Transmission>()},
  }}, {{
    "\17\4\0\0\0\0\0\0"
    "abb.robot.Joint"
    "name"
  }},
};

::uint8_t* Joint::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.Joint)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "abb.robot.Joint.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional int32 logical_axis = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_logical_axis(), target);
  }

  // optional int32 kinematic_axis_number = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_kinematic_axis_number(), target);
  }

  // optional .abb.robot.Arm arm = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::arm(this),
        _Internal::arm(this).GetCachedSize(), target, stream);
  }

  // optional .abb.robot.Transmission transmission = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::transmission(this),
        _Internal::transmission(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.Joint)
  return target;
}

::size_t Joint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.Joint)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional .abb.robot.Arm arm = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.arm_);
    }

    // optional .abb.robot.Transmission transmission = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.transmission_);
    }

    // optional int32 logical_axis = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_logical_axis());
    }

    // optional int32 kinematic_axis_number = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_kinematic_axis_number());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Joint::_class_data_ = {
    Joint::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Joint::GetClassData() const {
  return &_class_data_;
}

void Joint::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Joint*>(&to_msg);
  auto& from = static_cast<const Joint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.Joint)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_arm()->::abb::robot::Arm::MergeFrom(
          from._internal_arm());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_transmission()->::abb::robot::Transmission::MergeFrom(
          from._internal_transmission());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.logical_axis_ = from._impl_.logical_axis_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.kinematic_axis_number_ = from._impl_.kinematic_axis_number_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Joint::CopyFrom(const Joint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.Joint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Joint::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Joint::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Joint::InternalSwap(Joint* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Joint, _impl_.kinematic_axis_number_)
      + sizeof(Joint::_impl_.kinematic_axis_number_)
      - PROTOBUF_FIELD_OFFSET(Joint, _impl_.arm_)>(
          reinterpret_cast<char*>(&_impl_.arm_),
          reinterpret_cast<char*>(&other->_impl_.arm_));
}

::google::protobuf::Metadata Joint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_5fcontroller_5fdescription_2eproto_getter, &descriptor_table_robot_5fcontroller_5fdescription_2eproto_once,
      file_level_metadata_robot_5fcontroller_5fdescription_2eproto[12]);
}
// ===================================================================

class StandardizedJoint::_Internal {
 public:
  using HasBits = decltype(std::declval<StandardizedJoint>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StandardizedJoint, _impl_._has_bits_);
  static void set_has_original_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_standardized_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rotating_move(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_lower_joint_bound(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_upper_joint_bound(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

StandardizedJoint::StandardizedJoint(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.robot.StandardizedJoint)
}
inline PROTOBUF_NDEBUG_INLINE StandardizedJoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        original_name_(arena, from.original_name_),
        standardized_name_(arena, from.standardized_name_) {}

StandardizedJoint::StandardizedJoint(
    ::google::protobuf::Arena* arena,
    const StandardizedJoint& from)
    : ::google::protobuf::Message(arena) {
  StandardizedJoint* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, lower_joint_bound_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, lower_joint_bound_),
           offsetof(Impl_, rotating_move_) -
               offsetof(Impl_, lower_joint_bound_) +
               sizeof(Impl_::rotating_move_));

  // @@protoc_insertion_point(copy_constructor:abb.robot.StandardizedJoint)
}
inline PROTOBUF_NDEBUG_INLINE StandardizedJoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        original_name_(arena),
        standardized_name_(arena) {}

inline void StandardizedJoint::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, lower_joint_bound_),
           0,
           offsetof(Impl_, rotating_move_) -
               offsetof(Impl_, lower_joint_bound_) +
               sizeof(Impl_::rotating_move_));
}
StandardizedJoint::~StandardizedJoint() {
  // @@protoc_insertion_point(destructor:abb.robot.StandardizedJoint)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void StandardizedJoint::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.original_name_.Destroy();
  _impl_.standardized_name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void StandardizedJoint::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.StandardizedJoint)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.original_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.standardized_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.lower_joint_bound_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.rotating_move_) -
        reinterpret_cast<char*>(&_impl_.lower_joint_bound_)) + sizeof(_impl_.rotating_move_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* StandardizedJoint::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 66, 2> StandardizedJoint::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StandardizedJoint, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_StandardizedJoint_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string original_name = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(StandardizedJoint, _impl_.original_name_)}},
    // optional string standardized_name = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(StandardizedJoint, _impl_.standardized_name_)}},
    // optional bool rotating_move = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(StandardizedJoint, _impl_.rotating_move_), 4>(),
     {24, 4, 0, PROTOBUF_FIELD_OFFSET(StandardizedJoint, _impl_.rotating_move_)}},
    // optional double lower_joint_bound = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 2, 0, PROTOBUF_FIELD_OFFSET(StandardizedJoint, _impl_.lower_joint_bound_)}},
    // optional double upper_joint_bound = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 3, 0, PROTOBUF_FIELD_OFFSET(StandardizedJoint, _impl_.upper_joint_bound_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string original_name = 1;
    {PROTOBUF_FIELD_OFFSET(StandardizedJoint, _impl_.original_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string standardized_name = 2;
    {PROTOBUF_FIELD_OFFSET(StandardizedJoint, _impl_.standardized_name_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional bool rotating_move = 3;
    {PROTOBUF_FIELD_OFFSET(StandardizedJoint, _impl_.rotating_move_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional double lower_joint_bound = 4;
    {PROTOBUF_FIELD_OFFSET(StandardizedJoint, _impl_.lower_joint_bound_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double upper_joint_bound = 5;
    {PROTOBUF_FIELD_OFFSET(StandardizedJoint, _impl_.upper_joint_bound_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
    "\33\15\21\0\0\0\0\0"
    "abb.robot.StandardizedJoint"
    "original_name"
    "standardized_name"
  }},
};

::uint8_t* StandardizedJoint::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.StandardizedJoint)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string original_name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_original_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "abb.robot.StandardizedJoint.original_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string standardized_name = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_standardized_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "abb.robot.StandardizedJoint.standardized_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional bool rotating_move = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_rotating_move(), target);
  }

  // optional double lower_joint_bound = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_lower_joint_bound(), target);
  }

  // optional double upper_joint_bound = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_upper_joint_bound(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.StandardizedJoint)
  return target;
}

::size_t StandardizedJoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.StandardizedJoint)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string original_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_original_name());
    }

    // optional string standardized_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_standardized_name());
    }

    // optional double lower_joint_bound = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }

    // optional double upper_joint_bound = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 9;
    }

    // optional bool rotating_move = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData StandardizedJoint::_class_data_ = {
    StandardizedJoint::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* StandardizedJoint::GetClassData() const {
  return &_class_data_;
}

void StandardizedJoint::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<StandardizedJoint*>(&to_msg);
  auto& from = static_cast<const StandardizedJoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.StandardizedJoint)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_original_name(from._internal_original_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_standardized_name(from._internal_standardized_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.lower_joint_bound_ = from._impl_.lower_joint_bound_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.upper_joint_bound_ = from._impl_.upper_joint_bound_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.rotating_move_ = from._impl_.rotating_move_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StandardizedJoint::CopyFrom(const StandardizedJoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.StandardizedJoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool StandardizedJoint::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* StandardizedJoint::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void StandardizedJoint::InternalSwap(StandardizedJoint* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.original_name_, &other->_impl_.original_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.standardized_name_, &other->_impl_.standardized_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StandardizedJoint, _impl_.rotating_move_)
      + sizeof(StandardizedJoint::_impl_.rotating_move_)
      - PROTOBUF_FIELD_OFFSET(StandardizedJoint, _impl_.lower_joint_bound_)>(
          reinterpret_cast<char*>(&_impl_.lower_joint_bound_),
          reinterpret_cast<char*>(&other->_impl_.lower_joint_bound_));
}

::google::protobuf::Metadata StandardizedJoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_5fcontroller_5fdescription_2eproto_getter, &descriptor_table_robot_5fcontroller_5fdescription_2eproto_once,
      file_level_metadata_robot_5fcontroller_5fdescription_2eproto[13]);
}
// ===================================================================

class Single::_Internal {
 public:
  using HasBits = decltype(std::declval<Single>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Single, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::abb::robot::Joint& joint(const Single* msg);
  static void set_has_joint(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::abb::robot::Pose& base_frame(const Single* msg);
  static void set_has_base_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_base_frame_moved_by(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::abb::robot::Joint& Single::_Internal::joint(const Single* msg) {
  return *msg->_impl_.joint_;
}
const ::abb::robot::Pose& Single::_Internal::base_frame(const Single* msg) {
  return *msg->_impl_.base_frame_;
}
Single::Single(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.robot.Single)
}
inline PROTOBUF_NDEBUG_INLINE Single::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_),
        type_(arena, from.type_),
        base_frame_moved_by_(arena, from.base_frame_moved_by_) {}

Single::Single(
    ::google::protobuf::Arena* arena,
    const Single& from)
    : ::google::protobuf::Message(arena) {
  Single* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.joint_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::abb::robot::Joint>(arena, *from._impl_.joint_)
                : nullptr;
  _impl_.base_frame_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::abb::robot::Pose>(arena, *from._impl_.base_frame_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:abb.robot.Single)
}
inline PROTOBUF_NDEBUG_INLINE Single::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        name_(arena),
        type_(arena),
        base_frame_moved_by_(arena) {}

inline void Single::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, joint_),
           0,
           offsetof(Impl_, base_frame_) -
               offsetof(Impl_, joint_) +
               sizeof(Impl_::base_frame_));
}
Single::~Single() {
  // @@protoc_insertion_point(destructor:abb.robot.Single)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Single::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.type_.Destroy();
  _impl_.base_frame_moved_by_.Destroy();
  delete _impl_.joint_;
  delete _impl_.base_frame_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Single::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.Single)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.base_frame_moved_by_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.joint_ != nullptr);
      _impl_.joint_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.base_frame_ != nullptr);
      _impl_.base_frame_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Single::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 2, 52, 2> Single::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Single, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Single_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string name = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Single, _impl_.name_)}},
    // optional string type = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(Single, _impl_.type_)}},
    // optional .abb.robot.Joint joint = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 3, 0, PROTOBUF_FIELD_OFFSET(Single, _impl_.joint_)}},
    // optional .abb.robot.Pose base_frame = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 4, 1, PROTOBUF_FIELD_OFFSET(Single, _impl_.base_frame_)}},
    // optional string base_frame_moved_by = 5;
    {::_pbi::TcParser::FastSS1,
     {42, 2, 0, PROTOBUF_FIELD_OFFSET(Single, _impl_.base_frame_moved_by_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string name = 1;
    {PROTOBUF_FIELD_OFFSET(Single, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string type = 2;
    {PROTOBUF_FIELD_OFFSET(Single, _impl_.type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional .abb.robot.Joint joint = 3;
    {PROTOBUF_FIELD_OFFSET(Single, _impl_.joint_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.robot.Pose base_frame = 4;
    {PROTOBUF_FIELD_OFFSET(Single, _impl_.base_frame_), _Internal::kHasBitsOffset + 4, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional string base_frame_moved_by = 5;
    {PROTOBUF_FIELD_OFFSET(Single, _impl_.base_frame_moved_by_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::robot::Joint>()},
    {::_pbi::TcParser::GetTable<::abb::robot::Pose>()},
  }}, {{
    "\20\4\4\0\0\23\0\0"
    "abb.robot.Single"
    "name"
    "type"
    "base_frame_moved_by"
  }},
};

::uint8_t* Single::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.Single)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "abb.robot.Single.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_type();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "abb.robot.Single.type");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional .abb.robot.Joint joint = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::joint(this),
        _Internal::joint(this).GetCachedSize(), target, stream);
  }

  // optional .abb.robot.Pose base_frame = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::base_frame(this),
        _Internal::base_frame(this).GetCachedSize(), target, stream);
  }

  // optional string base_frame_moved_by = 5;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_base_frame_moved_by();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "abb.robot.Single.base_frame_moved_by");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.Single)
  return target;
}

::size_t Single::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.Single)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional string type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_type());
    }

    // optional string base_frame_moved_by = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_base_frame_moved_by());
    }

    // optional .abb.robot.Joint joint = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.joint_);
    }

    // optional .abb.robot.Pose base_frame = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.base_frame_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Single::_class_data_ = {
    Single::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Single::GetClassData() const {
  return &_class_data_;
}

void Single::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Single*>(&to_msg);
  auto& from = static_cast<const Single&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.Single)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_base_frame_moved_by(from._internal_base_frame_moved_by());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_joint()->::abb::robot::Joint::MergeFrom(
          from._internal_joint());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_base_frame()->::abb::robot::Pose::MergeFrom(
          from._internal_base_frame());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Single::CopyFrom(const Single& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.Single)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Single::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Single::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Single::InternalSwap(Single* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, &other->_impl_.type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.base_frame_moved_by_, &other->_impl_.base_frame_moved_by_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Single, _impl_.base_frame_)
      + sizeof(Single::_impl_.base_frame_)
      - PROTOBUF_FIELD_OFFSET(Single, _impl_.joint_)>(
          reinterpret_cast<char*>(&_impl_.joint_),
          reinterpret_cast<char*>(&other->_impl_.joint_));
}

::google::protobuf::Metadata Single::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_5fcontroller_5fdescription_2eproto_getter, &descriptor_table_robot_5fcontroller_5fdescription_2eproto_once,
      file_level_metadata_robot_5fcontroller_5fdescription_2eproto[14]);
}
// ===================================================================

class Robot::_Internal {
 public:
  using HasBits = decltype(std::declval<Robot>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Robot, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::abb::robot::Pose& base_frame(const Robot* msg);
  static void set_has_base_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_base_frame_moved_by(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::abb::robot::Pose& Robot::_Internal::base_frame(const Robot* msg) {
  return *msg->_impl_.base_frame_;
}
Robot::Robot(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.robot.Robot)
}
inline PROTOBUF_NDEBUG_INLINE Robot::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        joints_{visibility, arena, from.joints_},
        name_(arena, from.name_),
        type_(arena, from.type_),
        base_frame_moved_by_(arena, from.base_frame_moved_by_) {}

Robot::Robot(
    ::google::protobuf::Arena* arena,
    const Robot& from)
    : ::google::protobuf::Message(arena) {
  Robot* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.base_frame_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::abb::robot::Pose>(arena, *from._impl_.base_frame_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:abb.robot.Robot)
}
inline PROTOBUF_NDEBUG_INLINE Robot::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        joints_{visibility, arena},
        name_(arena),
        type_(arena),
        base_frame_moved_by_(arena) {}

inline void Robot::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.base_frame_ = {};
}
Robot::~Robot() {
  // @@protoc_insertion_point(destructor:abb.robot.Robot)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Robot::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.type_.Destroy();
  _impl_.base_frame_moved_by_.Destroy();
  delete _impl_.base_frame_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Robot::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.Robot)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.joints_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.base_frame_moved_by_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.base_frame_ != nullptr);
      _impl_.base_frame_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Robot::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 2, 51, 2> Robot::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Robot, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Robot_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string name = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Robot, _impl_.name_)}},
    // optional string type = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(Robot, _impl_.type_)}},
    // repeated .abb.robot.Joint joints = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Robot, _impl_.joints_)}},
    // optional .abb.robot.Pose base_frame = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 1, PROTOBUF_FIELD_OFFSET(Robot, _impl_.base_frame_)}},
    // optional string base_frame_moved_by = 5;
    {::_pbi::TcParser::FastSS1,
     {42, 2, 0, PROTOBUF_FIELD_OFFSET(Robot, _impl_.base_frame_moved_by_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string name = 1;
    {PROTOBUF_FIELD_OFFSET(Robot, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string type = 2;
    {PROTOBUF_FIELD_OFFSET(Robot, _impl_.type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // repeated .abb.robot.Joint joints = 3;
    {PROTOBUF_FIELD_OFFSET(Robot, _impl_.joints_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.robot.Pose base_frame = 4;
    {PROTOBUF_FIELD_OFFSET(Robot, _impl_.base_frame_), _Internal::kHasBitsOffset + 3, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional string base_frame_moved_by = 5;
    {PROTOBUF_FIELD_OFFSET(Robot, _impl_.base_frame_moved_by_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::robot::Joint>()},
    {::_pbi::TcParser::GetTable<::abb::robot::Pose>()},
  }}, {{
    "\17\4\4\0\0\23\0\0"
    "abb.robot.Robot"
    "name"
    "type"
    "base_frame_moved_by"
  }},
};

::uint8_t* Robot::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.Robot)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "abb.robot.Robot.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_type();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "abb.robot.Robot.type");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .abb.robot.Joint joints = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_joints_size()); i < n; i++) {
    const auto& repfield = this->_internal_joints().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .abb.robot.Pose base_frame = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::base_frame(this),
        _Internal::base_frame(this).GetCachedSize(), target, stream);
  }

  // optional string base_frame_moved_by = 5;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_base_frame_moved_by();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "abb.robot.Robot.base_frame_moved_by");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.Robot)
  return target;
}

::size_t Robot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.Robot)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .abb.robot.Joint joints = 3;
  total_size += 1UL * this->_internal_joints_size();
  for (const auto& msg : this->_internal_joints()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional string type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_type());
    }

    // optional string base_frame_moved_by = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_base_frame_moved_by());
    }

    // optional .abb.robot.Pose base_frame = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.base_frame_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Robot::_class_data_ = {
    Robot::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Robot::GetClassData() const {
  return &_class_data_;
}

void Robot::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Robot*>(&to_msg);
  auto& from = static_cast<const Robot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.Robot)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_joints()->MergeFrom(
      from._internal_joints());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_base_frame_moved_by(from._internal_base_frame_moved_by());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_base_frame()->::abb::robot::Pose::MergeFrom(
          from._internal_base_frame());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Robot::CopyFrom(const Robot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Robot::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Robot::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Robot::InternalSwap(Robot* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.joints_.InternalSwap(&other->_impl_.joints_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, &other->_impl_.type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.base_frame_moved_by_, &other->_impl_.base_frame_moved_by_, arena);
  swap(_impl_.base_frame_, other->_impl_.base_frame_);
}

::google::protobuf::Metadata Robot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_5fcontroller_5fdescription_2eproto_getter, &descriptor_table_robot_5fcontroller_5fdescription_2eproto_once,
      file_level_metadata_robot_5fcontroller_5fdescription_2eproto[15]);
}
// ===================================================================

class MechanicalUnit::_Internal {
 public:
  using HasBits = decltype(std::declval<MechanicalUnit>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MechanicalUnit, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::robot::Robot& robot(const MechanicalUnit* msg);
  static void set_has_robot(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_task_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_axes(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_axes_total(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_is_integrated_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_has_integrated_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::abb::robot::Robot& MechanicalUnit::_Internal::robot(const MechanicalUnit* msg) {
  return *msg->_impl_.robot_;
}
MechanicalUnit::MechanicalUnit(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.robot.MechanicalUnit)
}
inline PROTOBUF_NDEBUG_INLINE MechanicalUnit::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        singles_{visibility, arena, from.singles_},
        standardized_joints_{visibility, arena, from.standardized_joints_},
        name_(arena, from.name_),
        task_name_(arena, from.task_name_),
        is_integrated_unit_(arena, from.is_integrated_unit_),
        has_integrated_unit_(arena, from.has_integrated_unit_),
        status_(arena, from.status_) {}

MechanicalUnit::MechanicalUnit(
    ::google::protobuf::Arena* arena,
    const MechanicalUnit& from)
    : ::google::protobuf::Message(arena) {
  MechanicalUnit* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.robot_ = (cached_has_bits & 0x00000020u)
                ? CreateMaybeMessage<::abb::robot::Robot>(arena, *from._impl_.robot_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, type_),
           offsetof(Impl_, mode_) -
               offsetof(Impl_, type_) +
               sizeof(Impl_::mode_));

  // @@protoc_insertion_point(copy_constructor:abb.robot.MechanicalUnit)
}
inline PROTOBUF_NDEBUG_INLINE MechanicalUnit::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        singles_{visibility, arena},
        standardized_joints_{visibility, arena},
        name_(arena),
        task_name_(arena),
        is_integrated_unit_(arena),
        has_integrated_unit_(arena),
        status_(arena) {}

inline void MechanicalUnit::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, robot_),
           0,
           offsetof(Impl_, mode_) -
               offsetof(Impl_, robot_) +
               sizeof(Impl_::mode_));
}
MechanicalUnit::~MechanicalUnit() {
  // @@protoc_insertion_point(destructor:abb.robot.MechanicalUnit)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MechanicalUnit::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.task_name_.Destroy();
  _impl_.is_integrated_unit_.Destroy();
  _impl_.has_integrated_unit_.Destroy();
  _impl_.status_.Destroy();
  delete _impl_.robot_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void MechanicalUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.MechanicalUnit)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.singles_.Clear();
  _impl_.standardized_joints_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.task_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.is_integrated_unit_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.has_integrated_unit_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.status_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.robot_ != nullptr);
      _impl_.robot_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.axes_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.axes_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.axes_total_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.mode_) -
        reinterpret_cast<char*>(&_impl_.axes_total_)) + sizeof(_impl_.mode_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MechanicalUnit::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 5, 97, 2> MechanicalUnit::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MechanicalUnit, _impl_._has_bits_),
    0, // no _extensions_
    12, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MechanicalUnit_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string name = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MechanicalUnit, _impl_.name_)}},
    // optional .abb.robot.Robot robot = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 5, 0, PROTOBUF_FIELD_OFFSET(MechanicalUnit, _impl_.robot_)}},
    // repeated .abb.robot.Single singles = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 1, PROTOBUF_FIELD_OFFSET(MechanicalUnit, _impl_.singles_)}},
    // optional .abb.robot.MechanicalUnit.Type type = 4 [default = UNDEFINED];
    {::_pbi::TcParser::FastEr0S1,
     {32, 6, 4, PROTOBUF_FIELD_OFFSET(MechanicalUnit, _impl_.type_)}},
    // optional string task_name = 5;
    {::_pbi::TcParser::FastSS1,
     {42, 1, 0, PROTOBUF_FIELD_OFFSET(MechanicalUnit, _impl_.task_name_)}},
    // optional int32 axes = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MechanicalUnit, _impl_.axes_), 7>(),
     {48, 7, 0, PROTOBUF_FIELD_OFFSET(MechanicalUnit, _impl_.axes_)}},
    // optional int32 axes_total = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MechanicalUnit, _impl_.axes_total_), 8>(),
     {56, 8, 0, PROTOBUF_FIELD_OFFSET(MechanicalUnit, _impl_.axes_total_)}},
    // optional string is_integrated_unit = 8;
    {::_pbi::TcParser::FastSS1,
     {66, 2, 0, PROTOBUF_FIELD_OFFSET(MechanicalUnit, _impl_.is_integrated_unit_)}},
    // optional string has_integrated_unit = 9;
    {::_pbi::TcParser::FastSS1,
     {74, 3, 0, PROTOBUF_FIELD_OFFSET(MechanicalUnit, _impl_.has_integrated_unit_)}},
    // optional string status = 10;
    {::_pbi::TcParser::FastSS1,
     {82, 4, 0, PROTOBUF_FIELD_OFFSET(MechanicalUnit, _impl_.status_)}},
    // optional .abb.robot.MechanicalUnit.Mode mode = 11 [default = DEACTIVATED];
    {::_pbi::TcParser::FastEr0S1,
     {88, 9, 1, PROTOBUF_FIELD_OFFSET(MechanicalUnit, _impl_.mode_)}},
    // repeated .abb.robot.StandardizedJoint standardized_joints = 12;
    {::_pbi::TcParser::FastMtR1,
     {98, 63, 4, PROTOBUF_FIELD_OFFSET(MechanicalUnit, _impl_.standardized_joints_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string name = 1;
    {PROTOBUF_FIELD_OFFSET(MechanicalUnit, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional .abb.robot.Robot robot = 2;
    {PROTOBUF_FIELD_OFFSET(MechanicalUnit, _impl_.robot_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .abb.robot.Single singles = 3;
    {PROTOBUF_FIELD_OFFSET(MechanicalUnit, _impl_.singles_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .abb.robot.MechanicalUnit.Type type = 4 [default = UNDEFINED];
    {PROTOBUF_FIELD_OFFSET(MechanicalUnit, _impl_.type_), _Internal::kHasBitsOffset + 6, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional string task_name = 5;
    {PROTOBUF_FIELD_OFFSET(MechanicalUnit, _impl_.task_name_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional int32 axes = 6;
    {PROTOBUF_FIELD_OFFSET(MechanicalUnit, _impl_.axes_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 axes_total = 7;
    {PROTOBUF_FIELD_OFFSET(MechanicalUnit, _impl_.axes_total_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string is_integrated_unit = 8;
    {PROTOBUF_FIELD_OFFSET(MechanicalUnit, _impl_.is_integrated_unit_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string has_integrated_unit = 9;
    {PROTOBUF_FIELD_OFFSET(MechanicalUnit, _impl_.has_integrated_unit_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string status = 10;
    {PROTOBUF_FIELD_OFFSET(MechanicalUnit, _impl_.status_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional .abb.robot.MechanicalUnit.Mode mode = 11 [default = DEACTIVATED];
    {PROTOBUF_FIELD_OFFSET(MechanicalUnit, _impl_.mode_), _Internal::kHasBitsOffset + 9, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // repeated .abb.robot.StandardizedJoint standardized_joints = 12;
    {PROTOBUF_FIELD_OFFSET(MechanicalUnit, _impl_.standardized_joints_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::robot::Robot>()},
    {::_pbi::TcParser::GetTable<::abb::robot::Single>()},
    {0, 5},
    {0, 2},
    {::_pbi::TcParser::GetTable<::abb::robot::StandardizedJoint>()},
  }}, {{
    "\30\4\0\0\0\11\0\0\22\23\6\0\0\0\0\0"
    "abb.robot.MechanicalUnit"
    "name"
    "task_name"
    "is_integrated_unit"
    "has_integrated_unit"
    "status"
  }},
};

::uint8_t* MechanicalUnit::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.MechanicalUnit)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "abb.robot.MechanicalUnit.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional .abb.robot.Robot robot = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::robot(this),
        _Internal::robot(this).GetCachedSize(), target, stream);
  }

  // repeated .abb.robot.Single singles = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_singles_size()); i < n; i++) {
    const auto& repfield = this->_internal_singles().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .abb.robot.MechanicalUnit.Type type = 4 [default = UNDEFINED];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_type(), target);
  }

  // optional string task_name = 5;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_task_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "abb.robot.MechanicalUnit.task_name");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional int32 axes = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_axes(), target);
  }

  // optional int32 axes_total = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_axes_total(), target);
  }

  // optional string is_integrated_unit = 8;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_is_integrated_unit();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "abb.robot.MechanicalUnit.is_integrated_unit");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // optional string has_integrated_unit = 9;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_has_integrated_unit();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "abb.robot.MechanicalUnit.has_integrated_unit");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // optional string status = 10;
  if (cached_has_bits & 0x00000010u) {
    const std::string& _s = this->_internal_status();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "abb.robot.MechanicalUnit.status");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // optional .abb.robot.MechanicalUnit.Mode mode = 11 [default = DEACTIVATED];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        11, this->_internal_mode(), target);
  }

  // repeated .abb.robot.StandardizedJoint standardized_joints = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_standardized_joints_size()); i < n; i++) {
    const auto& repfield = this->_internal_standardized_joints().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.MechanicalUnit)
  return target;
}

::size_t MechanicalUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.MechanicalUnit)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .abb.robot.Single singles = 3;
  total_size += 1UL * this->_internal_singles_size();
  for (const auto& msg : this->_internal_singles()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .abb.robot.StandardizedJoint standardized_joints = 12;
  total_size += 1UL * this->_internal_standardized_joints_size();
  for (const auto& msg : this->_internal_standardized_joints()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional string task_name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_task_name());
    }

    // optional string is_integrated_unit = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_is_integrated_unit());
    }

    // optional string has_integrated_unit = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_has_integrated_unit());
    }

    // optional string status = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_status());
    }

    // optional .abb.robot.Robot robot = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.robot_);
    }

    // optional .abb.robot.MechanicalUnit.Type type = 4 [default = UNDEFINED];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional int32 axes = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_axes());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 axes_total = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_axes_total());
    }

    // optional .abb.robot.MechanicalUnit.Mode mode = 11 [default = DEACTIVATED];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MechanicalUnit::_class_data_ = {
    MechanicalUnit::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* MechanicalUnit::GetClassData() const {
  return &_class_data_;
}

void MechanicalUnit::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MechanicalUnit*>(&to_msg);
  auto& from = static_cast<const MechanicalUnit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.MechanicalUnit)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_singles()->MergeFrom(
      from._internal_singles());
  _this->_internal_mutable_standardized_joints()->MergeFrom(
      from._internal_standardized_joints());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_task_name(from._internal_task_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_is_integrated_unit(from._internal_is_integrated_unit());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_has_integrated_unit(from._internal_has_integrated_unit());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_status(from._internal_status());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_robot()->::abb::robot::Robot::MergeFrom(
          from._internal_robot());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.axes_ = from._impl_.axes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.axes_total_ = from._impl_.axes_total_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.mode_ = from._impl_.mode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MechanicalUnit::CopyFrom(const MechanicalUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.MechanicalUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MechanicalUnit::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MechanicalUnit::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MechanicalUnit::InternalSwap(MechanicalUnit* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.singles_.InternalSwap(&other->_impl_.singles_);
  _impl_.standardized_joints_.InternalSwap(&other->_impl_.standardized_joints_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.task_name_, &other->_impl_.task_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.is_integrated_unit_, &other->_impl_.is_integrated_unit_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.has_integrated_unit_, &other->_impl_.has_integrated_unit_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.status_, &other->_impl_.status_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MechanicalUnit, _impl_.mode_)
      + sizeof(MechanicalUnit::_impl_.mode_)
      - PROTOBUF_FIELD_OFFSET(MechanicalUnit, _impl_.robot_)>(
          reinterpret_cast<char*>(&_impl_.robot_),
          reinterpret_cast<char*>(&other->_impl_.robot_));
}

::google::protobuf::Metadata MechanicalUnit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_5fcontroller_5fdescription_2eproto_getter, &descriptor_table_robot_5fcontroller_5fdescription_2eproto_once,
      file_level_metadata_robot_5fcontroller_5fdescription_2eproto[16]);
}
// ===================================================================

class MechanicalUnitGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<MechanicalUnitGroup>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MechanicalUnitGroup, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::abb::robot::MechanicalUnit& robot(const MechanicalUnitGroup* msg);
  static void set_has_robot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::abb::robot::MechanicalUnit& MechanicalUnitGroup::_Internal::robot(const MechanicalUnitGroup* msg) {
  return *msg->_impl_.robot_;
}
MechanicalUnitGroup::MechanicalUnitGroup(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.robot.MechanicalUnitGroup)
}
inline PROTOBUF_NDEBUG_INLINE MechanicalUnitGroup::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        mechanical_units_{visibility, arena, from.mechanical_units_},
        name_(arena, from.name_) {}

MechanicalUnitGroup::MechanicalUnitGroup(
    ::google::protobuf::Arena* arena,
    const MechanicalUnitGroup& from)
    : ::google::protobuf::Message(arena) {
  MechanicalUnitGroup* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.robot_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::abb::robot::MechanicalUnit>(arena, *from._impl_.robot_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:abb.robot.MechanicalUnitGroup)
}
inline PROTOBUF_NDEBUG_INLINE MechanicalUnitGroup::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        mechanical_units_{visibility, arena},
        name_(arena) {}

inline void MechanicalUnitGroup::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.robot_ = {};
}
MechanicalUnitGroup::~MechanicalUnitGroup() {
  // @@protoc_insertion_point(destructor:abb.robot.MechanicalUnitGroup)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MechanicalUnitGroup::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  delete _impl_.robot_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void MechanicalUnitGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.MechanicalUnitGroup)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mechanical_units_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.robot_ != nullptr);
      _impl_.robot_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MechanicalUnitGroup::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 42, 2> MechanicalUnitGroup::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MechanicalUnitGroup, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MechanicalUnitGroup_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string name = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MechanicalUnitGroup, _impl_.name_)}},
    // optional .abb.robot.MechanicalUnit robot = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(MechanicalUnitGroup, _impl_.robot_)}},
    // repeated .abb.robot.MechanicalUnit mechanical_units = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 1, PROTOBUF_FIELD_OFFSET(MechanicalUnitGroup, _impl_.mechanical_units_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string name = 1;
    {PROTOBUF_FIELD_OFFSET(MechanicalUnitGroup, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional .abb.robot.MechanicalUnit robot = 2;
    {PROTOBUF_FIELD_OFFSET(MechanicalUnitGroup, _impl_.robot_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .abb.robot.MechanicalUnit mechanical_units = 3;
    {PROTOBUF_FIELD_OFFSET(MechanicalUnitGroup, _impl_.mechanical_units_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::abb::robot::MechanicalUnit>()},
    {::_pbi::TcParser::GetTable<::abb::robot::MechanicalUnit>()},
  }}, {{
    "\35\4\0\0\0\0\0\0"
    "abb.robot.MechanicalUnitGroup"
    "name"
  }},
};

::uint8_t* MechanicalUnitGroup::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.MechanicalUnitGroup)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "abb.robot.MechanicalUnitGroup.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional .abb.robot.MechanicalUnit robot = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::robot(this),
        _Internal::robot(this).GetCachedSize(), target, stream);
  }

  // repeated .abb.robot.MechanicalUnit mechanical_units = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mechanical_units_size()); i < n; i++) {
    const auto& repfield = this->_internal_mechanical_units().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.MechanicalUnitGroup)
  return target;
}

::size_t MechanicalUnitGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.MechanicalUnitGroup)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .abb.robot.MechanicalUnit mechanical_units = 3;
  total_size += 1UL * this->_internal_mechanical_units_size();
  for (const auto& msg : this->_internal_mechanical_units()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional .abb.robot.MechanicalUnit robot = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.robot_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MechanicalUnitGroup::_class_data_ = {
    MechanicalUnitGroup::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* MechanicalUnitGroup::GetClassData() const {
  return &_class_data_;
}

void MechanicalUnitGroup::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MechanicalUnitGroup*>(&to_msg);
  auto& from = static_cast<const MechanicalUnitGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.MechanicalUnitGroup)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_mechanical_units()->MergeFrom(
      from._internal_mechanical_units());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_robot()->::abb::robot::MechanicalUnit::MergeFrom(
          from._internal_robot());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MechanicalUnitGroup::CopyFrom(const MechanicalUnitGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.MechanicalUnitGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MechanicalUnitGroup::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MechanicalUnitGroup::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MechanicalUnitGroup::InternalSwap(MechanicalUnitGroup* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mechanical_units_.InternalSwap(&other->_impl_.mechanical_units_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  swap(_impl_.robot_, other->_impl_.robot_);
}

::google::protobuf::Metadata MechanicalUnitGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_5fcontroller_5fdescription_2eproto_getter, &descriptor_table_robot_5fcontroller_5fdescription_2eproto_once,
      file_level_metadata_robot_5fcontroller_5fdescription_2eproto[17]);
}
// ===================================================================

class RAPIDModule::_Internal {
 public:
  using HasBits = decltype(std::declval<RAPIDModule>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RAPIDModule, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RAPIDModule::RAPIDModule(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.robot.RAPIDModule)
}
inline PROTOBUF_NDEBUG_INLINE RAPIDModule::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_),
        type_(arena, from.type_) {}

RAPIDModule::RAPIDModule(
    ::google::protobuf::Arena* arena,
    const RAPIDModule& from)
    : ::google::protobuf::Message(arena) {
  RAPIDModule* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:abb.robot.RAPIDModule)
}
inline PROTOBUF_NDEBUG_INLINE RAPIDModule::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        name_(arena),
        type_(arena) {}

inline void RAPIDModule::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
RAPIDModule::~RAPIDModule() {
  // @@protoc_insertion_point(destructor:abb.robot.RAPIDModule)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RAPIDModule::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.type_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RAPIDModule::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.RAPIDModule)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.type_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RAPIDModule::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 38, 2> RAPIDModule::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RAPIDModule, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_RAPIDModule_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional string type = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(RAPIDModule, _impl_.type_)}},
    // optional string name = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RAPIDModule, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string name = 1;
    {PROTOBUF_FIELD_OFFSET(RAPIDModule, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string type = 2;
    {PROTOBUF_FIELD_OFFSET(RAPIDModule, _impl_.type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\25\4\4\0\0\0\0\0"
    "abb.robot.RAPIDModule"
    "name"
    "type"
  }},
};

::uint8_t* RAPIDModule::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.RAPIDModule)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "abb.robot.RAPIDModule.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_type();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "abb.robot.RAPIDModule.type");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.RAPIDModule)
  return target;
}

::size_t RAPIDModule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.RAPIDModule)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional string type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RAPIDModule::_class_data_ = {
    RAPIDModule::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RAPIDModule::GetClassData() const {
  return &_class_data_;
}

void RAPIDModule::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RAPIDModule*>(&to_msg);
  auto& from = static_cast<const RAPIDModule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.RAPIDModule)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_type(from._internal_type());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RAPIDModule::CopyFrom(const RAPIDModule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.RAPIDModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RAPIDModule::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RAPIDModule::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RAPIDModule::InternalSwap(RAPIDModule* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, &other->_impl_.type_, arena);
}

::google::protobuf::Metadata RAPIDModule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_5fcontroller_5fdescription_2eproto_getter, &descriptor_table_robot_5fcontroller_5fdescription_2eproto_once,
      file_level_metadata_robot_5fcontroller_5fdescription_2eproto[18]);
}
// ===================================================================

class RAPIDTask::_Internal {
 public:
  using HasBits = decltype(std::declval<RAPIDTask>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RAPIDTask, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_motion_task(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_active(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_execution_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

RAPIDTask::RAPIDTask(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:abb.robot.RAPIDTask)
}
inline PROTOBUF_NDEBUG_INLINE RAPIDTask::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        modules_{visibility, arena, from.modules_},
        name_(arena, from.name_) {}

RAPIDTask::RAPIDTask(
    ::google::protobuf::Arena* arena,
    const RAPIDTask& from)
    : ::google::protobuf::Message(arena) {
  RAPIDTask* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, is_motion_task_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, is_motion_task_),
           offsetof(Impl_, execution_state_) -
               offsetof(Impl_, is_motion_task_) +
               sizeof(Impl_::execution_state_));

  // @@protoc_insertion_point(copy_constructor:abb.robot.RAPIDTask)
}
inline PROTOBUF_NDEBUG_INLINE RAPIDTask::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        modules_{visibility, arena},
        name_(arena),
        execution_state_{static_cast< ::abb::robot::RAPIDTask_ExecutionState >(1)} {}

inline void RAPIDTask::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, is_motion_task_),
           0,
           offsetof(Impl_, is_active_) -
               offsetof(Impl_, is_motion_task_) +
               sizeof(Impl_::is_active_));
}
RAPIDTask::~RAPIDTask() {
  // @@protoc_insertion_point(destructor:abb.robot.RAPIDTask)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RAPIDTask::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RAPIDTask::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.RAPIDTask)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.modules_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  ::memset(&_impl_.is_motion_task_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_active_) -
      reinterpret_cast<char*>(&_impl_.is_motion_task_)) + sizeof(_impl_.is_active_));
  _impl_.execution_state_ = 1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RAPIDTask::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 2, 32, 2> RAPIDTask::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RAPIDTask, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RAPIDTask_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string name = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RAPIDTask, _impl_.name_)}},
    // optional bool is_motion_task = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RAPIDTask, _impl_.is_motion_task_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(RAPIDTask, _impl_.is_motion_task_)}},
    // optional bool is_active = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RAPIDTask, _impl_.is_active_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(RAPIDTask, _impl_.is_active_)}},
    // optional .abb.robot.RAPIDTask.ExecutionState execution_state = 4 [default = UNKNOWN];
    {::_pbi::TcParser::FastEr1S1,
     {32, 3, 5, PROTOBUF_FIELD_OFFSET(RAPIDTask, _impl_.execution_state_)}},
    // repeated .abb.robot.RAPIDModule modules = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 1, PROTOBUF_FIELD_OFFSET(RAPIDTask, _impl_.modules_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string name = 1;
    {PROTOBUF_FIELD_OFFSET(RAPIDTask, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional bool is_motion_task = 2;
    {PROTOBUF_FIELD_OFFSET(RAPIDTask, _impl_.is_motion_task_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool is_active = 3;
    {PROTOBUF_FIELD_OFFSET(RAPIDTask, _impl_.is_active_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional .abb.robot.RAPIDTask.ExecutionState execution_state = 4 [default = UNKNOWN];
    {PROTOBUF_FIELD_OFFSET(RAPIDTask, _impl_.execution_state_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // repeated .abb.robot.RAPIDModule modules = 5;
    {PROTOBUF_FIELD_OFFSET(RAPIDTask, _impl_.modules_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {1, 5},
    {::_pbi::TcParser::GetTable<::abb::robot::RAPIDModule>()},
  }}, {{
    "\23\4\0\0\0\0\0\0"
    "abb.robot.RAPIDTask"
    "name"
  }},
};

::uint8_t* RAPIDTask::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.RAPIDTask)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "abb.robot.RAPIDTask.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional bool is_motion_task = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_is_motion_task(), target);
  }

  // optional bool is_active = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_is_active(), target);
  }

  // optional .abb.robot.RAPIDTask.ExecutionState execution_state = 4 [default = UNKNOWN];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_execution_state(), target);
  }

  // repeated .abb.robot.RAPIDModule modules = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_modules_size()); i < n; i++) {
    const auto& repfield = this->_internal_modules().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.RAPIDTask)
  return target;
}

::size_t RAPIDTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.RAPIDTask)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .abb.robot.RAPIDModule modules = 5;
  total_size += 1UL * this->_internal_modules_size();
  for (const auto& msg : this->_internal_modules()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional bool is_motion_task = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

    // optional bool is_active = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }

    // optional .abb.robot.RAPIDTask.ExecutionState execution_state = 4 [default = UNKNOWN];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_execution_state());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RAPIDTask::_class_data_ = {
    RAPIDTask::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RAPIDTask::GetClassData() const {
  return &_class_data_;
}

void RAPIDTask::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RAPIDTask*>(&to_msg);
  auto& from = static_cast<const RAPIDTask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.RAPIDTask)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_modules()->MergeFrom(
      from._internal_modules());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.is_motion_task_ = from._impl_.is_motion_task_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.is_active_ = from._impl_.is_active_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.execution_state_ = from._impl_.execution_state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RAPIDTask::CopyFrom(const RAPIDTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.RAPIDTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RAPIDTask::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RAPIDTask::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RAPIDTask::InternalSwap(RAPIDTask* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.modules_.InternalSwap(&other->_impl_.modules_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RAPIDTask, _impl_.execution_state_)
      + sizeof(RAPIDTask::_impl_.execution_state_)
      - PROTOBUF_FIELD_OFFSET(RAPIDTask, _impl_.is_motion_task_)>(
          reinterpret_cast<char*>(&_impl_.is_motion_task_),
          reinterpret_cast<char*>(&other->_impl_.is_motion_task_));
}

::google::protobuf::Metadata RAPIDTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_5fcontroller_5fdescription_2eproto_getter, &descriptor_table_robot_5fcontroller_5fdescription_2eproto_once,
      file_level_metadata_robot_5fcontroller_5fdescription_2eproto[19]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace robot
}  // namespace abb
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
